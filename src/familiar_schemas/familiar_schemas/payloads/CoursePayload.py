# generated by datamodel-codegen:
#   filename:  tmpq89vwunv.json
#   timestamp: 2025-06-21T03:58:15+00:00

from __future__ import annotations

from enum import Enum
from typing import Annotated, Sequence

from pydantic import BaseModel, ConfigDict, Field


class UserContext(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    user_id: Annotated[
        str,
        Field(
            description='A canonical definition for a Universally Unique Identifier (UUID).',
            title='UUID',
        ),
    ]
    session_id: Annotated[
        str | None,
        Field(
            description='A reusable definition for a unique entity identifier.',
            title='Entity ID Field',
        ),
    ]


class AnalysisType(str, Enum):
    """
    The type of deep analysis to be performed.
    """

    CorrelationAnalysis = 'CorrelationAnalysis'
    StructuralResonance = 'StructuralResonance'
    DensityIntelligence = 'DensityIntelligence'


class Status(str, Enum):
    """
    The current status of a task or process.
    """

    Pending = 'Pending'
    InProgress = 'InProgress'
    Completed = 'Completed'
    Cancelled = 'Cancelled'


class Data(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    analysis_type: Annotated[
        AnalysisType, Field(description='The type of deep analysis to be performed.')
    ]
    query: str
    status: Annotated[
        Status,
        Field(
            description='The current status of a task or process.', title='Status Field'
        ),
    ]
    active_shuttle_ids: Annotated[
        Sequence[str] | None,
        Field(
            description='A canonical definition for a list of unique entity identifiers (UUIDs).',
            title='Entity ID List',
        ),
    ]


class CoursePayload(BaseModel):
    """
    Represents a high-level, long-running cognitive analysis task or workflow.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    user_context: Annotated[UserContext, Field(title='BaseUserContext')]
    data: Annotated[Data, Field(title='CourseData')]
