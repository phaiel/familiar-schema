# generated by datamodel-codegen:
#   filename:  tmpl9zj8g1t.json
#   timestamp: 2025-06-21T03:58:19+00:00

from __future__ import annotations

from enum import Enum
from typing import Annotated, Mapping

from pydantic import BaseModel, ConfigDict, Field


class UserContext(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    user_id: Annotated[
        str,
        Field(
            description='A canonical definition for a Universally Unique Identifier (UUID).',
            title='UUID',
        ),
    ]
    session_id: Annotated[
        str | None,
        Field(
            description='A reusable definition for a unique entity identifier.',
            title='Entity ID Field',
        ),
    ]


class SuggestedEntityType(str, Enum):
    """
    A canonical enum of all 7 cognitive entity types.
    """

    Focus = 'Focus'
    Filament = 'Filament'
    Motif = 'Motif'
    Intent = 'Intent'
    Moment = 'Moment'
    Bond = 'Bond'
    Thread = 'Thread'


class Data1(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    parent_weave_id: Annotated[
        str,
        Field(
            description='A reusable definition for a unique entity identifier.',
            title='Entity ID Field',
        ),
    ]
    text: str
    suggested_entity_type: Annotated[
        SuggestedEntityType | None,
        Field(
            description='A canonical enum of all 7 cognitive entity types.',
            title='Entity Type',
        ),
    ]


class ActiveWeaveUnit(BaseModel):
    """
    A single, logical strand of information deconstructed from a Weave, enhanced with an entity type hint.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    user_context: Annotated[UserContext, Field(title='BaseUserContext')]
    data: Annotated[Data1, Field(title='WeaveUnitData')]


class TaskType(str, Enum):
    """
    A canonical enum for the types of reconciliation tasks performed by the Heddle engine.
    """

    Structural = 'Structural'
    Emotional = 'Emotional'
    Identity = 'Identity'


class Data2(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    task_type: Annotated[
        TaskType,
        Field(
            description='A canonical enum for the types of reconciliation tasks performed by the Heddle engine.',
            title='Reconciliation Task Type',
        ),
    ]
    selected_candidate_id: str
    confidence_score: float
    agent_reasoning: str | None


class ReconciliationResults(BaseModel):
    """
    The structured output from a single Heddle reconciliation task.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    user_context: Annotated[UserContext, Field(title='BaseUserContext')]
    data: Annotated[Data2, Field(title='ReconciliationResultData')]


class Data(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    parent_course_id: Annotated[
        str,
        Field(
            description='A reusable definition for a unique entity identifier.',
            title='Entity ID Field',
        ),
    ]
    active_weave_unit: Annotated[
        ActiveWeaveUnit,
        Field(
            description='A single, logical strand of information deconstructed from a Weave, enhanced with an entity type hint.',
            title='Weave Unit Payload',
        ),
    ]
    reconciliation_results: Annotated[
        Mapping[str, ReconciliationResults] | None,
        Field(
            description='A map of reconciliation task types to their results. This is extensible for new reconciliation steps.',
            title='IngestionshuttledataReconciliationResults',
        ),
    ]
    is_ready_for_creation: bool | None = False


class ShuttlePayload(BaseModel):
    """
    The state object that carries a WeaveUnit through the Heddle reconciliation pipeline.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    user_context: Annotated[UserContext, Field(title='BaseUserContext')]
    data: Annotated[Data, Field(title='IngestionShuttleData')]
