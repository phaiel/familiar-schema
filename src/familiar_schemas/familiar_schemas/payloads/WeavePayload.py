# generated by datamodel-codegen:
#   filename:  tmp_t0wkfzn.json
#   timestamp: 2025-06-21T16:54:10+00:00

from __future__ import annotations

from enum import Enum
from typing import Annotated

from pydantic import BaseModel, ConfigDict, Field


class UserContext(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    user_id: Annotated[
        str,
        Field(
            description='A canonical definition for a Universally Unique Identifier (UUID).',
            title='UUID',
        ),
    ]
    session_id: Annotated[
        str | None,
        Field(
            description='A reusable definition for a unique entity identifier.',
            title='Entity ID Field',
        ),
    ]


class SourceType(str, Enum):
    """
    Classifies the source format of a user's input 'Weave'.
    """

    text = 'text'
    audio = 'audio'
    image = 'image'
    document = 'document'
    system_event = 'system_event'


class Data(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    text_content: str
    source_type: Annotated[
        SourceType,
        Field(
            description="Classifies the source format of a user's input 'Weave'.",
            title='Weave Type',
        ),
    ]


class WeavePayload(BaseModel):
    """
    Represents a complete, raw text input from a user, ready for ingestion.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    user_context: Annotated[UserContext, Field(title='BaseUserContext')]
    data: Annotated[Data, Field(title='WeaveData')]
