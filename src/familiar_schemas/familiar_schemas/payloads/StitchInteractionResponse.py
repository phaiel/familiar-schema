# generated by datamodel-codegen:
#   filename:  tmpf26y7w7y.json
#   timestamp: 2025-06-21T16:54:09+00:00

from __future__ import annotations

from typing import Annotated

from pydantic import BaseModel, ConfigDict, Field, RootModel


class ResponsePayload(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    Choice: Annotated[
        str,
        Field(description='The ID of the chosen option from a MultipleChoice request.'),
    ]


class ResponsePayload1(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    Confirmed: Annotated[
        bool, Field(description='The boolean result of a Confirmation request.')
    ]


class ResponsePayload2(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    Text: Annotated[str, Field(description='The text provided in a FreeText request.')]


class StitchInteractionResponse(BaseModel):
    """
    Schema for the Redpanda event carrying the user's response back to the system to resolve a cognitive dissonance.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    stitch_id: Annotated[
        str,
        Field(
            description='A canonical definition for a Universally Unique Identifier (UUID).',
            title='UUID',
        ),
    ]
    interaction_id: Annotated[
        str,
        Field(
            description='A canonical definition for a Universally Unique Identifier (UUID).',
            title='UUID',
        ),
    ]
    user_id: Annotated[
        str,
        Field(
            description='A canonical definition for a Universally Unique Identifier (UUID).',
            title='UUID',
        ),
    ]
    response_payload: ResponsePayload | ResponsePayload1 | ResponsePayload2
    timestamp: Annotated[
        str,
        Field(
            description='A canonical definition for an ISO 8601 timestamp with timezone.',
            title='Timestamp',
        ),
    ]


StitchResponsePayload1 = ResponsePayload


StitchResponsePayload2 = ResponsePayload1


StitchResponsePayload3 = ResponsePayload2


class StitchResponsePayload(
    RootModel[StitchResponsePayload1 | StitchResponsePayload2 | StitchResponsePayload3]
):
    model_config = ConfigDict(
        frozen=True,
    )
    root: StitchResponsePayload1 | StitchResponsePayload2 | StitchResponsePayload3
