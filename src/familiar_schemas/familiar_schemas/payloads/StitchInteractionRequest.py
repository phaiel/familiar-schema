# generated by datamodel-codegen:
#   filename:  tmpkk8zgol2.json
#   timestamp: 2025-06-21T03:58:19+00:00

from __future__ import annotations

from typing import Annotated, Literal, Sequence

from pydantic import BaseModel, ConfigDict, Field, RootModel


class Option(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    id: str
    label: Annotated[
        str,
        Field(
            description='A canonical definition for a short, human-readable UI label or title.',
            title='Label Field',
        ),
    ]
    description: Annotated[
        str | None,
        Field(
            description='A canonical, reusable definition for a human-readable description field.',
            title='Description Field',
        ),
    ] = ''


class InteractionType(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    type: Literal['MultipleChoice']
    options: Sequence[Option]


class InteractionType1(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    type: Literal['Confirmation']
    confirm_text: Annotated[
        str | None,
        Field(
            description='A canonical definition for a short, human-readable UI label or title.',
            title='Label Field',
        ),
    ]
    deny_text: Annotated[
        str | None,
        Field(
            description='A canonical definition for a short, human-readable UI label or title.',
            title='Label Field',
        ),
    ]


class InteractionType2(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    type: Literal['FreeText']
    placeholder: Annotated[
        str | None,
        Field(
            description='A canonical definition for a short, human-readable UI label or title.',
            title='Label Field',
        ),
    ]
    submit_text: Annotated[
        str | None,
        Field(
            description='A canonical definition for a short, human-readable UI label or title.',
            title='Label Field',
        ),
    ]


class StitchInteractionRequest(BaseModel):
    """
    The structured request for human input, embedded within a StitchEntity, used when the system requires user collaboration to resolve a cognitive dissonance.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    interaction_id: Annotated[
        str,
        Field(
            description='A canonical definition for a Universally Unique Identifier (UUID).',
            title='UUID',
        ),
    ]
    prompt_title: Annotated[
        str,
        Field(
            description='A canonical definition for a short, human-readable UI label or title.',
            title='Label Field',
        ),
    ]
    prompt_details: Annotated[
        str,
        Field(
            description='A canonical, reusable definition for a human-readable description field.',
            title='Description Field',
        ),
    ]
    interaction_type: InteractionType | InteractionType1 | InteractionType2
    agent_context: Annotated[
        str | None,
        Field(
            description='A canonical, reusable definition for a human-readable description field.',
            title='Description Field',
        ),
    ] = ''


StitchInteractionType1 = InteractionType


StitchInteractionType2 = InteractionType1


StitchInteractionType3 = InteractionType2


class StitchInteractionType(
    RootModel[StitchInteractionType1 | StitchInteractionType2 | StitchInteractionType3]
):
    model_config = ConfigDict(
        frozen=True,
    )
    root: StitchInteractionType1 | StitchInteractionType2 | StitchInteractionType3
