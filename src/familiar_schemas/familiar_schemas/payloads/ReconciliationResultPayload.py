# generated by datamodel-codegen:
#   filename:  tmpxtxi1nb0.json
#   timestamp: 2025-06-21T16:54:08+00:00

from __future__ import annotations

from enum import Enum
from typing import Annotated

from pydantic import BaseModel, ConfigDict, Field


class UserContext(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    user_id: Annotated[
        str,
        Field(
            description='A canonical definition for a Universally Unique Identifier (UUID).',
            title='UUID',
        ),
    ]
    session_id: Annotated[
        str | None,
        Field(
            description='A reusable definition for a unique entity identifier.',
            title='Entity ID Field',
        ),
    ]


class TaskType(str, Enum):
    """
    A canonical enum for the types of reconciliation tasks performed by the Heddle engine.
    """

    Structural = 'Structural'
    Emotional = 'Emotional'
    Identity = 'Identity'


class Data(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    task_type: Annotated[
        TaskType,
        Field(
            description='A canonical enum for the types of reconciliation tasks performed by the Heddle engine.',
            title='Reconciliation Task Type',
        ),
    ]
    selected_candidate_id: str
    confidence_score: float
    agent_reasoning: str | None


class ReconciliationResultPayload(BaseModel):
    """
    The structured output from a single Heddle reconciliation task.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    user_context: Annotated[UserContext, Field(title='BaseUserContext')]
    data: Annotated[Data, Field(title='ReconciliationResultData')]
