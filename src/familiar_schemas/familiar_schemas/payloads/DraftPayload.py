# generated by datamodel-codegen:
#   filename:  tmp8ngogr41.json
#   timestamp: 2025-06-21T16:54:08+00:00

from __future__ import annotations

from enum import Enum
from typing import Annotated, Any, Mapping, Sequence

from pydantic import BaseModel, ConfigDict, Field


class UserContext(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    user_id: Annotated[
        str,
        Field(
            description='A canonical definition for a Universally Unique Identifier (UUID).',
            title='UUID',
        ),
    ]
    session_id: Annotated[
        str | None,
        Field(
            description='A reusable definition for a unique entity identifier.',
            title='Entity ID Field',
        ),
    ]


class Engine(Enum):
    """
    The physics engine responsible for this object.
    """

    quantum = 'quantum'
    classical = 'classical'
    hybrid = 'hybrid'


class PhysicsProperties(BaseModel):
    """
    Defines the common physics-related properties for components and laws.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    collapse_sensitive: Annotated[
        bool | None,
        Field(
            description='Indicates if the object is affected by or triggers quantum collapse.'
        ),
    ]
    engine: Annotated[
        Engine, Field(description='The physics engine responsible for this object.')
    ]
    is_quantum: Annotated[
        bool, Field(description='Indicates if the object has quantum properties.')
    ]


class MomentType(str, Enum):
    """
    A canonical enum for the classification of a Moment entity's content.
    """

    Event = 'Event'
    Experience = 'Experience'
    Observation = 'Observation'
    Interaction = 'Interaction'


class Fields(BaseModel):
    """
    A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.
    """

    model_config = ConfigDict(
        extra='forbid',
        frozen=True,
    )
    description: Annotated[
        str,
        Field(
            description='A canonical, reusable definition for a human-readable description field.',
            title='Description Field',
        ),
    ]
    moment_type: Annotated[
        MomentType,
        Field(
            description="A canonical enum for the classification of a Moment entity's content.",
            title='Moment Type',
        ),
    ]
    participants: Annotated[
        Sequence[str] | None,
        Field(
            description='A canonical definition for a list of unique entity identifiers (UUIDs).',
            title='Entity ID List',
        ),
    ]
    objective_facts: Annotated[
        Mapping[
            str, str | float | int | bool | Mapping[str, Any] | Sequence[Any] | None
        ]
        | None,
        Field(
            description='A generic key-value map where keys are strings and values can be any JSON type. Used for flexible data structures like parameters or metadata.',
            title='String Value Map',
        ),
    ]


class Content(BaseModel):
    """
    Defines the objective, factual content of a Moment entity, representing a specific event in time.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    title: Annotated[
        str,
        Field(
            description="The human-readable, PascalCase name of the object (e.g., 'UniversalPhysicsState')."
        ),
    ]
    description: Annotated[
        str,
        Field(
            description="A clear, complete sentence explaining the object's purpose and function within the system."
        ),
    ]
    schema_version: Annotated[
        str,
        Field(
            description="The semantic version of this schema definition (e.g., '1.0.0')."
        ),
    ]
    physics_properties: Annotated[
        PhysicsProperties,
        Field(
            description='Defines the common physics-related properties for components and laws.',
            title='Base Physics Properties',
        ),
    ]
    fields: Annotated[
        Fields,
        Field(
            description='A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.',
            title='MomentContentFields',
        ),
    ]


class Components(BaseModel):
    """
    Component references temporarily disabled for pipeline testing
    """

    model_config = ConfigDict(
        frozen=True,
    )
    field_comment: Annotated[
        str | None,
        Field(
            alias='_comment',
            description='TODO: Re-enable component references when component schemas are available',
        ),
    ]
    content: Annotated[
        Content,
        Field(
            description='Defines the objective, factual content of a Moment entity, representing a specific event in time.',
            title='Moment Content Component',
        ),
    ]


class EntityType(str, Enum):
    """
    A canonical enum of all 7 cognitive entity types.
    """

    Focus = 'Focus'
    Filament = 'Filament'
    Motif = 'Motif'
    Intent = 'Intent'
    Moment = 'Moment'
    Bond = 'Bond'
    Thread = 'Thread'


PhysicsProperties1 = PhysicsProperties


class DecayRate(BaseModel):
    """
    The base rate of energy or coherence decay for an entity, before multipliers are applied.
    """

    model_config = ConfigDict(
        extra='forbid',
        frozen=True,
    )
    value: float


class ConsolidationRate(BaseModel):
    """
    The base rate of memory consolidation for an entity, before multipliers are applied. Represents how quickly an unstable memory becomes stable.
    """

    model_config = ConfigDict(
        extra='forbid',
        frozen=True,
    )
    value: Annotated[float, Field(ge=0.0, le=1.0)]


class Fields1(BaseModel):
    """
    A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.
    """

    model_config = ConfigDict(
        extra='forbid',
        frozen=True,
    )
    energy: Annotated[
        float, Field(description='The current energy level of an entity.')
    ]
    momentum: Annotated[
        Sequence[float],
        Field(
            description='A reusable data type for a vector of six f64 numbers, used for momentum and forces in the 6 spatial dimensions of the manifold.',
            max_length=6,
            min_length=6,
            title='6D Physics Vector',
        ),
    ]
    cognitive_perspective: Annotated[
        Sequence[float],
        Field(
            description="The intrinsic 'spin' or 'flavor' of the entity, which generates cognitive dissonance (torsion).",
            max_length=3,
            min_length=3,
            title='Cognitive Perspective Field',
        ),
    ]
    decay_rate: Annotated[
        DecayRate,
        Field(
            description='The base rate of energy or coherence decay for an entity, before multipliers are applied.'
        ),
    ]
    consolidation_rate: Annotated[
        ConsolidationRate,
        Field(
            description='The base rate of memory consolidation for an entity, before multipliers are applied. Represents how quickly an unstable memory becomes stable.',
            title='Consolidation Rate Field',
        ),
    ]
    quantum_coherence: Annotated[
        float | None,
        Field(
            description='The quantum coherence level of the entity, representing its degree of superposition. Null for classical entities.',
            ge=0.0,
            le=1.0,
        ),
    ] = None
    entanglement_strength: Annotated[
        float | None,
        Field(
            description='The overall entanglement strength of this entity with others. Null for classical entities.',
            ge=0.0,
            le=1.0,
        ),
    ] = None


class Universal(BaseModel):
    """
    The transient, mutable physics state of an entity.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    physics_properties: Annotated[
        PhysicsProperties1,
        Field(
            description='Defines the common physics-related properties for components and laws.',
            title='Base Physics Properties',
        ),
    ]
    fields: Annotated[
        Fields1,
        Field(
            description='A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.',
            title='UniversalPhysicsStateFields',
        ),
    ]


PhysicsProperties2 = PhysicsProperties


class Fields2(BaseModel):
    """
    A direct reference to a shared definition in SharedDefinitions.schema.json.
    """

    model_config = ConfigDict(
        extra='forbid',
        frozen=True,
    )
    field_ref: Annotated[str, Field(alias='$ref')]


class Type(str, Enum):
    """
    A primitive type, represented as a string from a controlled vocabulary.
    """

    string = 'string'
    boolean = 'boolean'
    integer = 'integer'
    number = 'number'
    f32 = 'f32'
    f64 = 'f64'
    i32 = 'i32'
    i64 = 'i64'
    u32 = 'u32'
    u64 = 'u64'
    uuid = 'uuid'
    date_time = 'date-time'
    duration = 'duration'
    object = 'object'
    array = 'array'


class Type1(BaseModel):
    """
    A complex, contrived meta-type, represented by a reference to its canonical schema file.
    """

    model_config = ConfigDict(
        extra='forbid',
        frozen=True,
    )
    field_ref: Annotated[str, Field(alias='$ref')]


class Constraints(BaseModel):
    """
    A canonical definition for field validation constraints.
    """

    model_config = ConfigDict(
        extra='forbid',
        frozen=True,
    )
    minimum: float | None
    maximum: float | None
    minLength: int | None
    maxLength: int | None
    pattern: str | None
    enum: Sequence[str] | None


class Fields3(BaseModel):
    """
    Defines the structure for a single, inline field definition within a component.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    description: Annotated[
        str,
        Field(
            description='A canonical, reusable definition for a human-readable description field.',
            title='Description Field',
        ),
    ]
    type: Annotated[
        Type | Type1,
        Field(
            description='The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.',
            title='Base Type System',
        ),
    ]
    default_value: Annotated[
        str | float | int | bool | Mapping[str, Any] | Sequence[Any] | None,
        Field(
            description="Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.",
            title='Any Value',
        ),
    ] = None
    constraints: Annotated[
        Constraints | None,
        Field(
            description='A canonical definition for field validation constraints.',
            title='Constraint Definition',
        ),
    ]
    ui_label: str | None


class ManifoldPosition(BaseModel):
    """
    The entity's position in the 7D cognitive manifold, enforcing quantized spatial coordinates (Rule 8).
    """

    model_config = ConfigDict(
        frozen=True,
    )
    physics_properties: Annotated[
        PhysicsProperties2,
        Field(
            description='Defines the common physics-related properties for components and laws.',
            title='Base Physics Properties',
        ),
    ]
    fields: Annotated[
        Mapping[str, Fields2 | Fields3],
        Field(
            description='A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.',
            title='BaseFields',
        ),
    ]


class PhysicsState(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    universal: Annotated[
        Universal,
        Field(
            description='The transient, mutable physics state of an entity.',
            title='Universal Physics State Component',
        ),
    ]
    manifold_position: Annotated[
        ManifoldPosition,
        Field(
            description="The entity's position in the 7D cognitive manifold, enforcing quantized spatial coordinates (Rule 8).",
            title='Memory Manifold Position Component',
        ),
    ]


class Data(BaseModel):
    """
    A classical entity representing a specific, objective event in the past. This is the atomic unit of episodic memory.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    title: Annotated[
        str,
        Field(
            description="The human-readable, PascalCase name of the object (e.g., 'UniversalPhysicsState')."
        ),
    ]
    description: Annotated[
        str,
        Field(
            description="A clear, complete sentence explaining the object's purpose and function within the system."
        ),
    ]
    schema_version: Annotated[
        str,
        Field(
            description="The semantic version of this schema definition (e.g., '1.0.0')."
        ),
    ]
    entity_id: Annotated[
        str,
        Field(
            description='A reusable definition for a unique entity identifier.',
            title='Entity ID Field',
        ),
    ]
    tenant_id: Annotated[
        str,
        Field(
            description='A canonical definition for a Universally Unique Identifier (UUID).',
            title='UUID',
        ),
    ]
    created_at: Annotated[
        str,
        Field(
            description='A canonical definition for an ISO 8601 timestamp with timezone.',
            title='Timestamp',
        ),
    ]
    components: Annotated[
        Components,
        Field(
            description='Component references temporarily disabled for pipeline testing',
            title='MomentComponents',
        ),
    ]
    entity_type: Annotated[
        EntityType,
        Field(
            description='A canonical enum of all 7 cognitive entity types.',
            title='Entity Type',
        ),
    ]
    physics_state: Annotated[PhysicsState, Field(title='MomentPhysicsState')]


PhysicsProperties3 = PhysicsProperties


class RelationshipType(str, Enum):
    """
    A canonical enum of all possible relationship types between Threads.
    """

    Family = 'Family'
    Friend = 'Friend'
    Romantic = 'Romantic'
    Professional = 'Professional'
    Acquaintance = 'Acquaintance'
    Adversarial = 'Adversarial'


class History(BaseModel):
    """
    Represents a significant event that impacted a bond's strength or state.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    moment_id: str
    impact: Annotated[
        float,
        Field(
            description='How much this event affected the bond, from -1.0 (negative) to 1.0 (positive).',
            ge=-1.0,
            le=1.0,
        ),
    ]
    timestamp: Annotated[
        str,
        Field(
            description='A canonical definition for an ISO 8601 timestamp with timezone.',
            title='Timestamp',
        ),
    ]


class Fields4(BaseModel):
    """
    A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.
    """

    model_config = ConfigDict(
        extra='forbid',
        frozen=True,
    )
    relationship_type: Annotated[
        RelationshipType,
        Field(
            description='A canonical enum of all possible relationship types between Threads.',
            title='Relationship Type',
        ),
    ]
    description: Annotated[
        str | None,
        Field(
            description='A canonical, reusable definition for a human-readable description field.',
            title='Description Field',
        ),
    ] = ''
    history: Sequence[History] | None


class Content1(BaseModel):
    """
    Defines the descriptive content and history of a relationship Bond.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    physics_properties: Annotated[
        PhysicsProperties3,
        Field(
            description='Defines the common physics-related properties for components and laws.',
            title='Base Physics Properties',
        ),
    ]
    fields: Annotated[
        Fields4,
        Field(
            description='A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.',
            title='BondContentFields',
        ),
    ]


PhysicsProperties4 = PhysicsProperties


Fields5 = Fields2


Type3 = Type1


class Fields6(BaseModel):
    """
    Defines the structure for a single, inline field definition within a component.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    description: Annotated[
        str,
        Field(
            description='A canonical, reusable definition for a human-readable description field.',
            title='Description Field',
        ),
    ]
    type: Annotated[
        Type | Type3,
        Field(
            description='The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.',
            title='Base Type System',
        ),
    ]
    default_value: Annotated[
        str | float | int | bool | Mapping[str, Any] | Sequence[Any] | None,
        Field(
            description="Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.",
            title='Any Value',
        ),
    ] = None
    constraints: Annotated[
        Constraints | None,
        Field(
            description='A canonical definition for field validation constraints.',
            title='Constraint Definition',
        ),
    ]
    ui_label: str | None


class Permissions(BaseModel):
    """
    Defines the access control and privacy rules for a Bond and its associated Moments.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    physics_properties: Annotated[
        PhysicsProperties4,
        Field(
            description='Defines the common physics-related properties for components and laws.',
            title='Base Physics Properties',
        ),
    ]
    fields: Annotated[
        Mapping[str, Fields5 | Fields6],
        Field(
            description='A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.',
            title='BaseFields',
        ),
    ]


PhysicsProperties5 = PhysicsProperties


Fields7 = Fields2


Type5 = Type1


class Fields8(BaseModel):
    """
    Defines the structure for a single, inline field definition within a component.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    description: Annotated[
        str,
        Field(
            description='A canonical, reusable definition for a human-readable description field.',
            title='Description Field',
        ),
    ]
    type: Annotated[
        Type | Type5,
        Field(
            description='The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.',
            title='Base Type System',
        ),
    ]
    default_value: Annotated[
        str | float | int | bool | Mapping[str, Any] | Sequence[Any] | None,
        Field(
            description="Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.",
            title='Any Value',
        ),
    ] = None
    constraints: Annotated[
        Constraints | None,
        Field(
            description='A canonical definition for field validation constraints.',
            title='Constraint Definition',
        ),
    ]
    ui_label: str | None


class PhysicsConfig(BaseModel):
    """
    Configuration that defines the physics model for a Bond (Dynamic or Static).
    """

    model_config = ConfigDict(
        frozen=True,
    )
    physics_properties: Annotated[
        PhysicsProperties5,
        Field(
            description='Defines the common physics-related properties for components and laws.',
            title='Base Physics Properties',
        ),
    ]
    fields: Annotated[
        Mapping[str, Fields7 | Fields8],
        Field(
            description='A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.',
            title='BaseFields',
        ),
    ]


class Components1(BaseModel):
    """
    Component references temporarily disabled for pipeline testing
    """

    model_config = ConfigDict(
        frozen=True,
    )
    field_comment: Annotated[
        str | None,
        Field(
            alias='_comment',
            description='TODO: Re-enable component references when component schemas are available',
        ),
    ]
    content: Annotated[
        Content1,
        Field(
            description='Defines the descriptive content and history of a relationship Bond.',
            title='Bond Content Component',
        ),
    ]
    permissions: Annotated[
        Permissions,
        Field(
            description='Defines the access control and privacy rules for a Bond and its associated Moments.',
            title='Bond Permissions Component',
        ),
    ]
    physics_config: Annotated[
        PhysicsConfig,
        Field(
            description='Configuration that defines the physics model for a Bond (Dynamic or Static).',
            title='Bond Physics Config Component',
        ),
    ]


class Fields9(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        frozen=True,
    )
    energy: Annotated[
        float, Field(description='The current energy level of an entity.')
    ]
    momentum: Annotated[
        Sequence[float],
        Field(
            description='A reusable data type for a vector of six f64 numbers, used for momentum and forces in the 6 spatial dimensions of the manifold.',
            max_length=6,
            min_length=6,
            title='6D Physics Vector',
        ),
    ]
    cognitive_perspective: Annotated[
        Any,
        Field(
            description="The intrinsic 'spin' or 'flavor' of the entity, which generates cognitive dissonance (torsion).",
            title='Cognitive Perspective Field',
        ),
    ]
    decay_rate: Annotated[
        DecayRate,
        Field(
            description='The base rate of energy or coherence decay for an entity, before multipliers are applied.'
        ),
    ]
    consolidation_rate: Annotated[
        ConsolidationRate,
        Field(
            description='The base rate of memory consolidation for an entity, before multipliers are applied. Represents how quickly an unstable memory becomes stable.',
            title='Consolidation Rate Field',
        ),
    ]
    quantum_coherence: Annotated[
        float | None,
        Field(
            description='The quantum coherence level of the entity, representing its degree of superposition. Null for classical entities.',
            ge=0.0,
            le=1.0,
        ),
    ] = None
    entanglement_strength: Annotated[
        float | None,
        Field(
            description='The overall entanglement strength of this entity with others. Null for classical entities.',
            ge=0.0,
            le=1.0,
        ),
    ] = None


class Universal1(BaseModel):
    """
    The transient, mutable physics state of an entity.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    fields: Annotated[Fields9 | None, Field(title='UniversalPhysicsStateFields')]


PhysicsProperties6 = PhysicsProperties


Fields10 = Fields2


Type7 = Type1


class Fields11(BaseModel):
    """
    Defines the structure for a single, inline field definition within a component.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    description: Annotated[
        str,
        Field(
            description='A canonical, reusable definition for a human-readable description field.',
            title='Description Field',
        ),
    ]
    type: Annotated[
        Type | Type7,
        Field(
            description='The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.',
            title='Base Type System',
        ),
    ]
    default_value: Annotated[
        str | float | int | bool | Mapping[str, Any] | Sequence[Any] | None,
        Field(
            description="Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.",
            title='Any Value',
        ),
    ] = None
    constraints: Annotated[
        Constraints | None,
        Field(
            description='A canonical definition for field validation constraints.',
            title='Constraint Definition',
        ),
    ]
    ui_label: str | None


class Tension(BaseModel):
    """
    Models the classical physics of a relationship Bond, including its strength, tension, and resonance properties. This is managed by the Particular engine.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    physics_properties: Annotated[
        PhysicsProperties6,
        Field(
            description='Defines the common physics-related properties for components and laws.',
            title='Base Physics Properties',
        ),
    ]
    fields: Annotated[
        Mapping[str, Fields10 | Fields11],
        Field(
            description='A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.',
            title='BaseFields',
        ),
    ]


class PhysicsState1(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    universal: Annotated[
        Universal1,
        Field(
            description='The transient, mutable physics state of an entity.',
            title='Universal Physics State Component',
        ),
    ]
    tension: Annotated[
        Tension,
        Field(
            description='Models the classical physics of a relationship Bond, including its strength, tension, and resonance properties. This is managed by the Particular engine.',
            title='Bond Tension Component',
        ),
    ]


class Data1(BaseModel):
    """
    A classical entity representing a persistent relationship between two Thread entities.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    components: Annotated[
        Components1,
        Field(
            description='Component references temporarily disabled for pipeline testing',
            title='BondComponents',
        ),
    ]
    entity_type: Annotated[
        EntityType,
        Field(
            description='A canonical enum of all 7 cognitive entity types.',
            title='Entity Type',
        ),
    ]
    thread_a_id: Annotated[
        str,
        Field(
            description='A reusable definition for a unique entity identifier.',
            title='Entity ID Field',
        ),
    ]
    thread_b_id: Annotated[
        str,
        Field(
            description='A reusable definition for a unique entity identifier.',
            title='Entity ID Field',
        ),
    ]
    physics_state: Annotated[PhysicsState1, Field(title='BondPhysicsState')]


PhysicsProperties7 = PhysicsProperties


Fields12 = Fields2


Type9 = Type1


class Fields13(BaseModel):
    """
    Defines the structure for a single, inline field definition within a component.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    description: Annotated[
        str,
        Field(
            description='A canonical, reusable definition for a human-readable description field.',
            title='Description Field',
        ),
    ]
    type: Annotated[
        Type | Type9,
        Field(
            description='The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.',
            title='Base Type System',
        ),
    ]
    default_value: Annotated[
        str | float | int | bool | Mapping[str, Any] | Sequence[Any] | None,
        Field(
            description="Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.",
            title='Any Value',
        ),
    ] = None
    constraints: Annotated[
        Constraints | None,
        Field(
            description='A canonical definition for field validation constraints.',
            title='Constraint Definition',
        ),
    ]
    ui_label: str | None


class Identity(BaseModel):
    """
    Defines the core, immutable content of a Thread entity, such as its name and type.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    physics_properties: Annotated[
        PhysicsProperties7,
        Field(
            description='Defines the common physics-related properties for components and laws.',
            title='Base Physics Properties',
        ),
    ]
    fields: Annotated[
        Mapping[str, Fields12 | Fields13],
        Field(
            description='A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.',
            title='BaseFields',
        ),
    ]


PhysicsProperties8 = PhysicsProperties


Fields14 = Fields2


Type11 = Type1


class Fields15(BaseModel):
    """
    Defines the structure for a single, inline field definition within a component.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    description: Annotated[
        str,
        Field(
            description='A canonical, reusable definition for a human-readable description field.',
            title='Description Field',
        ),
    ]
    type: Annotated[
        Type | Type11,
        Field(
            description='The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.',
            title='Base Type System',
        ),
    ]
    default_value: Annotated[
        str | float | int | bool | Mapping[str, Any] | Sequence[Any] | None,
        Field(
            description="Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.",
            title='Any Value',
        ),
    ] = None
    constraints: Annotated[
        Constraints | None,
        Field(
            description='A canonical definition for field validation constraints.',
            title='Constraint Definition',
        ),
    ]
    ui_label: str | None


class CognitiveBaseline(BaseModel):
    """
    Defines the innate 'personality' or temperament of a Thread.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    physics_properties: Annotated[
        PhysicsProperties8,
        Field(
            description='Defines the common physics-related properties for components and laws.',
            title='Base Physics Properties',
        ),
    ]
    fields: Annotated[
        Mapping[str, Fields14 | Fields15],
        Field(
            description='A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.',
            title='BaseFields',
        ),
    ]


class Components2(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    cognitive_baseline: Annotated[
        CognitiveBaseline,
        Field(
            description="Defines the innate 'personality' or temperament of a Thread.",
            title='Cognitive Baseline Component',
        ),
    ]


Fields16 = Fields9


class Universal2(BaseModel):
    """
    The transient, mutable physics state of an entity.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    fields: Annotated[Fields16 | None, Field(title='UniversalPhysicsStateFields')]


class PhysicsState2(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    universal: Annotated[
        Universal2,
        Field(
            description='The transient, mutable physics state of an entity.',
            title='Universal Physics State Component',
        ),
    ]


class Data2(BaseModel):
    """
    A Thread representing a person, which MUST have a CognitiveBaseline.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    entity_id: Annotated[
        str,
        Field(
            description='A reusable definition for a unique entity identifier.',
            title='Entity ID Field',
        ),
    ]
    tenant_id: Annotated[
        str,
        Field(
            description='A canonical definition for a Universally Unique Identifier (UUID).',
            title='UUID',
        ),
    ]
    created_at: Annotated[
        str,
        Field(
            description='A canonical definition for an ISO 8601 timestamp with timezone.',
            title='Timestamp',
        ),
    ]
    identity: Annotated[
        Identity,
        Field(
            description='Defines the core, immutable content of a Thread entity, such as its name and type.',
            title='Thread Content Component',
        ),
    ]
    components: Annotated[Components2, Field(title='PersonThreadComponents')]
    physics_state: Annotated[PhysicsState2, Field(title='PersonThreadPhysicsState')]


Fields17 = Fields9


class Universal3(BaseModel):
    """
    The transient, mutable physics state of an entity.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    fields: Annotated[Fields17 | None, Field(title='UniversalPhysicsStateFields')]


class PhysicsState3(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    universal: Annotated[
        Universal3,
        Field(
            description='The transient, mutable physics state of an entity.',
            title='Universal Physics State Component',
        ),
    ]


class Data3(BaseModel):
    """
    A Thread representing a Place, Concept, or GenericObject, which MUST NOT have a CognitiveBaseline.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    entity_id: Annotated[
        str,
        Field(
            description='A reusable definition for a unique entity identifier.',
            title='Entity ID Field',
        ),
    ]
    tenant_id: Annotated[
        str,
        Field(
            description='A canonical definition for a Universally Unique Identifier (UUID).',
            title='UUID',
        ),
    ]
    created_at: Annotated[
        str,
        Field(
            description='A canonical definition for an ISO 8601 timestamp with timezone.',
            title='Timestamp',
        ),
    ]
    identity: Annotated[
        Any,
        Field(
            description='Defines the core, immutable content of a Thread entity, such as its name and type.',
            title='Thread Content Component',
        ),
    ]
    physics_state: Annotated[PhysicsState3, Field(title='GenericThreadPhysicsState')]


PhysicsProperties9 = PhysicsProperties


class MotifType(str, Enum):
    """
    A canonical enum of the types of recurring themes or motifs in memory.
    """

    Behavioral = 'Behavioral'
    Emotional = 'Emotional'
    Situational = 'Situational'
    Temporal = 'Temporal'


class Fields18(BaseModel):
    """
    A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.
    """

    model_config = ConfigDict(
        extra='forbid',
        frozen=True,
    )
    motif_description: Annotated[
        str,
        Field(
            description='A canonical, reusable definition for a human-readable description field.',
            title='Description Field',
        ),
    ]
    motif_type: Annotated[
        MotifType,
        Field(
            description='A canonical enum of the types of recurring themes or motifs in memory.',
            title='Motif Type',
        ),
    ]
    source_entanglements: Annotated[
        Sequence[str],
        Field(
            description='A canonical definition for a list of unique entity identifiers (UUIDs).',
            title='Entity ID List',
        ),
    ]


class Content2(BaseModel):
    """
    Defines the emergent pattern content of a Motif entity. This is a quantum component.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    physics_properties: Annotated[
        PhysicsProperties9,
        Field(
            description='Defines the common physics-related properties for components and laws.',
            title='Base Physics Properties',
        ),
    ]
    fields: Annotated[
        Fields18,
        Field(
            description='A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.',
            title='MotifContentFields',
        ),
    ]


PhysicsProperties10 = PhysicsProperties


class ConsolidationLevel(str, Enum):
    """
    A canonical enum for the temporal consolidation level of a Motif or Filament.
    """

    Daily = 'Daily'
    Weekly = 'Weekly'
    Monthly = 'Monthly'
    Yearly = 'Yearly'
    Archived = 'Archived'


class Fields19(BaseModel):
    """
    A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.
    """

    model_config = ConfigDict(
        extra='forbid',
        frozen=True,
    )
    consolidation_level: Annotated[
        ConsolidationLevel,
        Field(
            description='A canonical enum for the temporal consolidation level of a Motif or Filament.',
            title='Consolidation Level',
        ),
    ]
    last_consolidated_at: Annotated[
        str | None,
        Field(
            description='A canonical definition for an optional ISO 8601 timestamp with timezone.',
            title='Nullable Timestamp',
        ),
    ] = None
    next_consolidation_due: Annotated[
        str | None,
        Field(
            description='A canonical definition for an optional ISO 8601 timestamp with timezone.',
            title='Nullable Timestamp',
        ),
    ] = None
    source_entity_count: Annotated[int, Field(ge=1)]


class Consolidation(BaseModel):
    """
    Tracks the temporal consolidation state of a Motif or Filament.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    physics_properties: Annotated[
        PhysicsProperties10,
        Field(
            description='Defines the common physics-related properties for components and laws.',
            title='Base Physics Properties',
        ),
    ]
    fields: Annotated[
        Fields19,
        Field(
            description='A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.',
            title='ConsolidationStateFields',
        ),
    ]


PhysicsProperties11 = PhysicsProperties


Fields20 = Fields2


Type13 = Type1


class Fields21(BaseModel):
    """
    Defines the structure for a single, inline field definition within a component.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    description: Annotated[
        str,
        Field(
            description='A canonical, reusable definition for a human-readable description field.',
            title='Description Field',
        ),
    ]
    type: Annotated[
        Type | Type13,
        Field(
            description='The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.',
            title='Base Type System',
        ),
    ]
    default_value: Annotated[
        str | float | int | bool | Mapping[str, Any] | Sequence[Any] | None,
        Field(
            description="Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.",
            title='Any Value',
        ),
    ] = None
    constraints: Annotated[
        Constraints | None,
        Field(
            description='A canonical definition for field validation constraints.',
            title='Constraint Definition',
        ),
    ]
    ui_label: str | None


class Gdpr(BaseModel):
    """
    Tracks data provenance to enable compliant cascading deletions for GDPR's Right to Erasure.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    physics_properties: Annotated[
        PhysicsProperties11,
        Field(
            description='Defines the common physics-related properties for components and laws.',
            title='Base Physics Properties',
        ),
    ]
    fields: Annotated[
        Mapping[str, Fields20 | Fields21],
        Field(
            description='A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.',
            title='BaseFields',
        ),
    ]


class Components3(BaseModel):
    """
    Component references temporarily disabled for pipeline testing
    """

    model_config = ConfigDict(
        frozen=True,
    )
    field_comment: Annotated[
        str | None,
        Field(
            alias='_comment',
            description='TODO: Re-enable component references when component schemas are available',
        ),
    ]
    content: Annotated[
        Content2,
        Field(
            description='Defines the emergent pattern content of a Motif entity. This is a quantum component.',
            title='Motif Content Component',
        ),
    ]
    consolidation: Annotated[
        Consolidation,
        Field(
            description='Tracks the temporal consolidation state of a Motif or Filament.',
            title='Consolidation State Component',
        ),
    ]
    gdpr: Annotated[
        Gdpr,
        Field(
            description="Tracks data provenance to enable compliant cascading deletions for GDPR's Right to Erasure.",
            title='GDPR Dependency Component',
        ),
    ]


Fields22 = Fields9


class Universal4(BaseModel):
    """
    The transient, mutable physics state of an entity.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    fields: Annotated[Fields22 | None, Field(title='UniversalPhysicsStateFields')]


PhysicsProperties12 = PhysicsProperties


Fields23 = Fields2


Type15 = Type1


class Fields24(BaseModel):
    """
    Defines the structure for a single, inline field definition within a component.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    description: Annotated[
        str,
        Field(
            description='A canonical, reusable definition for a human-readable description field.',
            title='Description Field',
        ),
    ]
    type: Annotated[
        Type | Type15,
        Field(
            description='The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.',
            title='Base Type System',
        ),
    ]
    default_value: Annotated[
        str | float | int | bool | Mapping[str, Any] | Sequence[Any] | None,
        Field(
            description="Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.",
            title='Any Value',
        ),
    ] = None
    constraints: Annotated[
        Constraints | None,
        Field(
            description='A canonical definition for field validation constraints.',
            title='Constraint Definition',
        ),
    ]
    ui_label: str | None


class Quantum(BaseModel):
    """
    Manages the quantum properties of an entity, including its superposition and entanglement.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    physics_properties: Annotated[
        PhysicsProperties12,
        Field(
            description='Defines the common physics-related properties for components and laws.',
            title='Base Physics Properties',
        ),
    ]
    fields: Annotated[
        Mapping[str, Fields23 | Fields24],
        Field(
            description='A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.',
            title='BaseFields',
        ),
    ]


class PhysicsState4(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    universal: Annotated[
        Universal4,
        Field(
            description='The transient, mutable physics state of an entity.',
            title='Universal Physics State Component',
        ),
    ]
    quantum: Annotated[
        Quantum,
        Field(
            description='Manages the quantum properties of an entity, including its superposition and entanglement.',
            title='Quantum State Component',
        ),
    ]


class Data4(BaseModel):
    """
    A quantum entity representing a recurring pattern of subjective experiences, derived from the consolidation of EntanglementState entities.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    components: Annotated[
        Components3,
        Field(
            description='Component references temporarily disabled for pipeline testing',
            title='MotifComponents',
        ),
    ]
    entity_type: Annotated[
        EntityType,
        Field(
            description='A canonical enum of all 7 cognitive entity types.',
            title='Entity Type',
        ),
    ]
    physics_state: Annotated[PhysicsState4, Field(title='MotifPhysicsState')]


PhysicsProperties13 = PhysicsProperties


class FilamentType(str, Enum):
    """
    A canonical enum of the types of high-level narratives a Filament can represent.
    """

    PersonalityTrait = 'PersonalityTrait'
    Worldview = 'Worldview'
    Relationship_Pattern = 'Relationship_Pattern'
    Life_Theme = 'Life_Theme'


class AbstractionLevel(str, Enum):
    """
    A canonical enum for the level of abstraction of a cognitive entity.
    """

    Low = 'Low'
    Medium = 'Medium'
    High = 'High'


class Fields25(BaseModel):
    """
    A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.
    """

    model_config = ConfigDict(
        extra='forbid',
        frozen=True,
    )
    narrative_description: Annotated[
        str,
        Field(
            description='A canonical, reusable definition for a human-readable description field.',
            title='Description Field',
        ),
    ]
    filament_type: Annotated[
        FilamentType,
        Field(
            description='A canonical enum of the types of high-level narratives a Filament can represent.',
            title='Filament Type',
        ),
    ]
    abstraction_level: Annotated[
        AbstractionLevel,
        Field(
            description='A canonical enum for the level of abstraction of a cognitive entity.',
            title='Abstraction Level',
        ),
    ]
    source_threads_and_bonds: Annotated[
        Sequence[str],
        Field(
            description='A list of Thread and Bond entity IDs that are the source for a derived cognitive entity like a Filament.',
            title='Source Threads and Bonds Field',
        ),
    ]


class Content3(BaseModel):
    """
    Defines the high-level narrative or belief content of a Filament entity. This is a quantum component.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    physics_properties: Annotated[
        PhysicsProperties13,
        Field(
            description='Defines the common physics-related properties for components and laws.',
            title='Base Physics Properties',
        ),
    ]
    fields: Annotated[
        Fields25,
        Field(
            description='A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.',
            title='FilamentContentFields',
        ),
    ]


class Fields26(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        frozen=True,
    )
    consolidation_level: Annotated[
        ConsolidationLevel,
        Field(
            description='A canonical enum for the temporal consolidation level of a Motif or Filament.',
            title='Consolidation Level',
        ),
    ]
    last_consolidated_at: Annotated[
        str | None,
        Field(
            description='A canonical definition for an optional ISO 8601 timestamp with timezone.',
            title='Nullable Timestamp',
        ),
    ] = None
    next_consolidation_due: Annotated[
        str | None,
        Field(
            description='A canonical definition for an optional ISO 8601 timestamp with timezone.',
            title='Nullable Timestamp',
        ),
    ] = None
    source_entity_count: Annotated[int, Field(ge=1)]


class Consolidation1(BaseModel):
    """
    Tracks the temporal consolidation state of a Motif or Filament.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    fields: Annotated[Fields26 | None, Field(title='ConsolidationStateFields')]


class Components4(BaseModel):
    """
    Component references temporarily disabled for pipeline testing
    """

    model_config = ConfigDict(
        frozen=True,
    )
    field_comment: Annotated[
        str | None,
        Field(
            alias='_comment',
            description='TODO: Re-enable component references when component schemas are available',
        ),
    ]
    content: Annotated[
        Content3,
        Field(
            description='Defines the high-level narrative or belief content of a Filament entity. This is a quantum component.',
            title='Filament Content Component',
        ),
    ]
    consolidation: Annotated[
        Consolidation1,
        Field(
            description='Tracks the temporal consolidation state of a Motif or Filament.',
            title='Consolidation State Component',
        ),
    ]
    gdpr: Annotated[
        Any,
        Field(
            description="Tracks data provenance to enable compliant cascading deletions for GDPR's Right to Erasure.",
            title='GDPR Dependency Component',
        ),
    ]


Fields27 = Fields9


class Universal5(BaseModel):
    """
    The transient, mutable physics state of an entity.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    fields: Annotated[Fields27 | None, Field(title='UniversalPhysicsStateFields')]


class PhysicsState5(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    universal: Annotated[
        Universal5,
        Field(
            description='The transient, mutable physics state of an entity.',
            title='Universal Physics State Component',
        ),
    ]
    quantum: Annotated[
        Any,
        Field(
            description='Manages the quantum properties of an entity, including its superposition and entanglement.',
            title='Quantum State Component',
        ),
    ]


class Data5(BaseModel):
    """
    A quantum entity representing a high-level, emergent narrative, belief, or worldview, derived from the analysis of Threads and Bonds.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    components: Annotated[
        Components4,
        Field(
            description='Component references temporarily disabled for pipeline testing',
            title='FilamentComponents',
        ),
    ]
    entity_type: Annotated[
        EntityType,
        Field(
            description='A canonical enum of all 7 cognitive entity types.',
            title='Entity Type',
        ),
    ]
    physics_state: Annotated[PhysicsState5, Field(title='FilamentPhysicsState')]


PhysicsProperties14 = PhysicsProperties


Fields28 = Fields2


Type17 = Type1


class Fields29(BaseModel):
    """
    Defines the structure for a single, inline field definition within a component.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    description: Annotated[
        str,
        Field(
            description='A canonical, reusable definition for a human-readable description field.',
            title='Description Field',
        ),
    ]
    type: Annotated[
        Type | Type17,
        Field(
            description='The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.',
            title='Base Type System',
        ),
    ]
    default_value: Annotated[
        str | float | int | bool | Mapping[str, Any] | Sequence[Any] | None,
        Field(
            description="Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.",
            title='Any Value',
        ),
    ] = None
    constraints: Annotated[
        Constraints | None,
        Field(
            description='A canonical definition for field validation constraints.',
            title='Constraint Definition',
        ),
    ]
    ui_label: str | None


class Content4(BaseModel):
    """
    Defines the content of a specific task or intention.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    physics_properties: Annotated[
        PhysicsProperties14,
        Field(
            description='Defines the common physics-related properties for components and laws.',
            title='Base Physics Properties',
        ),
    ]
    fields: Annotated[
        Mapping[str, Fields28 | Fields29],
        Field(
            description='A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.',
            title='BaseFields',
        ),
    ]


PhysicsProperties15 = PhysicsProperties


Fields30 = Fields2


Type19 = Type1


class Fields31(BaseModel):
    """
    Defines the structure for a single, inline field definition within a component.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    description: Annotated[
        str,
        Field(
            description='A canonical, reusable definition for a human-readable description field.',
            title='Description Field',
        ),
    ]
    type: Annotated[
        Type | Type19,
        Field(
            description='The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.',
            title='Base Type System',
        ),
    ]
    default_value: Annotated[
        str | float | int | bool | Mapping[str, Any] | Sequence[Any] | None,
        Field(
            description="Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.",
            title='Any Value',
        ),
    ] = None
    constraints: Annotated[
        Constraints | None,
        Field(
            description='A canonical definition for field validation constraints.',
            title='Constraint Definition',
        ),
    ]
    ui_label: str | None


class Status(BaseModel):
    """
    Tracks the completion status of an Intent.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    physics_properties: Annotated[
        PhysicsProperties15,
        Field(
            description='Defines the common physics-related properties for components and laws.',
            title='Base Physics Properties',
        ),
    ]
    fields: Annotated[
        Mapping[str, Fields30 | Fields31],
        Field(
            description='A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.',
            title='BaseFields',
        ),
    ]


class Components5(BaseModel):
    """
    Component references temporarily disabled for pipeline testing
    """

    model_config = ConfigDict(
        frozen=True,
    )
    field_comment: Annotated[
        str | None,
        Field(
            alias='_comment',
            description='TODO: Re-enable component references when component schemas are available',
        ),
    ]
    content: Annotated[
        Content4,
        Field(
            description='Defines the content of a specific task or intention.',
            title='Intent Content Component',
        ),
    ]
    status: Annotated[
        Status,
        Field(
            description='Tracks the completion status of an Intent.',
            title='Task Status Component',
        ),
    ]


Fields32 = Fields9


class Universal6(BaseModel):
    """
    The transient, mutable physics state of an entity.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    fields: Annotated[Fields32 | None, Field(title='UniversalPhysicsStateFields')]


class PhysicsState6(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    universal: Annotated[
        Universal6,
        Field(
            description='The transient, mutable physics state of an entity.',
            title='Universal Physics State Component',
        ),
    ]
    manifold_position: Annotated[
        Any,
        Field(
            description="The entity's position in the 7D cognitive manifold, enforcing quantized spatial coordinates (Rule 8).",
            title='Memory Manifold Position Component',
        ),
    ]


class Data6(BaseModel):
    """
    A classical entity representing a specific, user-declared future action or task.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    components: Annotated[
        Components5,
        Field(
            description='Component references temporarily disabled for pipeline testing',
            title='IntentComponents',
        ),
    ]
    entity_type: Annotated[
        EntityType,
        Field(
            description='A canonical enum of all 7 cognitive entity types.',
            title='Entity Type',
        ),
    ]
    physics_state: Annotated[PhysicsState6, Field(title='IntentPhysicsState')]


PhysicsProperties16 = PhysicsProperties


Fields33 = Fields2


Type21 = Type1


class Fields34(BaseModel):
    """
    Defines the structure for a single, inline field definition within a component.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    description: Annotated[
        str,
        Field(
            description='A canonical, reusable definition for a human-readable description field.',
            title='Description Field',
        ),
    ]
    type: Annotated[
        Type | Type21,
        Field(
            description='The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.',
            title='Base Type System',
        ),
    ]
    default_value: Annotated[
        str | float | int | bool | Mapping[str, Any] | Sequence[Any] | None,
        Field(
            description="Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.",
            title='Any Value',
        ),
    ] = None
    constraints: Annotated[
        Constraints | None,
        Field(
            description='A canonical definition for field validation constraints.',
            title='Constraint Definition',
        ),
    ]
    ui_label: str | None


class Content5(BaseModel):
    """
    Defines the content and scope of a thematic goal or focus.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    physics_properties: Annotated[
        PhysicsProperties16,
        Field(
            description='Defines the common physics-related properties for components and laws.',
            title='Base Physics Properties',
        ),
    ]
    fields: Annotated[
        Mapping[str, Fields33 | Fields34],
        Field(
            description='A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.',
            title='BaseFields',
        ),
    ]


class Components6(BaseModel):
    """
    Component references temporarily disabled for pipeline testing
    """

    model_config = ConfigDict(
        frozen=True,
    )
    field_comment: Annotated[
        str | None,
        Field(
            alias='_comment',
            description='TODO: Re-enable component references when component schemas are available',
        ),
    ]
    content: Annotated[
        Content5,
        Field(
            description='Defines the content and scope of a thematic goal or focus.',
            title='Focus Content Component',
        ),
    ]


Fields35 = Fields9


class Universal7(BaseModel):
    """
    The transient, mutable physics state of an entity.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    fields: Annotated[Fields35 | None, Field(title='UniversalPhysicsStateFields')]


class PhysicsState7(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    universal: Annotated[
        Universal7,
        Field(
            description='The transient, mutable physics state of an entity.',
            title='Universal Physics State Component',
        ),
    ]
    quantum: Annotated[
        Any,
        Field(
            description='Manages the quantum properties of an entity, including its superposition and entanglement.',
            title='Quantum State Component',
        ),
    ]


class Data7(BaseModel):
    """
    A quantum entity representing a high-level, user-declared thematic goal or life chapter.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    components: Annotated[
        Components6,
        Field(
            description='Component references temporarily disabled for pipeline testing',
            title='FocusComponents',
        ),
    ]
    entity_type: Annotated[
        EntityType,
        Field(
            description='A canonical enum of all 7 cognitive entity types.',
            title='Entity Type',
        ),
    ]
    physics_state: Annotated[PhysicsState7, Field(title='FocusPhysicsState')]


class DraftPayload(BaseModel):
    """
    A fully specified but not-yet-created cognitive entity, ready for the Decima agent to commit to the ECS.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    title: Annotated[
        str,
        Field(
            description="The human-readable, PascalCase name of the object (e.g., 'UniversalPhysicsState')."
        ),
    ]
    description: Annotated[
        str,
        Field(
            description="A clear, complete sentence explaining the object's purpose and function within the system."
        ),
    ]
    schema_version: Annotated[
        str,
        Field(
            description="The semantic version of this schema definition (e.g., '1.0.0')."
        ),
    ]
    user_context: Annotated[UserContext, Field(title='BaseUserContext')]
    data: Annotated[
        Data | Data1 | Data2 | Data3 | Data4 | Data5 | Data6 | Data7,
        Field(description="This payload's data is a valid, complete entity schema."),
    ]
