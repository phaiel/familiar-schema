# generated by datamodel-codegen:
#   filename:  tmp7wydrpu4.json
#   timestamp: 2025-06-21T03:58:24+00:00

from __future__ import annotations

from enum import Enum
from typing import Annotated

from pydantic import BaseModel, ConfigDict, Field


class UserContext(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    user_id: Annotated[
        str,
        Field(
            description='A canonical definition for a Universally Unique Identifier (UUID).',
            title='UUID',
        ),
    ]
    session_id: Annotated[
        str | None,
        Field(
            description='A reusable definition for a unique entity identifier.',
            title='Entity ID Field',
        ),
    ]


class SuggestedEntityType(str, Enum):
    """
    A canonical enum of all 7 cognitive entity types.
    """

    Focus = 'Focus'
    Filament = 'Filament'
    Motif = 'Motif'
    Intent = 'Intent'
    Moment = 'Moment'
    Bond = 'Bond'
    Thread = 'Thread'


class Data(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    parent_weave_id: Annotated[
        str,
        Field(
            description='A reusable definition for a unique entity identifier.',
            title='Entity ID Field',
        ),
    ]
    text: str
    suggested_entity_type: Annotated[
        SuggestedEntityType | None,
        Field(
            description='A canonical enum of all 7 cognitive entity types.',
            title='Entity Type',
        ),
    ]


class WeaveUnitPayload(BaseModel):
    """
    A single, logical strand of information deconstructed from a Weave, enhanced with an entity type hint.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    user_context: Annotated[UserContext, Field(title='BaseUserContext')]
    data: Annotated[Data, Field(title='WeaveUnitData')]
