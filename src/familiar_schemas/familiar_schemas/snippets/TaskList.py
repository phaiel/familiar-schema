# generated by datamodel-codegen:
#   filename:  tmplufk5xx9.json
#   timestamp: 2025-06-21T04:00:06+00:00

from __future__ import annotations

from enum import Enum
from typing import Annotated, Any, Mapping, Sequence

from pydantic import BaseModel, ConfigDict, Field, RootModel


class Type(str, Enum):
    script = 'script'
    rust_script = 'rust_script'
    python_script = 'python_script'
    suspend = 'suspend'


class TaskList1(BaseModel):
    """
    A canonical definition for a single task within a Windmill workflow (DAG).
    """

    model_config = ConfigDict(
        frozen=True,
    )
    id: str
    type: Type
    path: str | None
    args: Annotated[
        Mapping[
            str, str | float | int | bool | Mapping[str, Any] | Sequence[Any] | None
        ]
        | None,
        Field(
            description='A generic key-value map where keys are strings and values can be any JSON type. Used for flexible data structures like parameters or metadata.',
            title='String Value Map',
        ),
    ]
    depends_on: Sequence[str] | None
    condition: str | None


class TaskList(RootModel[Sequence[TaskList1]]):
    """
    A list of task definitions for a Windmill workflow.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    root: Annotated[
        Sequence[TaskList1],
        Field(
            description='A list of task definitions for a Windmill workflow.',
            title='Task List',
        ),
    ]
