# generated by datamodel-codegen:
#   filename:  tmp8g9cr9rc.json
#   timestamp: 2025-06-21T04:00:37+00:00

from __future__ import annotations

from enum import Enum
from typing import Annotated, Any, Sequence

from pydantic import BaseModel, ConfigDict, Field


class MotifType(str, Enum):
    """
    A canonical enum of the types of recurring themes or motifs in memory.
    """

    Behavioral = 'Behavioral'
    Emotional = 'Emotional'
    Situational = 'Situational'
    Temporal = 'Temporal'


class Fields(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        frozen=True,
    )
    motif_description: Annotated[
        str,
        Field(
            description='A canonical, reusable definition for a human-readable description field.',
            title='Description Field',
        ),
    ]
    motif_type: Annotated[
        MotifType,
        Field(
            description='A canonical enum of the types of recurring themes or motifs in memory.',
            title='Motif Type',
        ),
    ]
    source_entanglements: Annotated[
        Sequence[str],
        Field(
            description='A canonical definition for a list of unique entity identifiers (UUIDs).',
            title='Entity ID List',
        ),
    ]


class Content(BaseModel):
    """
    Defines the emergent pattern content of a Motif entity. This is a quantum component.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    fields: Annotated[Fields | None, Field(title='MotifContentFields')]


class ConsolidationLevel(str, Enum):
    """
    A canonical enum for the temporal consolidation level of a Motif or Filament.
    """

    Daily = 'Daily'
    Weekly = 'Weekly'
    Monthly = 'Monthly'
    Yearly = 'Yearly'
    Archived = 'Archived'


class Fields1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        frozen=True,
    )
    consolidation_level: Annotated[
        ConsolidationLevel,
        Field(
            description='A canonical enum for the temporal consolidation level of a Motif or Filament.',
            title='Consolidation Level',
        ),
    ]
    last_consolidated_at: Annotated[
        str | None,
        Field(
            description='A canonical definition for an optional ISO 8601 timestamp with timezone.',
            title='Nullable Timestamp',
        ),
    ] = None
    next_consolidation_due: Annotated[
        str | None,
        Field(
            description='A canonical definition for an optional ISO 8601 timestamp with timezone.',
            title='Nullable Timestamp',
        ),
    ] = None
    source_entity_count: Annotated[int, Field(ge=1)]


class Consolidation(BaseModel):
    """
    Tracks the temporal consolidation state of a Motif or Filament.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    fields: Annotated[Fields1 | None, Field(title='ConsolidationStateFields')]


class Components(BaseModel):
    """
    Component references temporarily disabled for pipeline testing
    """

    model_config = ConfigDict(
        frozen=True,
    )
    field_comment: Annotated[
        str | None,
        Field(
            alias='_comment',
            description='TODO: Re-enable component references when component schemas are available',
        ),
    ]
    content: Annotated[
        Content,
        Field(
            description='Defines the emergent pattern content of a Motif entity. This is a quantum component.',
            title='Motif Content Component',
        ),
    ]
    consolidation: Annotated[
        Consolidation,
        Field(
            description='Tracks the temporal consolidation state of a Motif or Filament.',
            title='Consolidation State Component',
        ),
    ]
    gdpr: Annotated[
        Any,
        Field(
            description="Tracks data provenance to enable compliant cascading deletions for GDPR's Right to Erasure.",
            title='GDPR Dependency Component',
        ),
    ]


class EntityType(str, Enum):
    """
    A canonical enum of all 7 cognitive entity types.
    """

    Focus = 'Focus'
    Filament = 'Filament'
    Motif = 'Motif'
    Intent = 'Intent'
    Moment = 'Moment'
    Bond = 'Bond'
    Thread = 'Thread'


class DecayRate(BaseModel):
    """
    The base rate of energy or coherence decay for an entity, before multipliers are applied.
    """

    model_config = ConfigDict(
        extra='forbid',
        frozen=True,
    )
    value: float


class ConsolidationRate(BaseModel):
    """
    The base rate of memory consolidation for an entity, before multipliers are applied. Represents how quickly an unstable memory becomes stable.
    """

    model_config = ConfigDict(
        extra='forbid',
        frozen=True,
    )
    value: Annotated[float, Field(ge=0.0, le=1.0)]


class Fields2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        frozen=True,
    )
    energy: Annotated[
        float, Field(description='The current energy level of an entity.')
    ]
    momentum: Annotated[
        Sequence[float],
        Field(
            description='A reusable data type for a vector of six f64 numbers, used for momentum and forces in the 6 spatial dimensions of the manifold.',
            max_length=6,
            min_length=6,
            title='6D Physics Vector',
        ),
    ]
    cognitive_perspective: Annotated[
        Any,
        Field(
            description="The intrinsic 'spin' or 'flavor' of the entity, which generates cognitive dissonance (torsion).",
            title='Cognitive Perspective Field',
        ),
    ]
    decay_rate: Annotated[
        DecayRate,
        Field(
            description='The base rate of energy or coherence decay for an entity, before multipliers are applied.'
        ),
    ]
    consolidation_rate: Annotated[
        ConsolidationRate,
        Field(
            description='The base rate of memory consolidation for an entity, before multipliers are applied. Represents how quickly an unstable memory becomes stable.',
            title='Consolidation Rate Field',
        ),
    ]
    quantum_coherence: Annotated[
        float | None,
        Field(
            description='The quantum coherence level of the entity, representing its degree of superposition. Null for classical entities.',
            ge=0.0,
            le=1.0,
        ),
    ] = None
    entanglement_strength: Annotated[
        float | None,
        Field(
            description='The overall entanglement strength of this entity with others. Null for classical entities.',
            ge=0.0,
            le=1.0,
        ),
    ] = None


class Universal(BaseModel):
    """
    The transient, mutable physics state of an entity.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    fields: Annotated[Fields2 | None, Field(title='UniversalPhysicsStateFields')]


class PhysicsState(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    universal: Annotated[
        Universal,
        Field(
            description='The transient, mutable physics state of an entity.',
            title='Universal Physics State Component',
        ),
    ]
    quantum: Annotated[
        Any,
        Field(
            description='Manages the quantum properties of an entity, including its superposition and entanglement.',
            title='Quantum State Component',
        ),
    ]


class Motif(BaseModel):
    """
    A quantum entity representing a recurring pattern of subjective experiences, derived from the consolidation of EntanglementState entities.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    components: Annotated[
        Components,
        Field(
            description='Component references temporarily disabled for pipeline testing',
            title='MotifComponents',
        ),
    ]
    entity_type: Annotated[
        EntityType,
        Field(
            description='A canonical enum of all 7 cognitive entity types.',
            title='Entity Type',
        ),
    ]
    physics_state: Annotated[PhysicsState, Field(title='MotifPhysicsState')]
