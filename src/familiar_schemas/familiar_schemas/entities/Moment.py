# generated by datamodel-codegen:
#   filename:  tmpb86n0w2_.json
#   timestamp: 2025-06-21T04:00:36+00:00

from __future__ import annotations

from enum import Enum
from typing import Annotated, Any, Mapping, Sequence

from pydantic import BaseModel, ConfigDict, Field


class MomentType(str, Enum):
    """
    A canonical enum for the classification of a Moment entity's content.
    """

    Event = 'Event'
    Experience = 'Experience'
    Observation = 'Observation'
    Interaction = 'Interaction'


class Fields(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        frozen=True,
    )
    description: Annotated[
        str,
        Field(
            description='A canonical, reusable definition for a human-readable description field.',
            title='Description Field',
        ),
    ]
    moment_type: Annotated[
        MomentType,
        Field(
            description="A canonical enum for the classification of a Moment entity's content.",
            title='Moment Type',
        ),
    ]
    participants: Annotated[
        Sequence[str] | None,
        Field(
            description='A canonical definition for a list of unique entity identifiers (UUIDs).',
            title='Entity ID List',
        ),
    ]
    objective_facts: Annotated[
        Mapping[
            str, str | float | int | bool | Mapping[str, Any] | Sequence[Any] | None
        ]
        | None,
        Field(
            description='A generic key-value map where keys are strings and values can be any JSON type. Used for flexible data structures like parameters or metadata.',
            title='String Value Map',
        ),
    ]


class Content(BaseModel):
    """
    Defines the objective, factual content of a Moment entity, representing a specific event in time.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    fields: Annotated[Fields | None, Field(title='MomentContentFields')]


class Components(BaseModel):
    """
    Component references temporarily disabled for pipeline testing
    """

    model_config = ConfigDict(
        frozen=True,
    )
    field_comment: Annotated[
        str | None,
        Field(
            alias='_comment',
            description='TODO: Re-enable component references when component schemas are available',
        ),
    ]
    content: Annotated[
        Content,
        Field(
            description='Defines the objective, factual content of a Moment entity, representing a specific event in time.',
            title='Moment Content Component',
        ),
    ]


class EntityType(str, Enum):
    """
    A canonical enum of all 7 cognitive entity types.
    """

    Focus = 'Focus'
    Filament = 'Filament'
    Motif = 'Motif'
    Intent = 'Intent'
    Moment = 'Moment'
    Bond = 'Bond'
    Thread = 'Thread'


class DecayRate(BaseModel):
    """
    The base rate of energy or coherence decay for an entity, before multipliers are applied.
    """

    model_config = ConfigDict(
        extra='forbid',
        frozen=True,
    )
    value: float


class ConsolidationRate(BaseModel):
    """
    The base rate of memory consolidation for an entity, before multipliers are applied. Represents how quickly an unstable memory becomes stable.
    """

    model_config = ConfigDict(
        extra='forbid',
        frozen=True,
    )
    value: Annotated[float, Field(ge=0.0, le=1.0)]


class Fields1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        frozen=True,
    )
    energy: Annotated[
        float, Field(description='The current energy level of an entity.')
    ]
    momentum: Annotated[
        Sequence[float],
        Field(
            description='A reusable data type for a vector of six f64 numbers, used for momentum and forces in the 6 spatial dimensions of the manifold.',
            max_length=6,
            min_length=6,
            title='6D Physics Vector',
        ),
    ]
    cognitive_perspective: Annotated[
        Any,
        Field(
            description="The intrinsic 'spin' or 'flavor' of the entity, which generates cognitive dissonance (torsion).",
            title='Cognitive Perspective Field',
        ),
    ]
    decay_rate: Annotated[
        DecayRate,
        Field(
            description='The base rate of energy or coherence decay for an entity, before multipliers are applied.'
        ),
    ]
    consolidation_rate: Annotated[
        ConsolidationRate,
        Field(
            description='The base rate of memory consolidation for an entity, before multipliers are applied. Represents how quickly an unstable memory becomes stable.',
            title='Consolidation Rate Field',
        ),
    ]
    quantum_coherence: Annotated[
        float | None,
        Field(
            description='The quantum coherence level of the entity, representing its degree of superposition. Null for classical entities.',
            ge=0.0,
            le=1.0,
        ),
    ] = None
    entanglement_strength: Annotated[
        float | None,
        Field(
            description='The overall entanglement strength of this entity with others. Null for classical entities.',
            ge=0.0,
            le=1.0,
        ),
    ] = None


class Universal(BaseModel):
    """
    The transient, mutable physics state of an entity.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    fields: Annotated[Fields1 | None, Field(title='UniversalPhysicsStateFields')]


class PhysicsState(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    universal: Annotated[
        Universal,
        Field(
            description='The transient, mutable physics state of an entity.',
            title='Universal Physics State Component',
        ),
    ]
    manifold_position: Annotated[
        Any,
        Field(
            description="The entity's position in the 7D cognitive manifold, enforcing quantized spatial coordinates (Rule 8).",
            title='Memory Manifold Position Component',
        ),
    ]


class Moment(BaseModel):
    """
    A classical entity representing a specific, objective event in the past. This is the atomic unit of episodic memory.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    components: Annotated[
        Components,
        Field(
            description='Component references temporarily disabled for pipeline testing',
            title='MomentComponents',
        ),
    ]
    entity_type: Annotated[
        EntityType,
        Field(
            description='A canonical enum of all 7 cognitive entity types.',
            title='Entity Type',
        ),
    ]
    physics_state: Annotated[PhysicsState, Field(title='MomentPhysicsState')]
