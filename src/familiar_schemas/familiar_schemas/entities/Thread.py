# generated by datamodel-codegen:
#   filename:  tmpxodoe4q6.json
#   timestamp: 2025-06-21T04:00:43+00:00

from __future__ import annotations

from typing import Annotated, Any, Sequence

from pydantic import BaseModel, ConfigDict, Field, RootModel


class Components(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    cognitive_baseline: Annotated[
        Any,
        Field(
            description="Defines the innate 'personality' or temperament of a Thread.",
            title='Cognitive Baseline Component',
        ),
    ]


class DecayRate(BaseModel):
    """
    The base rate of energy or coherence decay for an entity, before multipliers are applied.
    """

    model_config = ConfigDict(
        extra='forbid',
        frozen=True,
    )
    value: float


class ConsolidationRate(BaseModel):
    """
    The base rate of memory consolidation for an entity, before multipliers are applied. Represents how quickly an unstable memory becomes stable.
    """

    model_config = ConfigDict(
        extra='forbid',
        frozen=True,
    )
    value: Annotated[float, Field(ge=0.0, le=1.0)]


class Fields(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        frozen=True,
    )
    energy: Annotated[
        float, Field(description='The current energy level of an entity.')
    ]
    momentum: Annotated[
        Sequence[float],
        Field(
            description='A reusable data type for a vector of six f64 numbers, used for momentum and forces in the 6 spatial dimensions of the manifold.',
            max_length=6,
            min_length=6,
            title='6D Physics Vector',
        ),
    ]
    cognitive_perspective: Annotated[
        Any,
        Field(
            description="The intrinsic 'spin' or 'flavor' of the entity, which generates cognitive dissonance (torsion).",
            title='Cognitive Perspective Field',
        ),
    ]
    decay_rate: Annotated[
        DecayRate,
        Field(
            description='The base rate of energy or coherence decay for an entity, before multipliers are applied.'
        ),
    ]
    consolidation_rate: Annotated[
        ConsolidationRate,
        Field(
            description='The base rate of memory consolidation for an entity, before multipliers are applied. Represents how quickly an unstable memory becomes stable.',
            title='Consolidation Rate Field',
        ),
    ]
    quantum_coherence: Annotated[
        float | None,
        Field(
            description='The quantum coherence level of the entity, representing its degree of superposition. Null for classical entities.',
            ge=0.0,
            le=1.0,
        ),
    ] = None
    entanglement_strength: Annotated[
        float | None,
        Field(
            description='The overall entanglement strength of this entity with others. Null for classical entities.',
            ge=0.0,
            le=1.0,
        ),
    ] = None


class Universal(BaseModel):
    """
    The transient, mutable physics state of an entity.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    fields: Annotated[Fields | None, Field(title='UniversalPhysicsStateFields')]


class PhysicsState(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    universal: Annotated[
        Universal,
        Field(
            description='The transient, mutable physics state of an entity.',
            title='Universal Physics State Component',
        ),
    ]


class Thread1(BaseModel):
    """
    A Thread representing a person, which MUST have a CognitiveBaseline.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    identity: Annotated[
        Any,
        Field(
            description='Defines the core, immutable content of a Thread entity, such as its name and type.',
            title='Thread Content Component',
        ),
    ]
    components: Annotated[Components, Field(title='PersonThreadComponents')]
    physics_state: Annotated[PhysicsState, Field(title='PersonThreadPhysicsState')]


Fields1 = Fields


class Universal1(BaseModel):
    """
    The transient, mutable physics state of an entity.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    fields: Annotated[Fields1 | None, Field(title='UniversalPhysicsStateFields')]


class PhysicsState1(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    universal: Annotated[
        Universal1,
        Field(
            description='The transient, mutable physics state of an entity.',
            title='Universal Physics State Component',
        ),
    ]


class Thread2(BaseModel):
    """
    A Thread representing a Place, Concept, or GenericObject, which MUST NOT have a CognitiveBaseline.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    identity: Annotated[
        Any,
        Field(
            description='Defines the core, immutable content of a Thread entity, such as its name and type.',
            title='Thread Content Component',
        ),
    ]
    physics_state: Annotated[PhysicsState1, Field(title='GenericThreadPhysicsState')]


class Thread(RootModel[Thread1 | Thread2]):
    model_config = ConfigDict(
        frozen=True,
    )
    root: Annotated[
        Thread1 | Thread2,
        Field(
            description='A polymorphic Thread entity that can be either a PersonThread or a GenericThread.',
            title='Thread',
        ),
    ]
