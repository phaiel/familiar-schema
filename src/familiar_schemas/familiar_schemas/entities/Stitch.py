# generated by datamodel-codegen:
#   filename:  tmp2emnwzve.json
#   timestamp: 2025-06-21T16:54:47+00:00

from __future__ import annotations

from enum import Enum
from typing import Annotated, Literal, Sequence

from pydantic import BaseModel, ConfigDict, Field


class EntityType(Enum):
    """
    The canonical type of the system entity.
    """

    Stitch = 'Stitch'
    WorkflowTask = 'WorkflowTask'
    Tenant = 'Tenant'


class Status(str, Enum):
    """
    The current status of a task or process.
    """

    Pending = 'Pending'
    InProgress = 'InProgress'
    Completed = 'Completed'
    Cancelled = 'Cancelled'


class WorkflowState(BaseModel):
    """
    Represents the state of a long-running, orchestrated workflow.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    status: Annotated[
        Status,
        Field(
            description='The current status of a task or process.', title='Status Field'
        ),
    ]
    current_step: str
    error_message: str | None = None
    last_updated: Annotated[
        str | None,
        Field(
            description='A canonical definition for an optional ISO 8601 timestamp with timezone.',
            title='Nullable Timestamp',
        ),
    ] = None


class DissonanceType(str, Enum):
    """
    A canonical enum for the types of cognitive dissonance the system can detect.
    """

    TemporalOverlap = 'TemporalOverlap'
    LogicalContradiction = 'LogicalContradiction'
    LowConfidencePattern = 'LowConfidencePattern'
    UnresolvedEntity = 'UnresolvedEntity'


class DissonanceDetails(BaseModel):
    """
    Details about the cognitive conflict.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    dissonance_type: Annotated[
        DissonanceType,
        Field(
            description='A canonical enum for the types of cognitive dissonance the system can detect.',
            title='Dissonance Type',
        ),
    ]
    source_entities: Annotated[
        Sequence[str],
        Field(
            description='A canonical definition for a list of unique entity identifiers (UUIDs).',
            title='Entity ID List',
        ),
    ]
    severity: Annotated[
        float,
        Field(
            description='The calculated severity of the conflict, from 0.0 (minor) to 1.0 (critical).',
            ge=0.0,
            le=1.0,
        ),
    ]


class Option(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    id: str
    label: Annotated[
        str,
        Field(
            description='A canonical definition for a short, human-readable UI label or title.',
            title='Label Field',
        ),
    ]
    description: Annotated[
        str | None,
        Field(
            description='A canonical, reusable definition for a human-readable description field.',
            title='Description Field',
        ),
    ] = ''


class InteractionType(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    type: Literal['MultipleChoice']
    options: Sequence[Option]


class InteractionType1(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    type: Literal['Confirmation']
    confirm_text: Annotated[
        str | None,
        Field(
            description='A canonical definition for a short, human-readable UI label or title.',
            title='Label Field',
        ),
    ]
    deny_text: Annotated[
        str | None,
        Field(
            description='A canonical definition for a short, human-readable UI label or title.',
            title='Label Field',
        ),
    ]


class InteractionType2(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    type: Literal['FreeText']
    placeholder: Annotated[
        str | None,
        Field(
            description='A canonical definition for a short, human-readable UI label or title.',
            title='Label Field',
        ),
    ]
    submit_text: Annotated[
        str | None,
        Field(
            description='A canonical definition for a short, human-readable UI label or title.',
            title='Label Field',
        ),
    ]


class ResolutionRequest(BaseModel):
    """
    The structured request for human input, embedded within a StitchEntity, used when the system requires user collaboration to resolve a cognitive dissonance.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    interaction_id: Annotated[
        str,
        Field(
            description='A canonical definition for a Universally Unique Identifier (UUID).',
            title='UUID',
        ),
    ]
    prompt_title: Annotated[
        str,
        Field(
            description='A canonical definition for a short, human-readable UI label or title.',
            title='Label Field',
        ),
    ]
    prompt_details: Annotated[
        str,
        Field(
            description='A canonical, reusable definition for a human-readable description field.',
            title='Description Field',
        ),
    ]
    interaction_type: InteractionType | InteractionType1 | InteractionType2
    agent_context: Annotated[
        str | None,
        Field(
            description='A canonical, reusable definition for a human-readable description field.',
            title='Description Field',
        ),
    ] = ''


class Components(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    dissonance_details: Annotated[
        DissonanceDetails,
        Field(
            description='Details about the cognitive conflict.',
            title='StitchcomponentsDissonanceDetails',
        ),
    ]
    resolution_request: Annotated[
        ResolutionRequest | None,
        Field(
            description='The structured request for human input, embedded within a StitchEntity, used when the system requires user collaboration to resolve a cognitive dissonance.',
            title='StitchInteractionRequest',
        ),
    ]


class Stitch(BaseModel):
    """
    A system entity that represents a cognitive dissonance or ambiguity that requires resolution, often through a Human-in-the-Loop workflow.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    entity_type: Annotated[
        Literal['Stitch'], Field(description='The canonical type of the system entity.')
    ]
    workflow_state: Annotated[
        WorkflowState | None,
        Field(
            description='Represents the state of a long-running, orchestrated workflow.',
            title='Workflow State',
        ),
    ]
    components: Annotated[Components, Field(title='StitchComponents')]
