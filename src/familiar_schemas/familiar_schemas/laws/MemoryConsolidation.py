# generated by datamodel-codegen:
#   filename:  tmp83jr32bu.json
#   timestamp: 2025-06-21T16:54:51+00:00

from __future__ import annotations

from enum import Enum
from typing import Annotated, Sequence

from pydantic import BaseModel, ConfigDict, Field


class Engine(Enum):
    """
    The physics engine responsible for this object.
    """

    quantum = 'quantum'
    classical = 'classical'
    hybrid = 'hybrid'


class PhysicsProperties(BaseModel):
    """
    Defines the common physics-related properties for components and laws.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    collapse_sensitive: Annotated[
        bool | None,
        Field(
            description='Indicates if the object is affected by or triggers quantum collapse.'
        ),
    ]
    engine: Annotated[
        Engine, Field(description='The physics engine responsible for this object.')
    ]
    is_quantum: Annotated[
        bool, Field(description='Indicates if the object has quantum properties.')
    ]


class Trigger(str, Enum):
    event = 'event'
    user_request = 'user_request'
    observation = 'observation'
    system_schedule = 'system_schedule'


class ExecutionEnvelope(BaseModel):
    model_config = ConfigDict(
        frozen=True,
    )
    trigger: Trigger
    priority: Annotated[int, Field(ge=1, le=10)]
    timeout_ms: int | None = 500


class MemoryConsolidation(BaseModel):
    """
    Strengthens the stability of a Moment entity based on access frequency and its relationship to other coherent patterns, modeling the process of memory consolidation.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    title: Annotated[
        str,
        Field(
            description="The human-readable, PascalCase name of the object (e.g., 'UniversalPhysicsState')."
        ),
    ]
    description: Annotated[
        str,
        Field(
            description="A clear, complete sentence explaining the object's purpose and function within the system."
        ),
    ]
    schema_version: Annotated[
        str,
        Field(
            description="The semantic version of this schema definition (e.g., '1.0.0')."
        ),
    ]
    physics_properties: Annotated[
        PhysicsProperties,
        Field(
            description='Defines the common physics-related properties for components and laws.',
            title='Base Physics Properties',
        ),
    ]
    execution_envelope: Annotated[
        ExecutionEnvelope, Field(title='BasePhysicsLawExecutionEnvelope')
    ]
    affected_components: Annotated[
        Sequence[str],
        Field(
            description='A list of component schema IDs that this law reads from or writes to.'
        ),
    ]
