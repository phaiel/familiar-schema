# generated by datamodel-codegen:
#   filename:  tmp8661757d.json
#   timestamp: 2025-06-21T04:00:54+00:00

from __future__ import annotations

from enum import Enum
from typing import Annotated, Mapping

from pydantic import BaseModel, ConfigDict, Field


class State(str, Enum):
    """
    A canonical enum of all possible lifecycle states for a Thread entity.
    """

    Active = 'Active'
    Inactive = 'Inactive'
    Fading = 'Fading'
    Archived = 'Archived'


class Reason(str, Enum):
    """
    A canonical enum of the machine-readable reasons for a Thread state change.
    """

    UserMarkedInactive = 'UserMarkedInactive'
    UserMarkedDeceased = 'UserMarkedDeceased'
    SystemDetectedInactivity = 'SystemDetectedInactivity'
    LifecycleCompleted = 'LifecycleCompleted'


class Metadata(BaseModel):
    """
    A generic nested key-value map structure where outer keys map to objects, and inner keys map to string, number, or boolean values.
    """

    model_config = ConfigDict(
        extra='forbid',
        frozen=True,
    )
    value: Mapping[str, Mapping[str, str | float | bool]]


class Columns(BaseModel):
    """
    A map of column names to their definitions.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    thread_id: Annotated[
        str,
        Field(
            description='A reusable definition for a unique entity identifier.',
            title='Entity ID Field',
        ),
    ]
    effective_at: Annotated[
        str,
        Field(
            description='A canonical definition for an ISO 8601 timestamp with timezone.',
            title='Timestamp',
        ),
    ]
    state: Annotated[
        State,
        Field(
            description='A canonical enum of all possible lifecycle states for a Thread entity.',
            title='Thread State',
        ),
    ]
    reason: Annotated[
        Reason | None,
        Field(
            description='A canonical enum of the machine-readable reasons for a Thread state change.',
            title='Thread State Reason',
        ),
    ]
    metadata: Annotated[
        Metadata | None,
        Field(
            description='A generic nested key-value map structure where outer keys map to objects, and inner keys map to string, number, or boolean values.',
            title='Key Value',
        ),
    ]


class ThreadStateLog(BaseModel):
    """
    Defines the schema for the 'thread_state_log' database table...
    """

    model_config = ConfigDict(
        frozen=True,
    )
    title: Annotated[
        str,
        Field(
            description="The human-readable, PascalCase name of the object (e.g., 'UniversalPhysicsState')."
        ),
    ]
    description: Annotated[
        str,
        Field(
            description="A clear, complete sentence explaining the object's purpose and function within the system."
        ),
    ]
    schema_version: Annotated[
        str,
        Field(
            description="The semantic version of this schema definition (e.g., '1.0.0')."
        ),
    ]
    tableName: Annotated[
        str, Field(description='The physical name of the table in the database.')
    ]
    columns: Annotated[
        Columns,
        Field(
            description='A map of column names to their definitions.',
            title='ThreadStateLogColumns',
        ),
    ]
