# generated by datamodel-codegen:
#   filename:  tmps1rfiluc.json
#   timestamp: 2025-06-21T16:54:13+00:00

from __future__ import annotations

from enum import Enum
from typing import Annotated, Sequence

from pydantic import BaseModel, ConfigDict, Field


class Engine(Enum):
    """
    The physics engine responsible for this object.
    """

    quantum = 'quantum'
    classical = 'classical'
    hybrid = 'hybrid'


class PhysicsProperties(BaseModel):
    """
    Defines the common physics-related properties for components and laws.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    collapse_sensitive: Annotated[
        bool | None,
        Field(
            description='Indicates if the object is affected by or triggers quantum collapse.'
        ),
    ]
    engine: Annotated[
        Engine, Field(description='The physics engine responsible for this object.')
    ]
    is_quantum: Annotated[
        bool, Field(description='Indicates if the object has quantum properties.')
    ]


class FilamentType(str, Enum):
    """
    A canonical enum of the types of high-level narratives a Filament can represent.
    """

    PersonalityTrait = 'PersonalityTrait'
    Worldview = 'Worldview'
    Relationship_Pattern = 'Relationship_Pattern'
    Life_Theme = 'Life_Theme'


class AbstractionLevel(str, Enum):
    """
    A canonical enum for the level of abstraction of a cognitive entity.
    """

    Low = 'Low'
    Medium = 'Medium'
    High = 'High'


class Fields(BaseModel):
    """
    A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.
    """

    model_config = ConfigDict(
        extra='forbid',
        frozen=True,
    )
    narrative_description: Annotated[
        str,
        Field(
            description='A canonical, reusable definition for a human-readable description field.',
            title='Description Field',
        ),
    ]
    filament_type: Annotated[
        FilamentType,
        Field(
            description='A canonical enum of the types of high-level narratives a Filament can represent.',
            title='Filament Type',
        ),
    ]
    abstraction_level: Annotated[
        AbstractionLevel,
        Field(
            description='A canonical enum for the level of abstraction of a cognitive entity.',
            title='Abstraction Level',
        ),
    ]
    source_threads_and_bonds: Annotated[
        Sequence[str],
        Field(
            description='A list of Thread and Bond entity IDs that are the source for a derived cognitive entity like a Filament.',
            title='Source Threads and Bonds Field',
        ),
    ]


class FilamentContent(BaseModel):
    """
    Defines the high-level narrative or belief content of a Filament entity. This is a quantum component.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    physics_properties: Annotated[
        PhysicsProperties,
        Field(
            description='Defines the common physics-related properties for components and laws.',
            title='Base Physics Properties',
        ),
    ]
    fields: Annotated[
        Fields,
        Field(
            description='A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.',
            title='FilamentContentFields',
        ),
    ]
