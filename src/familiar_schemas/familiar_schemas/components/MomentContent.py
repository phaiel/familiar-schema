# generated by datamodel-codegen:
#   filename:  tmpb3w0nld3.json
#   timestamp: 2025-06-21T16:54:15+00:00

from __future__ import annotations

from enum import Enum
from typing import Annotated, Any, Mapping, Sequence

from pydantic import BaseModel, ConfigDict, Field


class Engine(Enum):
    """
    The physics engine responsible for this object.
    """

    quantum = 'quantum'
    classical = 'classical'
    hybrid = 'hybrid'


class PhysicsProperties(BaseModel):
    """
    Defines the common physics-related properties for components and laws.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    collapse_sensitive: Annotated[
        bool | None,
        Field(
            description='Indicates if the object is affected by or triggers quantum collapse.'
        ),
    ]
    engine: Annotated[
        Engine, Field(description='The physics engine responsible for this object.')
    ]
    is_quantum: Annotated[
        bool, Field(description='Indicates if the object has quantum properties.')
    ]


class MomentType(str, Enum):
    """
    A canonical enum for the classification of a Moment entity's content.
    """

    Event = 'Event'
    Experience = 'Experience'
    Observation = 'Observation'
    Interaction = 'Interaction'


class Fields(BaseModel):
    """
    A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.
    """

    model_config = ConfigDict(
        extra='forbid',
        frozen=True,
    )
    description: Annotated[
        str,
        Field(
            description='A canonical, reusable definition for a human-readable description field.',
            title='Description Field',
        ),
    ]
    moment_type: Annotated[
        MomentType,
        Field(
            description="A canonical enum for the classification of a Moment entity's content.",
            title='Moment Type',
        ),
    ]
    participants: Annotated[
        Sequence[str] | None,
        Field(
            description='A canonical definition for a list of unique entity identifiers (UUIDs).',
            title='Entity ID List',
        ),
    ]
    objective_facts: Annotated[
        Mapping[
            str, str | float | int | bool | Mapping[str, Any] | Sequence[Any] | None
        ]
        | None,
        Field(
            description='A generic key-value map where keys are strings and values can be any JSON type. Used for flexible data structures like parameters or metadata.',
            title='String Value Map',
        ),
    ]


class MomentContent(BaseModel):
    """
    Defines the objective, factual content of a Moment entity, representing a specific event in time.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    physics_properties: Annotated[
        PhysicsProperties,
        Field(
            description='Defines the common physics-related properties for components and laws.',
            title='Base Physics Properties',
        ),
    ]
    fields: Annotated[
        Fields,
        Field(
            description='A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.',
            title='MomentContentFields',
        ),
    ]
