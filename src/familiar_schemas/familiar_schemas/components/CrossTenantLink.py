# generated by datamodel-codegen:
#   filename:  tmp140l_81g.json
#   timestamp: 2025-06-21T16:54:12+00:00

from __future__ import annotations

from enum import Enum
from typing import Annotated, Sequence

from pydantic import BaseModel, ConfigDict, Field


class Engine(Enum):
    """
    The physics engine responsible for this object.
    """

    quantum = 'quantum'
    classical = 'classical'
    hybrid = 'hybrid'


class PhysicsProperties(BaseModel):
    """
    Defines the common physics-related properties for components and laws.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    collapse_sensitive: Annotated[
        bool | None,
        Field(
            description='Indicates if the object is affected by or triggers quantum collapse.'
        ),
    ]
    engine: Annotated[
        Engine, Field(description='The physics engine responsible for this object.')
    ]
    is_quantum: Annotated[
        bool, Field(description='Indicates if the object has quantum properties.')
    ]


class LinkStatus(str, Enum):
    """
    A canonical enum for the status of a cross-tenant link.
    """

    PendingApproval = 'PendingApproval'
    Approved = 'Approved'
    Revoked = 'Revoked'
    Declined = 'Declined'


class PermissionsGrantedEnum(str, Enum):
    """
    A canonical enum of permissions related to a Bond.
    """

    Read = 'Read'
    Write = 'Write'
    Delete = 'Delete'
    Share = 'Share'


class Fields(BaseModel):
    """
    A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.
    """

    model_config = ConfigDict(
        extra='forbid',
        frozen=True,
    )
    remote_tenant_id: Annotated[
        str,
        Field(
            description='A canonical definition for a Universally Unique Identifier (UUID).',
            title='UUID',
        ),
    ]
    remote_thread_id: Annotated[
        str,
        Field(
            description='A reusable definition for a unique entity identifier.',
            title='Entity ID Field',
        ),
    ]
    link_status: Annotated[
        LinkStatus,
        Field(
            description='A canonical enum for the status of a cross-tenant link.',
            title='Link Status',
        ),
    ]
    permissions_granted: Annotated[
        Sequence[PermissionsGrantedEnum] | None,
        Field(
            description='A list of permissions granted by the remote user for this link.'
        ),
    ]


class CrossTenantLink(BaseModel):
    """
    Manages a link to a Thread in another tenant, enabling federated relationships.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    physics_properties: Annotated[
        PhysicsProperties,
        Field(
            description='Defines the common physics-related properties for components and laws.',
            title='Base Physics Properties',
        ),
    ]
    fields: Annotated[
        Fields,
        Field(
            description='A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.',
            title='Cross-tenantLinkFields',
        ),
    ]
