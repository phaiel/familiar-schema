# generated by datamodel-codegen:
#   filename:  tmprd2gzdc2.json
#   timestamp: 2025-06-21T16:54:18+00:00

from __future__ import annotations

from enum import Enum
from typing import Annotated, Any, Sequence

from pydantic import BaseModel, ConfigDict, Field


class Engine(Enum):
    """
    The physics engine responsible for this object.
    """

    quantum = 'quantum'
    classical = 'classical'
    hybrid = 'hybrid'


class PhysicsProperties(BaseModel):
    """
    Defines the common physics-related properties for components and laws.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    collapse_sensitive: Annotated[
        bool | None,
        Field(
            description='Indicates if the object is affected by or triggers quantum collapse.'
        ),
    ]
    engine: Annotated[
        Engine, Field(description='The physics engine responsible for this object.')
    ]
    is_quantum: Annotated[
        bool, Field(description='Indicates if the object has quantum properties.')
    ]


class DecayRate(BaseModel):
    """
    The base rate of energy or coherence decay for an entity, before multipliers are applied.
    """

    model_config = ConfigDict(
        extra='forbid',
        frozen=True,
    )
    value: float


class ConsolidationRate(BaseModel):
    """
    The base rate of memory consolidation for an entity, before multipliers are applied. Represents how quickly an unstable memory becomes stable.
    """

    model_config = ConfigDict(
        extra='forbid',
        frozen=True,
    )
    value: Annotated[float, Field(ge=0.0, le=1.0)]


class Fields(BaseModel):
    """
    A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.
    """

    model_config = ConfigDict(
        extra='forbid',
        frozen=True,
    )
    energy: Annotated[
        float, Field(description='The current energy level of an entity.')
    ]
    momentum: Annotated[
        Sequence[float],
        Field(
            description='A reusable data type for a vector of six f64 numbers, used for momentum and forces in the 6 spatial dimensions of the manifold.',
            max_length=6,
            min_length=6,
            title='6D Physics Vector',
        ),
    ]
    cognitive_perspective: Annotated[
        Any,
        Field(
            description="The intrinsic 'spin' or 'flavor' of the entity, which generates cognitive dissonance (torsion).",
            title='Cognitive Perspective Field',
        ),
    ]
    decay_rate: Annotated[
        DecayRate,
        Field(
            description='The base rate of energy or coherence decay for an entity, before multipliers are applied.'
        ),
    ]
    consolidation_rate: Annotated[
        ConsolidationRate,
        Field(
            description='The base rate of memory consolidation for an entity, before multipliers are applied. Represents how quickly an unstable memory becomes stable.',
            title='Consolidation Rate Field',
        ),
    ]
    quantum_coherence: Annotated[
        float | None,
        Field(
            description='The quantum coherence level of the entity, representing its degree of superposition. Null for classical entities.',
            ge=0.0,
            le=1.0,
        ),
    ] = None
    entanglement_strength: Annotated[
        float | None,
        Field(
            description='The overall entanglement strength of this entity with others. Null for classical entities.',
            ge=0.0,
            le=1.0,
        ),
    ] = None


class UniversalPhysicsState(BaseModel):
    """
    The transient, mutable physics state of an entity.
    """

    model_config = ConfigDict(
        frozen=True,
    )
    physics_properties: Annotated[
        PhysicsProperties,
        Field(
            description='Defines the common physics-related properties for components and laws.',
            title='Base Physics Properties',
        ),
    ]
    fields: Annotated[
        Fields,
        Field(
            description='A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.',
            title='UniversalPhysicsStateFields',
        ),
    ]
