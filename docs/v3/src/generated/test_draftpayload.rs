#![allow(clippy::redundant_closure_call)]
#![allow(clippy::needless_lifetimes)]
#![allow(clippy::match_single_binding)]
#![allow(clippy::clone_on_copy)]

#[doc = r" Error types."]
pub mod error {
    #[doc = r" Error from a `TryFrom` or `FromStr` implementation."]
    pub struct ConversionError(::std::borrow::Cow<'static, str>);
    impl ::std::error::Error for ConversionError {}
    impl ::std::fmt::Display for ConversionError {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> Result<(), ::std::fmt::Error> {
            ::std::fmt::Display::fmt(&self.0, f)
        }
    }
    impl ::std::fmt::Debug for ConversionError {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> Result<(), ::std::fmt::Error> {
            ::std::fmt::Debug::fmt(&self.0, f)
        }
    }
    impl From<&'static str> for ConversionError {
        fn from(value: &'static str) -> Self {
            Self(value.into())
        }
    }
    impl From<String> for ConversionError {
        fn from(value: String) -> Self {
            Self(value.into())
        }
    }
}
#[doc = "A canonical enum for the level of abstraction of a cognitive entity."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"$id\": \"https://familiar.dev/schemas/types/physics/AbstractionLevel.v1.json\","]
#[doc = "  \"title\": \"Abstraction Level\","]
#[doc = "  \"description\": \"A canonical enum for the level of abstraction of a cognitive entity.\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"Low\","]
#[doc = "    \"Medium\","]
#[doc = "    \"High\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum AbstractionLevel {
    Low,
    Medium,
    High,
}
impl ::std::convert::From<&Self> for AbstractionLevel {
    fn from(value: &AbstractionLevel) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display for AbstractionLevel {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Low => write!(f, "Low"),
            Self::Medium => write!(f, "Medium"),
            Self::High => write!(f, "High"),
        }
    }
}
impl ::std::str::FromStr for AbstractionLevel {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        match value {
            "Low" => Ok(Self::Low),
            "Medium" => Ok(Self::Medium),
            "High" => Ok(Self::High),
            _ => Err("invalid value".into()),
        }
    }
}
impl ::std::convert::TryFrom<&str> for AbstractionLevel {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String> for AbstractionLevel {
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String> for AbstractionLevel {
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "Defines the common physics-related properties for components and laws."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"$id\": \"https://familiar.dev/schemas/base/PhysicsProperties.v1.schema.json\","]
#[doc = "  \"title\": \"Base Physics Properties\","]
#[doc = "  \"description\": \"Defines the common physics-related properties for components and laws.\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"engine\","]
#[doc = "    \"is_quantum\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"collapse_sensitive\": {"]
#[doc = "      \"description\": \"Indicates if the object is affected by or triggers quantum collapse.\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"engine\": {"]
#[doc = "      \"description\": \"The physics engine responsible for this object.\","]
#[doc = "      \"enum\": ["]
#[doc = "        \"quantum\","]
#[doc = "        \"classical\","]
#[doc = "        \"hybrid\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"is_quantum\": {"]
#[doc = "      \"description\": \"Indicates if the object has quantum properties.\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct BasePhysicsProperties {
    #[doc = "Indicates if the object is affected by or triggers quantum collapse."]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub collapse_sensitive: ::std::option::Option<bool>,
    #[doc = "The physics engine responsible for this object."]
    pub engine: BasePhysicsPropertiesEngine,
    #[doc = "Indicates if the object has quantum properties."]
    pub is_quantum: bool,
}
impl ::std::convert::From<&BasePhysicsProperties> for BasePhysicsProperties {
    fn from(value: &BasePhysicsProperties) -> Self {
        value.clone()
    }
}
impl BasePhysicsProperties {
    pub fn builder() -> builder::BasePhysicsProperties {
        Default::default()
    }
}
#[doc = "The physics engine responsible for this object."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"The physics engine responsible for this object.\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"quantum\","]
#[doc = "    \"classical\","]
#[doc = "    \"hybrid\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum BasePhysicsPropertiesEngine {
    #[serde(rename = "quantum")]
    Quantum,
    #[serde(rename = "classical")]
    Classical,
    #[serde(rename = "hybrid")]
    Hybrid,
}
impl ::std::convert::From<&Self> for BasePhysicsPropertiesEngine {
    fn from(value: &BasePhysicsPropertiesEngine) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display for BasePhysicsPropertiesEngine {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Quantum => write!(f, "quantum"),
            Self::Classical => write!(f, "classical"),
            Self::Hybrid => write!(f, "hybrid"),
        }
    }
}
impl ::std::str::FromStr for BasePhysicsPropertiesEngine {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        match value {
            "quantum" => Ok(Self::Quantum),
            "classical" => Ok(Self::Classical),
            "hybrid" => Ok(Self::Hybrid),
            _ => Err("invalid value".into()),
        }
    }
}
impl ::std::convert::TryFrom<&str> for BasePhysicsPropertiesEngine {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String> for BasePhysicsPropertiesEngine {
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String> for BasePhysicsPropertiesEngine {
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "  \"title\": \"Base Type System\","]
#[doc = "  \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"enum\": ["]
#[doc = "        \"string\","]
#[doc = "        \"boolean\","]
#[doc = "        \"integer\","]
#[doc = "        \"number\","]
#[doc = "        \"f32\","]
#[doc = "        \"f64\","]
#[doc = "        \"i32\","]
#[doc = "        \"i64\","]
#[doc = "        \"u32\","]
#[doc = "        \"u64\","]
#[doc = "        \"uuid\","]
#[doc = "        \"date-time\","]
#[doc = "        \"duration\","]
#[doc = "        \"object\","]
#[doc = "        \"array\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"$ref\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"$ref\": {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    }"]
#[doc = "  ],"]
#[doc = "  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub enum BaseTypeSystem {
    #[doc = "A primitive type, represented as a string from a controlled vocabulary."]
    #[serde(rename = "string")]
    String,
    #[doc = "A primitive type, represented as a string from a controlled vocabulary."]
    #[serde(rename = "boolean")]
    Boolean,
    #[doc = "A primitive type, represented as a string from a controlled vocabulary."]
    #[serde(rename = "integer")]
    Integer,
    #[doc = "A primitive type, represented as a string from a controlled vocabulary."]
    #[serde(rename = "number")]
    Number,
    #[doc = "A primitive type, represented as a string from a controlled vocabulary."]
    #[serde(rename = "f32")]
    F32,
    #[doc = "A primitive type, represented as a string from a controlled vocabulary."]
    #[serde(rename = "f64")]
    F64,
    #[doc = "A primitive type, represented as a string from a controlled vocabulary."]
    #[serde(rename = "i32")]
    I32,
    #[doc = "A primitive type, represented as a string from a controlled vocabulary."]
    #[serde(rename = "i64")]
    I64,
    #[doc = "A primitive type, represented as a string from a controlled vocabulary."]
    #[serde(rename = "u32")]
    U32,
    #[doc = "A primitive type, represented as a string from a controlled vocabulary."]
    #[serde(rename = "u64")]
    U64,
    #[doc = "A primitive type, represented as a string from a controlled vocabulary."]
    #[serde(rename = "uuid")]
    Uuid,
    #[doc = "A primitive type, represented as a string from a controlled vocabulary."]
    #[serde(rename = "date-time")]
    DateTime,
    #[doc = "A primitive type, represented as a string from a controlled vocabulary."]
    #[serde(rename = "duration")]
    Duration,
    #[doc = "A primitive type, represented as a string from a controlled vocabulary."]
    #[serde(rename = "object")]
    Object,
    #[doc = "A primitive type, represented as a string from a controlled vocabulary."]
    #[serde(rename = "array")]
    Array,
    #[doc = "A complex, contrived meta-type, represented by a reference to its canonical schema file."]
    #[serde(rename = "$ref")]
    Ref(::std::string::String),
}
impl ::std::convert::From<&Self> for BaseTypeSystem {
    fn from(value: &BaseTypeSystem) -> Self {
        value.clone()
    }
}
#[doc = "`BaseUserContext`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"BaseUserContext\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"user_id\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"session_id\": {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/fields/EntityId.v1.json\","]
#[doc = "      \"title\": \"Entity ID Field\","]
#[doc = "      \"description\": \"A reusable definition for a unique entity identifier.\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"user_id\": {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/types/primitives/UUID.v1.json\","]
#[doc = "      \"title\": \"UUID\","]
#[doc = "      \"description\": \"A canonical definition for a Universally Unique Identifier (UUID).\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct BaseUserContext {
    #[doc = "A reusable definition for a unique entity identifier."]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub session_id: ::std::option::Option<::std::string::String>,
    #[doc = "A canonical definition for a Universally Unique Identifier (UUID)."]
    pub user_id: ::std::string::String,
}
impl ::std::convert::From<&BaseUserContext> for BaseUserContext {
    fn from(value: &BaseUserContext) -> Self {
        value.clone()
    }
}
impl BaseUserContext {
    pub fn builder() -> builder::BaseUserContext {
        Default::default()
    }
}
#[doc = "Component references temporarily disabled for pipeline testing"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"BondComponents\","]
#[doc = "  \"description\": \"Component references temporarily disabled for pipeline testing\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"content\","]
#[doc = "    \"permissions\","]
#[doc = "    \"physics_config\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"_comment\": {"]
#[doc = "      \"description\": \"TODO: Re-enable component references when component schemas are available\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"content\": {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/components/BondContent.v1.schema.json\","]
#[doc = "      \"title\": \"Bond Content Component\","]
#[doc = "      \"description\": \"Defines the descriptive content and history of a relationship Bond.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"fields\","]
#[doc = "        \"physics_properties\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"fields\": {"]
#[doc = "          \"title\": \"BondContentFields\","]
#[doc = "          \"description\": \"A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"required\": ["]
#[doc = "            \"relationship_type\""]
#[doc = "          ],"]
#[doc = "          \"properties\": {"]
#[doc = "            \"description\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "              \"title\": \"Description Field\","]
#[doc = "              \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "              \"default\": \"\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"history\": {"]
#[doc = "              \"type\": \"array\","]
#[doc = "              \"items\": {"]
#[doc = "                \"$id\": \"https://familiar.dev/schemas/types/social/BondEvent.v1.json\","]
#[doc = "                \"title\": \"Bond Event Type\","]
#[doc = "                \"description\": \"Represents a significant event that impacted a bond's strength or state.\","]
#[doc = "                \"type\": \"object\","]
#[doc = "                \"required\": ["]
#[doc = "                  \"impact\","]
#[doc = "                  \"moment_id\","]
#[doc = "                  \"timestamp\""]
#[doc = "                ],"]
#[doc = "                \"properties\": {"]
#[doc = "                  \"impact\": {"]
#[doc = "                    \"description\": \"How much this event affected the bond, from -1.0 (negative) to 1.0 (positive).\","]
#[doc = "                    \"type\": \"number\","]
#[doc = "                    \"maximum\": 1.0,"]
#[doc = "                    \"minimum\": -1.0"]
#[doc = "                  },"]
#[doc = "                  \"moment_id\": {"]
#[doc = "                    \"type\": \"string\""]
#[doc = "                  },"]
#[doc = "                  \"timestamp\": {"]
#[doc = "                    \"$id\": \"https://familiar.dev/schemas/types/primitives/Timestamp.v1.json\","]
#[doc = "                    \"title\": \"Timestamp\","]
#[doc = "                    \"description\": \"A canonical definition for an ISO 8601 timestamp with timezone.\","]
#[doc = "                    \"type\": \"string\""]
#[doc = "                  }"]
#[doc = "                }"]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"relationship_type\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/types/social/RelationshipType.v1.json\","]
#[doc = "              \"title\": \"Relationship Type\","]
#[doc = "              \"description\": \"A canonical enum of all possible relationship types between Threads.\","]
#[doc = "              \"type\": \"string\","]
#[doc = "              \"enum\": ["]
#[doc = "                \"Family\","]
#[doc = "                \"Friend\","]
#[doc = "                \"Romantic\","]
#[doc = "                \"Professional\","]
#[doc = "                \"Acquaintance\","]
#[doc = "                \"Adversarial\""]
#[doc = "              ]"]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"patternProperties\": {"]
#[doc = "            \"^[a-z_][a-z0-9_]*$\": {"]
#[doc = "              \"oneOf\": ["]
#[doc = "                {"]
#[doc = "                  \"description\": \"A direct reference to a shared definition in SharedDefinitions.schema.json.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"$ref\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"$ref\": {"]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"additionalProperties\": false"]
#[doc = "                },"]
#[doc = "                {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/base/Field.v1.schema.json\","]
#[doc = "                  \"title\": \"Base Field\","]
#[doc = "                  \"description\": \"Defines the structure for a single, inline field definition within a component.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"description\","]
#[doc = "                    \"type\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"constraints\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "                      \"title\": \"Constraint Definition\","]
#[doc = "                      \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"enum\": {"]
#[doc = "                          \"type\": \"array\","]
#[doc = "                          \"items\": {"]
#[doc = "                            \"type\": \"string\""]
#[doc = "                          }"]
#[doc = "                        },"]
#[doc = "                        \"maxLength\": {"]
#[doc = "                          \"type\": \"integer\""]
#[doc = "                        },"]
#[doc = "                        \"maximum\": {"]
#[doc = "                          \"type\": \"number\""]
#[doc = "                        },"]
#[doc = "                        \"minLength\": {"]
#[doc = "                          \"type\": \"integer\""]
#[doc = "                        },"]
#[doc = "                        \"minimum\": {"]
#[doc = "                          \"type\": \"number\""]
#[doc = "                        },"]
#[doc = "                        \"pattern\": {"]
#[doc = "                          \"type\": \"string\""]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"additionalProperties\": false"]
#[doc = "                    },"]
#[doc = "                    \"default_value\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "                      \"title\": \"Any Value\","]
#[doc = "                      \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "                      \"type\": ["]
#[doc = "                        \"string\","]
#[doc = "                        \"number\","]
#[doc = "                        \"integer\","]
#[doc = "                        \"boolean\","]
#[doc = "                        \"object\","]
#[doc = "                        \"array\","]
#[doc = "                        \"null\""]
#[doc = "                      ]"]
#[doc = "                    },"]
#[doc = "                    \"description\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "                      \"title\": \"Description Field\","]
#[doc = "                      \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "                      \"default\": \"\","]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    },"]
#[doc = "                    \"type\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "                      \"title\": \"Base Type System\","]
#[doc = "                      \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "                      \"oneOf\": ["]
#[doc = "                        {"]
#[doc = "                          \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "                          \"type\": \"string\","]
#[doc = "                          \"enum\": ["]
#[doc = "                            \"string\","]
#[doc = "                            \"boolean\","]
#[doc = "                            \"integer\","]
#[doc = "                            \"number\","]
#[doc = "                            \"f32\","]
#[doc = "                            \"f64\","]
#[doc = "                            \"i32\","]
#[doc = "                            \"i64\","]
#[doc = "                            \"u32\","]
#[doc = "                            \"u64\","]
#[doc = "                            \"uuid\","]
#[doc = "                            \"date-time\","]
#[doc = "                            \"duration\","]
#[doc = "                            \"object\","]
#[doc = "                            \"array\""]
#[doc = "                          ]"]
#[doc = "                        },"]
#[doc = "                        {"]
#[doc = "                          \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "                          \"type\": \"object\","]
#[doc = "                          \"required\": ["]
#[doc = "                            \"$ref\""]
#[doc = "                          ],"]
#[doc = "                          \"properties\": {"]
#[doc = "                            \"$ref\": {"]
#[doc = "                              \"type\": \"string\""]
#[doc = "                            }"]
#[doc = "                          },"]
#[doc = "                          \"additionalProperties\": false"]
#[doc = "                        }"]
#[doc = "                      ],"]
#[doc = "                      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                    },"]
#[doc = "                    \"ui_label\": {"]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                }"]
#[doc = "              ]"]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        },"]
#[doc = "        \"physics_properties\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/base/PhysicsProperties.v1.schema.json\","]
#[doc = "          \"title\": \"Base Physics Properties\","]
#[doc = "          \"description\": \"Defines the common physics-related properties for components and laws.\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"required\": ["]
#[doc = "            \"engine\","]
#[doc = "            \"is_quantum\""]
#[doc = "          ],"]
#[doc = "          \"properties\": {"]
#[doc = "            \"collapse_sensitive\": {"]
#[doc = "              \"description\": \"Indicates if the object is affected by or triggers quantum collapse.\","]
#[doc = "              \"type\": \"boolean\""]
#[doc = "            },"]
#[doc = "            \"engine\": {"]
#[doc = "              \"description\": \"The physics engine responsible for this object.\","]
#[doc = "              \"enum\": ["]
#[doc = "                \"quantum\","]
#[doc = "                \"classical\","]
#[doc = "                \"hybrid\""]
#[doc = "              ]"]
#[doc = "            },"]
#[doc = "            \"is_quantum\": {"]
#[doc = "              \"description\": \"Indicates if the object has quantum properties.\","]
#[doc = "              \"type\": \"boolean\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "      \"physics_properties\": {"]
#[doc = "        \"engine\": \"classical\","]
#[doc = "        \"is_quantum\": false"]
#[doc = "      },"]
#[doc = "      \"schema_version\": \"1.1.0\""]
#[doc = "    },"]
#[doc = "    \"permissions\": {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/components/BondPermissions.v1.schema.json\","]
#[doc = "      \"title\": \"Bond Permissions Component\","]
#[doc = "      \"description\": \"Defines the access control and privacy rules for a Bond and its associated Moments.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"fields\","]
#[doc = "        \"physics_properties\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"fields\": {"]
#[doc = "          \"title\": \"BaseFields\","]
#[doc = "          \"description\": \"A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"patternProperties\": {"]
#[doc = "            \"^[a-z_][a-z0-9_]*$\": {"]
#[doc = "              \"oneOf\": ["]
#[doc = "                {"]
#[doc = "                  \"description\": \"A direct reference to a shared definition in SharedDefinitions.schema.json.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"$ref\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"$ref\": {"]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"additionalProperties\": false"]
#[doc = "                },"]
#[doc = "                {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/base/Field.v1.schema.json\","]
#[doc = "                  \"title\": \"Base Field\","]
#[doc = "                  \"description\": \"Defines the structure for a single, inline field definition within a component.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"description\","]
#[doc = "                    \"type\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"constraints\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "                      \"title\": \"Constraint Definition\","]
#[doc = "                      \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"enum\": {"]
#[doc = "                          \"type\": \"array\","]
#[doc = "                          \"items\": {"]
#[doc = "                            \"type\": \"string\""]
#[doc = "                          }"]
#[doc = "                        },"]
#[doc = "                        \"maxLength\": {"]
#[doc = "                          \"type\": \"integer\""]
#[doc = "                        },"]
#[doc = "                        \"maximum\": {"]
#[doc = "                          \"type\": \"number\""]
#[doc = "                        },"]
#[doc = "                        \"minLength\": {"]
#[doc = "                          \"type\": \"integer\""]
#[doc = "                        },"]
#[doc = "                        \"minimum\": {"]
#[doc = "                          \"type\": \"number\""]
#[doc = "                        },"]
#[doc = "                        \"pattern\": {"]
#[doc = "                          \"type\": \"string\""]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"additionalProperties\": false"]
#[doc = "                    },"]
#[doc = "                    \"default_value\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "                      \"title\": \"Any Value\","]
#[doc = "                      \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "                      \"type\": ["]
#[doc = "                        \"string\","]
#[doc = "                        \"number\","]
#[doc = "                        \"integer\","]
#[doc = "                        \"boolean\","]
#[doc = "                        \"object\","]
#[doc = "                        \"array\","]
#[doc = "                        \"null\""]
#[doc = "                      ]"]
#[doc = "                    },"]
#[doc = "                    \"description\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "                      \"title\": \"Description Field\","]
#[doc = "                      \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "                      \"default\": \"\","]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    },"]
#[doc = "                    \"type\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "                      \"title\": \"Base Type System\","]
#[doc = "                      \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "                      \"oneOf\": ["]
#[doc = "                        {"]
#[doc = "                          \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "                          \"type\": \"string\","]
#[doc = "                          \"enum\": ["]
#[doc = "                            \"string\","]
#[doc = "                            \"boolean\","]
#[doc = "                            \"integer\","]
#[doc = "                            \"number\","]
#[doc = "                            \"f32\","]
#[doc = "                            \"f64\","]
#[doc = "                            \"i32\","]
#[doc = "                            \"i64\","]
#[doc = "                            \"u32\","]
#[doc = "                            \"u64\","]
#[doc = "                            \"uuid\","]
#[doc = "                            \"date-time\","]
#[doc = "                            \"duration\","]
#[doc = "                            \"object\","]
#[doc = "                            \"array\""]
#[doc = "                          ]"]
#[doc = "                        },"]
#[doc = "                        {"]
#[doc = "                          \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "                          \"type\": \"object\","]
#[doc = "                          \"required\": ["]
#[doc = "                            \"$ref\""]
#[doc = "                          ],"]
#[doc = "                          \"properties\": {"]
#[doc = "                            \"$ref\": {"]
#[doc = "                              \"type\": \"string\""]
#[doc = "                            }"]
#[doc = "                          },"]
#[doc = "                          \"additionalProperties\": false"]
#[doc = "                        }"]
#[doc = "                      ],"]
#[doc = "                      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                    },"]
#[doc = "                    \"ui_label\": {"]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                }"]
#[doc = "              ]"]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        },"]
#[doc = "        \"physics_properties\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/base/PhysicsProperties.v1.schema.json\","]
#[doc = "          \"title\": \"Base Physics Properties\","]
#[doc = "          \"description\": \"Defines the common physics-related properties for components and laws.\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"required\": ["]
#[doc = "            \"engine\","]
#[doc = "            \"is_quantum\""]
#[doc = "          ],"]
#[doc = "          \"properties\": {"]
#[doc = "            \"collapse_sensitive\": {"]
#[doc = "              \"description\": \"Indicates if the object is affected by or triggers quantum collapse.\","]
#[doc = "              \"type\": \"boolean\""]
#[doc = "            },"]
#[doc = "            \"engine\": {"]
#[doc = "              \"description\": \"The physics engine responsible for this object.\","]
#[doc = "              \"enum\": ["]
#[doc = "                \"quantum\","]
#[doc = "                \"classical\","]
#[doc = "                \"hybrid\""]
#[doc = "              ]"]
#[doc = "            },"]
#[doc = "            \"is_quantum\": {"]
#[doc = "              \"description\": \"Indicates if the object has quantum properties.\","]
#[doc = "              \"type\": \"boolean\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "      \"fields\": {"]
#[doc = "        \"allow_cross_tenant_view\": {"]
#[doc = "          \"default\": false,"]
#[doc = "          \"description\": \"If true, allows linked users from other tenants to view data according to their permissions.\","]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        \"min_age_for_viewing\": {"]
#[doc = "          \"default\": 13,"]
#[doc = "          \"description\": \"The minimum age a child Thread must be for this bond's moments to be visible to them. Supports age-aware privacy.\","]
#[doc = "          \"minimum\": 0,"]
#[doc = "          \"type\": \"integer\""]
#[doc = "        },"]
#[doc = "        \"owner_permissions\": {"]
#[doc = "          \"default\": ["]
#[doc = "            \"Read\","]
#[doc = "            \"Write\","]
#[doc = "            \"Delete\","]
#[doc = "            \"Share\""]
#[doc = "          ],"]
#[doc = "          \"description\": \"Permissions for the owner of the bond (the user in the current tenant).\","]
#[doc = "          \"items\": {"]
#[doc = "            \"$id\": \"https://familiar.dev/schemas/types/security/BondPermission.v1.json\","]
#[doc = "            \"description\": \"A canonical enum of permissions related to a Bond.\","]
#[doc = "            \"enum\": ["]
#[doc = "              \"Read\","]
#[doc = "              \"Write\","]
#[doc = "              \"Delete\","]
#[doc = "              \"Share\""]
#[doc = "            ],"]
#[doc = "            \"title\": \"Bond Permission\","]
#[doc = "            \"type\": \"string\""]
#[doc = "          },"]
#[doc = "          \"type\": \"array\""]
#[doc = "        },"]
#[doc = "        \"subject_permissions\": {"]
#[doc = "          \"default\": ["]
#[doc = "            \"Read\","]
#[doc = "            \"Contribute\""]
#[doc = "          ],"]
#[doc = "          \"description\": \"Permissions for the other person in the bond.\","]
#[doc = "          \"items\": {"]
#[doc = "            \"enum\": ["]
#[doc = "              \"Read\","]
#[doc = "              \"Write\","]
#[doc = "              \"Contribute\""]
#[doc = "            ],"]
#[doc = "            \"type\": \"string\""]
#[doc = "          },"]
#[doc = "          \"type\": \"array\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"physics_properties\": {"]
#[doc = "        \"engine\": \"classical\","]
#[doc = "        \"is_quantum\": false"]
#[doc = "      },"]
#[doc = "      \"schema_version\": \"1.0.0\""]
#[doc = "    },"]
#[doc = "    \"physics_config\": {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/components/BondPhysicsConfig.v1.schema.json\","]
#[doc = "      \"title\": \"Bond Physics Config Component\","]
#[doc = "      \"description\": \"Configuration that defines the physics model for a Bond (Dynamic or Static).\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"fields\","]
#[doc = "        \"physics_properties\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"fields\": {"]
#[doc = "          \"title\": \"BaseFields\","]
#[doc = "          \"description\": \"A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"patternProperties\": {"]
#[doc = "            \"^[a-z_][a-z0-9_]*$\": {"]
#[doc = "              \"oneOf\": ["]
#[doc = "                {"]
#[doc = "                  \"description\": \"A direct reference to a shared definition in SharedDefinitions.schema.json.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"$ref\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"$ref\": {"]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"additionalProperties\": false"]
#[doc = "                },"]
#[doc = "                {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/base/Field.v1.schema.json\","]
#[doc = "                  \"title\": \"Base Field\","]
#[doc = "                  \"description\": \"Defines the structure for a single, inline field definition within a component.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"description\","]
#[doc = "                    \"type\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"constraints\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "                      \"title\": \"Constraint Definition\","]
#[doc = "                      \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"enum\": {"]
#[doc = "                          \"type\": \"array\","]
#[doc = "                          \"items\": {"]
#[doc = "                            \"type\": \"string\""]
#[doc = "                          }"]
#[doc = "                        },"]
#[doc = "                        \"maxLength\": {"]
#[doc = "                          \"type\": \"integer\""]
#[doc = "                        },"]
#[doc = "                        \"maximum\": {"]
#[doc = "                          \"type\": \"number\""]
#[doc = "                        },"]
#[doc = "                        \"minLength\": {"]
#[doc = "                          \"type\": \"integer\""]
#[doc = "                        },"]
#[doc = "                        \"minimum\": {"]
#[doc = "                          \"type\": \"number\""]
#[doc = "                        },"]
#[doc = "                        \"pattern\": {"]
#[doc = "                          \"type\": \"string\""]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"additionalProperties\": false"]
#[doc = "                    },"]
#[doc = "                    \"default_value\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "                      \"title\": \"Any Value\","]
#[doc = "                      \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "                      \"type\": ["]
#[doc = "                        \"string\","]
#[doc = "                        \"number\","]
#[doc = "                        \"integer\","]
#[doc = "                        \"boolean\","]
#[doc = "                        \"object\","]
#[doc = "                        \"array\","]
#[doc = "                        \"null\""]
#[doc = "                      ]"]
#[doc = "                    },"]
#[doc = "                    \"description\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "                      \"title\": \"Description Field\","]
#[doc = "                      \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "                      \"default\": \"\","]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    },"]
#[doc = "                    \"type\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "                      \"title\": \"Base Type System\","]
#[doc = "                      \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "                      \"oneOf\": ["]
#[doc = "                        {"]
#[doc = "                          \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "                          \"type\": \"string\","]
#[doc = "                          \"enum\": ["]
#[doc = "                            \"string\","]
#[doc = "                            \"boolean\","]
#[doc = "                            \"integer\","]
#[doc = "                            \"number\","]
#[doc = "                            \"f32\","]
#[doc = "                            \"f64\","]
#[doc = "                            \"i32\","]
#[doc = "                            \"i64\","]
#[doc = "                            \"u32\","]
#[doc = "                            \"u64\","]
#[doc = "                            \"uuid\","]
#[doc = "                            \"date-time\","]
#[doc = "                            \"duration\","]
#[doc = "                            \"object\","]
#[doc = "                            \"array\""]
#[doc = "                          ]"]
#[doc = "                        },"]
#[doc = "                        {"]
#[doc = "                          \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "                          \"type\": \"object\","]
#[doc = "                          \"required\": ["]
#[doc = "                            \"$ref\""]
#[doc = "                          ],"]
#[doc = "                          \"properties\": {"]
#[doc = "                            \"$ref\": {"]
#[doc = "                              \"type\": \"string\""]
#[doc = "                            }"]
#[doc = "                          },"]
#[doc = "                          \"additionalProperties\": false"]
#[doc = "                        }"]
#[doc = "                      ],"]
#[doc = "                      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                    },"]
#[doc = "                    \"ui_label\": {"]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                }"]
#[doc = "              ]"]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        },"]
#[doc = "        \"physics_properties\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/base/PhysicsProperties.v1.schema.json\","]
#[doc = "          \"title\": \"Base Physics Properties\","]
#[doc = "          \"description\": \"Defines the common physics-related properties for components and laws.\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"required\": ["]
#[doc = "            \"engine\","]
#[doc = "            \"is_quantum\""]
#[doc = "          ],"]
#[doc = "          \"properties\": {"]
#[doc = "            \"collapse_sensitive\": {"]
#[doc = "              \"description\": \"Indicates if the object is affected by or triggers quantum collapse.\","]
#[doc = "              \"type\": \"boolean\""]
#[doc = "            },"]
#[doc = "            \"engine\": {"]
#[doc = "              \"description\": \"The physics engine responsible for this object.\","]
#[doc = "              \"enum\": ["]
#[doc = "                \"quantum\","]
#[doc = "                \"classical\","]
#[doc = "                \"hybrid\""]
#[doc = "              ]"]
#[doc = "            },"]
#[doc = "            \"is_quantum\": {"]
#[doc = "              \"description\": \"Indicates if the object has quantum properties.\","]
#[doc = "              \"type\": \"boolean\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "      \"fields\": {"]
#[doc = "        \"bond_model\": {"]
#[doc = "          \"description\": \"The physics model to apply to this bond.\","]
#[doc = "          \"enum\": ["]
#[doc = "            \"Dynamic\","]
#[doc = "            \"Static\""]
#[doc = "          ],"]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"dynamic_params\": {"]
#[doc = "          \"description\": \"Parameters for the spring-damper model, used only if bond_model is 'Dynamic'.\","]
#[doc = "          \"properties\": {"]
#[doc = "            \"base_damping_coefficient\": {"]
#[doc = "              \"type\": \"number\""]
#[doc = "            },"]
#[doc = "            \"base_spring_constant\": {"]
#[doc = "              \"type\": \"number\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"required\": ["]
#[doc = "            \"base_spring_constant\","]
#[doc = "            \"base_damping_coefficient\""]
#[doc = "          ],"]
#[doc = "          \"title\": \"BondPhysicsConfigDynamicParams\","]
#[doc = "          \"type\": \"object\""]
#[doc = "        },"]
#[doc = "        \"static_params\": {"]
#[doc = "          \"description\": \"Parameters for the associative model, used only if bond_model is 'Static'.\","]
#[doc = "          \"properties\": {"]
#[doc = "            \"consolidation_boost\": {"]
#[doc = "              \"type\": \"number\""]
#[doc = "            },"]
#[doc = "            \"emotional_anchor_strength\": {"]
#[doc = "              \"type\": \"number\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"required\": ["]
#[doc = "            \"consolidation_boost\","]
#[doc = "            \"emotional_anchor_strength\""]
#[doc = "          ],"]
#[doc = "          \"title\": \"BondPhysicsConfigStaticParams\","]
#[doc = "          \"type\": \"object\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"physics_properties\": {"]
#[doc = "        \"engine\": \"classical\","]
#[doc = "        \"is_quantum\": false"]
#[doc = "      },"]
#[doc = "      \"schema_version\": \"1.0.0\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct BondComponents {
    #[doc = "TODO: Re-enable component references when component schemas are available"]
    #[serde(
        rename = "_comment",
        default,
        skip_serializing_if = "::std::option::Option::is_none"
    )]
    pub comment: ::std::option::Option<::std::string::String>,
    pub content: BondContentComponent,
    pub permissions: BondPermissionsComponent,
    pub physics_config: BondPhysicsConfigComponent,
}
impl ::std::convert::From<&BondComponents> for BondComponents {
    fn from(value: &BondComponents) -> Self {
        value.clone()
    }
}
impl BondComponents {
    pub fn builder() -> builder::BondComponents {
        Default::default()
    }
}
#[doc = "Defines the descriptive content and history of a relationship Bond."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"$id\": \"https://familiar.dev/schemas/components/BondContent.v1.schema.json\","]
#[doc = "  \"title\": \"Bond Content Component\","]
#[doc = "  \"description\": \"Defines the descriptive content and history of a relationship Bond.\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"fields\","]
#[doc = "    \"physics_properties\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"fields\": {"]
#[doc = "      \"title\": \"BondContentFields\","]
#[doc = "      \"description\": \"A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"relationship_type\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"description\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "          \"title\": \"Description Field\","]
#[doc = "          \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "          \"default\": \"\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"history\": {"]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"$id\": \"https://familiar.dev/schemas/types/social/BondEvent.v1.json\","]
#[doc = "            \"title\": \"Bond Event Type\","]
#[doc = "            \"description\": \"Represents a significant event that impacted a bond's strength or state.\","]
#[doc = "            \"type\": \"object\","]
#[doc = "            \"required\": ["]
#[doc = "              \"impact\","]
#[doc = "              \"moment_id\","]
#[doc = "              \"timestamp\""]
#[doc = "            ],"]
#[doc = "            \"properties\": {"]
#[doc = "              \"impact\": {"]
#[doc = "                \"description\": \"How much this event affected the bond, from -1.0 (negative) to 1.0 (positive).\","]
#[doc = "                \"type\": \"number\","]
#[doc = "                \"maximum\": 1.0,"]
#[doc = "                \"minimum\": -1.0"]
#[doc = "              },"]
#[doc = "              \"moment_id\": {"]
#[doc = "                \"type\": \"string\""]
#[doc = "              },"]
#[doc = "              \"timestamp\": {"]
#[doc = "                \"$id\": \"https://familiar.dev/schemas/types/primitives/Timestamp.v1.json\","]
#[doc = "                \"title\": \"Timestamp\","]
#[doc = "                \"description\": \"A canonical definition for an ISO 8601 timestamp with timezone.\","]
#[doc = "                \"type\": \"string\""]
#[doc = "              }"]
#[doc = "            }"]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"relationship_type\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/types/social/RelationshipType.v1.json\","]
#[doc = "          \"title\": \"Relationship Type\","]
#[doc = "          \"description\": \"A canonical enum of all possible relationship types between Threads.\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"enum\": ["]
#[doc = "            \"Family\","]
#[doc = "            \"Friend\","]
#[doc = "            \"Romantic\","]
#[doc = "            \"Professional\","]
#[doc = "            \"Acquaintance\","]
#[doc = "            \"Adversarial\""]
#[doc = "          ]"]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"patternProperties\": {"]
#[doc = "        \"^[a-z_][a-z0-9_]*$\": {"]
#[doc = "          \"oneOf\": ["]
#[doc = "            {"]
#[doc = "              \"description\": \"A direct reference to a shared definition in SharedDefinitions.schema.json.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"$ref\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"$ref\": {"]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"additionalProperties\": false"]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/base/Field.v1.schema.json\","]
#[doc = "              \"title\": \"Base Field\","]
#[doc = "              \"description\": \"Defines the structure for a single, inline field definition within a component.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"description\","]
#[doc = "                \"type\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"constraints\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "                  \"title\": \"Constraint Definition\","]
#[doc = "                  \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"enum\": {"]
#[doc = "                      \"type\": \"array\","]
#[doc = "                      \"items\": {"]
#[doc = "                        \"type\": \"string\""]
#[doc = "                      }"]
#[doc = "                    },"]
#[doc = "                    \"maxLength\": {"]
#[doc = "                      \"type\": \"integer\""]
#[doc = "                    },"]
#[doc = "                    \"maximum\": {"]
#[doc = "                      \"type\": \"number\""]
#[doc = "                    },"]
#[doc = "                    \"minLength\": {"]
#[doc = "                      \"type\": \"integer\""]
#[doc = "                    },"]
#[doc = "                    \"minimum\": {"]
#[doc = "                      \"type\": \"number\""]
#[doc = "                    },"]
#[doc = "                    \"pattern\": {"]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"additionalProperties\": false"]
#[doc = "                },"]
#[doc = "                \"default_value\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "                  \"title\": \"Any Value\","]
#[doc = "                  \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "                  \"type\": ["]
#[doc = "                    \"string\","]
#[doc = "                    \"number\","]
#[doc = "                    \"integer\","]
#[doc = "                    \"boolean\","]
#[doc = "                    \"object\","]
#[doc = "                    \"array\","]
#[doc = "                    \"null\""]
#[doc = "                  ]"]
#[doc = "                },"]
#[doc = "                \"description\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "                  \"title\": \"Description Field\","]
#[doc = "                  \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "                  \"default\": \"\","]
#[doc = "                  \"type\": \"string\""]
#[doc = "                },"]
#[doc = "                \"type\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "                  \"title\": \"Base Type System\","]
#[doc = "                  \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "                  \"oneOf\": ["]
#[doc = "                    {"]
#[doc = "                      \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "                      \"type\": \"string\","]
#[doc = "                      \"enum\": ["]
#[doc = "                        \"string\","]
#[doc = "                        \"boolean\","]
#[doc = "                        \"integer\","]
#[doc = "                        \"number\","]
#[doc = "                        \"f32\","]
#[doc = "                        \"f64\","]
#[doc = "                        \"i32\","]
#[doc = "                        \"i64\","]
#[doc = "                        \"u32\","]
#[doc = "                        \"u64\","]
#[doc = "                        \"uuid\","]
#[doc = "                        \"date-time\","]
#[doc = "                        \"duration\","]
#[doc = "                        \"object\","]
#[doc = "                        \"array\""]
#[doc = "                      ]"]
#[doc = "                    },"]
#[doc = "                    {"]
#[doc = "                      \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"required\": ["]
#[doc = "                        \"$ref\""]
#[doc = "                      ],"]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"$ref\": {"]
#[doc = "                          \"type\": \"string\""]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"additionalProperties\": false"]
#[doc = "                    }"]
#[doc = "                  ],"]
#[doc = "                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                },"]
#[doc = "                \"ui_label\": {"]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "            }"]
#[doc = "          ]"]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"physics_properties\": {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/base/PhysicsProperties.v1.schema.json\","]
#[doc = "      \"title\": \"Base Physics Properties\","]
#[doc = "      \"description\": \"Defines the common physics-related properties for components and laws.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"engine\","]
#[doc = "        \"is_quantum\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"collapse_sensitive\": {"]
#[doc = "          \"description\": \"Indicates if the object is affected by or triggers quantum collapse.\","]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        \"engine\": {"]
#[doc = "          \"description\": \"The physics engine responsible for this object.\","]
#[doc = "          \"enum\": ["]
#[doc = "            \"quantum\","]
#[doc = "            \"classical\","]
#[doc = "            \"hybrid\""]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        \"is_quantum\": {"]
#[doc = "          \"description\": \"Indicates if the object has quantum properties.\","]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "  \"physics_properties\": {"]
#[doc = "    \"engine\": \"classical\","]
#[doc = "    \"is_quantum\": false"]
#[doc = "  },"]
#[doc = "  \"schema_version\": \"1.1.0\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct BondContentComponent {
    pub fields: BondContentFields,
    pub physics_properties: BasePhysicsProperties,
}
impl ::std::convert::From<&BondContentComponent> for BondContentComponent {
    fn from(value: &BondContentComponent) -> Self {
        value.clone()
    }
}
impl BondContentComponent {
    pub fn builder() -> builder::BondContentComponent {
        Default::default()
    }
}
#[doc = "A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"BondContentFields\","]
#[doc = "  \"description\": \"A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"relationship_type\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"description\": {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "      \"title\": \"Description Field\","]
#[doc = "      \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "      \"default\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"history\": {"]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$id\": \"https://familiar.dev/schemas/types/social/BondEvent.v1.json\","]
#[doc = "        \"title\": \"Bond Event Type\","]
#[doc = "        \"description\": \"Represents a significant event that impacted a bond's strength or state.\","]
#[doc = "        \"type\": \"object\","]
#[doc = "        \"required\": ["]
#[doc = "          \"impact\","]
#[doc = "          \"moment_id\","]
#[doc = "          \"timestamp\""]
#[doc = "        ],"]
#[doc = "        \"properties\": {"]
#[doc = "          \"impact\": {"]
#[doc = "            \"description\": \"How much this event affected the bond, from -1.0 (negative) to 1.0 (positive).\","]
#[doc = "            \"type\": \"number\","]
#[doc = "            \"maximum\": 1.0,"]
#[doc = "            \"minimum\": -1.0"]
#[doc = "          },"]
#[doc = "          \"moment_id\": {"]
#[doc = "            \"type\": \"string\""]
#[doc = "          },"]
#[doc = "          \"timestamp\": {"]
#[doc = "            \"$id\": \"https://familiar.dev/schemas/types/primitives/Timestamp.v1.json\","]
#[doc = "            \"title\": \"Timestamp\","]
#[doc = "            \"description\": \"A canonical definition for an ISO 8601 timestamp with timezone.\","]
#[doc = "            \"type\": \"string\""]
#[doc = "          }"]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"relationship_type\": {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/types/social/RelationshipType.v1.json\","]
#[doc = "      \"title\": \"Relationship Type\","]
#[doc = "      \"description\": \"A canonical enum of all possible relationship types between Threads.\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"enum\": ["]
#[doc = "        \"Family\","]
#[doc = "        \"Friend\","]
#[doc = "        \"Romantic\","]
#[doc = "        \"Professional\","]
#[doc = "        \"Acquaintance\","]
#[doc = "        \"Adversarial\""]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"patternProperties\": {"]
#[doc = "    \"^[a-z_][a-z0-9_]*$\": {"]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"description\": \"A direct reference to a shared definition in SharedDefinitions.schema.json.\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"required\": ["]
#[doc = "            \"$ref\""]
#[doc = "          ],"]
#[doc = "          \"properties\": {"]
#[doc = "            \"$ref\": {"]
#[doc = "              \"type\": \"string\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/base/Field.v1.schema.json\","]
#[doc = "          \"title\": \"Base Field\","]
#[doc = "          \"description\": \"Defines the structure for a single, inline field definition within a component.\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"required\": ["]
#[doc = "            \"description\","]
#[doc = "            \"type\""]
#[doc = "          ],"]
#[doc = "          \"properties\": {"]
#[doc = "            \"constraints\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "              \"title\": \"Constraint Definition\","]
#[doc = "              \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"properties\": {"]
#[doc = "                \"enum\": {"]
#[doc = "                  \"type\": \"array\","]
#[doc = "                  \"items\": {"]
#[doc = "                    \"type\": \"string\""]
#[doc = "                  }"]
#[doc = "                },"]
#[doc = "                \"maxLength\": {"]
#[doc = "                  \"type\": \"integer\""]
#[doc = "                },"]
#[doc = "                \"maximum\": {"]
#[doc = "                  \"type\": \"number\""]
#[doc = "                },"]
#[doc = "                \"minLength\": {"]
#[doc = "                  \"type\": \"integer\""]
#[doc = "                },"]
#[doc = "                \"minimum\": {"]
#[doc = "                  \"type\": \"number\""]
#[doc = "                },"]
#[doc = "                \"pattern\": {"]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"additionalProperties\": false"]
#[doc = "            },"]
#[doc = "            \"default_value\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "              \"title\": \"Any Value\","]
#[doc = "              \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "              \"type\": ["]
#[doc = "                \"string\","]
#[doc = "                \"number\","]
#[doc = "                \"integer\","]
#[doc = "                \"boolean\","]
#[doc = "                \"object\","]
#[doc = "                \"array\","]
#[doc = "                \"null\""]
#[doc = "              ]"]
#[doc = "            },"]
#[doc = "            \"description\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "              \"title\": \"Description Field\","]
#[doc = "              \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "              \"default\": \"\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"type\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "              \"title\": \"Base Type System\","]
#[doc = "              \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "              \"oneOf\": ["]
#[doc = "                {"]
#[doc = "                  \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "                  \"type\": \"string\","]
#[doc = "                  \"enum\": ["]
#[doc = "                    \"string\","]
#[doc = "                    \"boolean\","]
#[doc = "                    \"integer\","]
#[doc = "                    \"number\","]
#[doc = "                    \"f32\","]
#[doc = "                    \"f64\","]
#[doc = "                    \"i32\","]
#[doc = "                    \"i64\","]
#[doc = "                    \"u32\","]
#[doc = "                    \"u64\","]
#[doc = "                    \"uuid\","]
#[doc = "                    \"date-time\","]
#[doc = "                    \"duration\","]
#[doc = "                    \"object\","]
#[doc = "                    \"array\""]
#[doc = "                  ]"]
#[doc = "                },"]
#[doc = "                {"]
#[doc = "                  \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"$ref\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"$ref\": {"]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"additionalProperties\": false"]
#[doc = "                }"]
#[doc = "              ],"]
#[doc = "              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "            },"]
#[doc = "            \"ui_label\": {"]
#[doc = "              \"type\": \"string\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
pub struct BondContentFields {
    #[doc = "A canonical, reusable definition for a human-readable description field."]
    #[serde(default)]
    pub description: ::std::string::String,
    #[serde(default, skip_serializing_if = "::std::vec::Vec::is_empty")]
    pub history: ::std::vec::Vec<BondEventType>,
    #[doc = "A canonical enum of all possible relationship types between Threads."]
    pub relationship_type: RelationshipType,
}
impl ::std::convert::From<&BondContentFields> for BondContentFields {
    fn from(value: &BondContentFields) -> Self {
        value.clone()
    }
}
impl BondContentFields {
    pub fn builder() -> builder::BondContentFields {
        Default::default()
    }
}
#[doc = "Represents a significant event that impacted a bond's strength or state."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"$id\": \"https://familiar.dev/schemas/types/social/BondEvent.v1.json\","]
#[doc = "  \"title\": \"Bond Event Type\","]
#[doc = "  \"description\": \"Represents a significant event that impacted a bond's strength or state.\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"impact\","]
#[doc = "    \"moment_id\","]
#[doc = "    \"timestamp\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"impact\": {"]
#[doc = "      \"description\": \"How much this event affected the bond, from -1.0 (negative) to 1.0 (positive).\","]
#[doc = "      \"type\": \"number\","]
#[doc = "      \"maximum\": 1.0,"]
#[doc = "      \"minimum\": -1.0"]
#[doc = "    },"]
#[doc = "    \"moment_id\": {"]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"timestamp\": {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/types/primitives/Timestamp.v1.json\","]
#[doc = "      \"title\": \"Timestamp\","]
#[doc = "      \"description\": \"A canonical definition for an ISO 8601 timestamp with timezone.\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct BondEventType {
    pub impact: f64,
    pub moment_id: ::std::string::String,
    #[doc = "A canonical definition for an ISO 8601 timestamp with timezone."]
    pub timestamp: ::std::string::String,
}
impl ::std::convert::From<&BondEventType> for BondEventType {
    fn from(value: &BondEventType) -> Self {
        value.clone()
    }
}
impl BondEventType {
    pub fn builder() -> builder::BondEventType {
        Default::default()
    }
}
#[doc = "Defines the access control and privacy rules for a Bond and its associated Moments."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"$id\": \"https://familiar.dev/schemas/components/BondPermissions.v1.schema.json\","]
#[doc = "  \"title\": \"Bond Permissions Component\","]
#[doc = "  \"description\": \"Defines the access control and privacy rules for a Bond and its associated Moments.\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"fields\","]
#[doc = "    \"physics_properties\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"fields\": {"]
#[doc = "      \"title\": \"BaseFields\","]
#[doc = "      \"description\": \"A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"patternProperties\": {"]
#[doc = "        \"^[a-z_][a-z0-9_]*$\": {"]
#[doc = "          \"oneOf\": ["]
#[doc = "            {"]
#[doc = "              \"description\": \"A direct reference to a shared definition in SharedDefinitions.schema.json.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"$ref\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"$ref\": {"]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"additionalProperties\": false"]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/base/Field.v1.schema.json\","]
#[doc = "              \"title\": \"Base Field\","]
#[doc = "              \"description\": \"Defines the structure for a single, inline field definition within a component.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"description\","]
#[doc = "                \"type\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"constraints\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "                  \"title\": \"Constraint Definition\","]
#[doc = "                  \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"enum\": {"]
#[doc = "                      \"type\": \"array\","]
#[doc = "                      \"items\": {"]
#[doc = "                        \"type\": \"string\""]
#[doc = "                      }"]
#[doc = "                    },"]
#[doc = "                    \"maxLength\": {"]
#[doc = "                      \"type\": \"integer\""]
#[doc = "                    },"]
#[doc = "                    \"maximum\": {"]
#[doc = "                      \"type\": \"number\""]
#[doc = "                    },"]
#[doc = "                    \"minLength\": {"]
#[doc = "                      \"type\": \"integer\""]
#[doc = "                    },"]
#[doc = "                    \"minimum\": {"]
#[doc = "                      \"type\": \"number\""]
#[doc = "                    },"]
#[doc = "                    \"pattern\": {"]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"additionalProperties\": false"]
#[doc = "                },"]
#[doc = "                \"default_value\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "                  \"title\": \"Any Value\","]
#[doc = "                  \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "                  \"type\": ["]
#[doc = "                    \"string\","]
#[doc = "                    \"number\","]
#[doc = "                    \"integer\","]
#[doc = "                    \"boolean\","]
#[doc = "                    \"object\","]
#[doc = "                    \"array\","]
#[doc = "                    \"null\""]
#[doc = "                  ]"]
#[doc = "                },"]
#[doc = "                \"description\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "                  \"title\": \"Description Field\","]
#[doc = "                  \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "                  \"default\": \"\","]
#[doc = "                  \"type\": \"string\""]
#[doc = "                },"]
#[doc = "                \"type\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "                  \"title\": \"Base Type System\","]
#[doc = "                  \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "                  \"oneOf\": ["]
#[doc = "                    {"]
#[doc = "                      \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "                      \"type\": \"string\","]
#[doc = "                      \"enum\": ["]
#[doc = "                        \"string\","]
#[doc = "                        \"boolean\","]
#[doc = "                        \"integer\","]
#[doc = "                        \"number\","]
#[doc = "                        \"f32\","]
#[doc = "                        \"f64\","]
#[doc = "                        \"i32\","]
#[doc = "                        \"i64\","]
#[doc = "                        \"u32\","]
#[doc = "                        \"u64\","]
#[doc = "                        \"uuid\","]
#[doc = "                        \"date-time\","]
#[doc = "                        \"duration\","]
#[doc = "                        \"object\","]
#[doc = "                        \"array\""]
#[doc = "                      ]"]
#[doc = "                    },"]
#[doc = "                    {"]
#[doc = "                      \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"required\": ["]
#[doc = "                        \"$ref\""]
#[doc = "                      ],"]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"$ref\": {"]
#[doc = "                          \"type\": \"string\""]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"additionalProperties\": false"]
#[doc = "                    }"]
#[doc = "                  ],"]
#[doc = "                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                },"]
#[doc = "                \"ui_label\": {"]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "            }"]
#[doc = "          ]"]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"physics_properties\": {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/base/PhysicsProperties.v1.schema.json\","]
#[doc = "      \"title\": \"Base Physics Properties\","]
#[doc = "      \"description\": \"Defines the common physics-related properties for components and laws.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"engine\","]
#[doc = "        \"is_quantum\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"collapse_sensitive\": {"]
#[doc = "          \"description\": \"Indicates if the object is affected by or triggers quantum collapse.\","]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        \"engine\": {"]
#[doc = "          \"description\": \"The physics engine responsible for this object.\","]
#[doc = "          \"enum\": ["]
#[doc = "            \"quantum\","]
#[doc = "            \"classical\","]
#[doc = "            \"hybrid\""]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        \"is_quantum\": {"]
#[doc = "          \"description\": \"Indicates if the object has quantum properties.\","]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "  \"fields\": {"]
#[doc = "    \"allow_cross_tenant_view\": {"]
#[doc = "      \"default\": false,"]
#[doc = "      \"description\": \"If true, allows linked users from other tenants to view data according to their permissions.\","]
#[doc = "      \"type\": \"boolean\""]
#[doc = "    },"]
#[doc = "    \"min_age_for_viewing\": {"]
#[doc = "      \"default\": 13,"]
#[doc = "      \"description\": \"The minimum age a child Thread must be for this bond's moments to be visible to them. Supports age-aware privacy.\","]
#[doc = "      \"minimum\": 0,"]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"owner_permissions\": {"]
#[doc = "      \"default\": ["]
#[doc = "        \"Read\","]
#[doc = "        \"Write\","]
#[doc = "        \"Delete\","]
#[doc = "        \"Share\""]
#[doc = "      ],"]
#[doc = "      \"description\": \"Permissions for the owner of the bond (the user in the current tenant).\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$id\": \"https://familiar.dev/schemas/types/security/BondPermission.v1.json\","]
#[doc = "        \"description\": \"A canonical enum of permissions related to a Bond.\","]
#[doc = "        \"enum\": ["]
#[doc = "          \"Read\","]
#[doc = "          \"Write\","]
#[doc = "          \"Delete\","]
#[doc = "          \"Share\""]
#[doc = "        ],"]
#[doc = "        \"title\": \"Bond Permission\","]
#[doc = "        \"type\": \"string\""]
#[doc = "      },"]
#[doc = "      \"type\": \"array\""]
#[doc = "    },"]
#[doc = "    \"subject_permissions\": {"]
#[doc = "      \"default\": ["]
#[doc = "        \"Read\","]
#[doc = "        \"Contribute\""]
#[doc = "      ],"]
#[doc = "      \"description\": \"Permissions for the other person in the bond.\","]
#[doc = "      \"items\": {"]
#[doc = "        \"enum\": ["]
#[doc = "          \"Read\","]
#[doc = "          \"Write\","]
#[doc = "          \"Contribute\""]
#[doc = "        ],"]
#[doc = "        \"type\": \"string\""]
#[doc = "      },"]
#[doc = "      \"type\": \"array\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"physics_properties\": {"]
#[doc = "    \"engine\": \"classical\","]
#[doc = "    \"is_quantum\": false"]
#[doc = "  },"]
#[doc = "  \"schema_version\": \"1.0.0\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct BondPermissionsComponent {
    #[doc = "A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition."]
    pub fields: ::std::collections::HashMap<
        BondPermissionsComponentFieldsKey,
        BondPermissionsComponentFieldsValue,
    >,
    pub physics_properties: BasePhysicsProperties,
}
impl ::std::convert::From<&BondPermissionsComponent> for BondPermissionsComponent {
    fn from(value: &BondPermissionsComponent) -> Self {
        value.clone()
    }
}
impl BondPermissionsComponent {
    pub fn builder() -> builder::BondPermissionsComponent {
        Default::default()
    }
}
#[doc = "`BondPermissionsComponentFieldsKey`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"pattern\": \"^[a-z_][a-z0-9_]*$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct BondPermissionsComponentFieldsKey(::std::string::String);
impl ::std::ops::Deref for BondPermissionsComponentFieldsKey {
    type Target = ::std::string::String;
    fn deref(&self) -> &::std::string::String {
        &self.0
    }
}
impl ::std::convert::From<BondPermissionsComponentFieldsKey> for ::std::string::String {
    fn from(value: BondPermissionsComponentFieldsKey) -> Self {
        value.0
    }
}
impl ::std::convert::From<&BondPermissionsComponentFieldsKey>
    for BondPermissionsComponentFieldsKey
{
    fn from(value: &BondPermissionsComponentFieldsKey) -> Self {
        value.clone()
    }
}
impl ::std::str::FromStr for BondPermissionsComponentFieldsKey {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        static PATTERN: ::std::sync::LazyLock<::regress::Regex> =
            ::std::sync::LazyLock::new(|| ::regress::Regex::new("^[a-z_][a-z0-9_]*$").unwrap());
        if (&*PATTERN).find(value).is_none() {
            return Err("doesn't match pattern \"^[a-z_][a-z0-9_]*$\"".into());
        }
        Ok(Self(value.to_string()))
    }
}
impl ::std::convert::TryFrom<&str> for BondPermissionsComponentFieldsKey {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String> for BondPermissionsComponentFieldsKey {
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String> for BondPermissionsComponentFieldsKey {
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl<'de> ::serde::Deserialize<'de> for BondPermissionsComponentFieldsKey {
    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        ::std::string::String::deserialize(deserializer)?
            .parse()
            .map_err(|e: self::error::ConversionError| {
                <D::Error as ::serde::de::Error>::custom(e.to_string())
            })
    }
}
#[doc = "`BondPermissionsComponentFieldsValue`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"description\": \"A direct reference to a shared definition in SharedDefinitions.schema.json.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"$ref\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"$ref\": {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/base/Field.v1.schema.json\","]
#[doc = "      \"title\": \"Base Field\","]
#[doc = "      \"description\": \"Defines the structure for a single, inline field definition within a component.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"description\","]
#[doc = "        \"type\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"constraints\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "          \"title\": \"Constraint Definition\","]
#[doc = "          \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"properties\": {"]
#[doc = "            \"enum\": {"]
#[doc = "              \"type\": \"array\","]
#[doc = "              \"items\": {"]
#[doc = "                \"type\": \"string\""]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"maxLength\": {"]
#[doc = "              \"type\": \"integer\""]
#[doc = "            },"]
#[doc = "            \"maximum\": {"]
#[doc = "              \"type\": \"number\""]
#[doc = "            },"]
#[doc = "            \"minLength\": {"]
#[doc = "              \"type\": \"integer\""]
#[doc = "            },"]
#[doc = "            \"minimum\": {"]
#[doc = "              \"type\": \"number\""]
#[doc = "            },"]
#[doc = "            \"pattern\": {"]
#[doc = "              \"type\": \"string\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        },"]
#[doc = "        \"default_value\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "          \"title\": \"Any Value\","]
#[doc = "          \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "          \"type\": ["]
#[doc = "            \"string\","]
#[doc = "            \"number\","]
#[doc = "            \"integer\","]
#[doc = "            \"boolean\","]
#[doc = "            \"object\","]
#[doc = "            \"array\","]
#[doc = "            \"null\""]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        \"description\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "          \"title\": \"Description Field\","]
#[doc = "          \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "          \"default\": \"\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"type\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "          \"title\": \"Base Type System\","]
#[doc = "          \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "          \"oneOf\": ["]
#[doc = "            {"]
#[doc = "              \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "              \"type\": \"string\","]
#[doc = "              \"enum\": ["]
#[doc = "                \"string\","]
#[doc = "                \"boolean\","]
#[doc = "                \"integer\","]
#[doc = "                \"number\","]
#[doc = "                \"f32\","]
#[doc = "                \"f64\","]
#[doc = "                \"i32\","]
#[doc = "                \"i64\","]
#[doc = "                \"u32\","]
#[doc = "                \"u64\","]
#[doc = "                \"uuid\","]
#[doc = "                \"date-time\","]
#[doc = "                \"duration\","]
#[doc = "                \"object\","]
#[doc = "                \"array\""]
#[doc = "              ]"]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"$ref\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"$ref\": {"]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"additionalProperties\": false"]
#[doc = "            }"]
#[doc = "          ],"]
#[doc = "          \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "        },"]
#[doc = "        \"ui_label\": {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(untagged, deny_unknown_fields)]
pub enum BondPermissionsComponentFieldsValue {
    Variant0 {
        #[serde(rename = "$ref")]
        ref_: ::std::string::String,
    },
    Variant1 {
        #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
        constraints: ::std::option::Option<ConstraintDefinition>,
        #[doc = "Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values."]
        #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
        default_value: ::std::option::Option<::serde_json::Value>,
        #[doc = "A canonical, reusable definition for a human-readable description field."]
        description: ::std::string::String,
        #[doc = "The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema."]
        #[serde(rename = "type")]
        type_: BaseTypeSystem,
        #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
        ui_label: ::std::option::Option<::std::string::String>,
    },
}
impl ::std::convert::From<&Self> for BondPermissionsComponentFieldsValue {
    fn from(value: &BondPermissionsComponentFieldsValue) -> Self {
        value.clone()
    }
}
#[doc = "Configuration that defines the physics model for a Bond (Dynamic or Static)."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"$id\": \"https://familiar.dev/schemas/components/BondPhysicsConfig.v1.schema.json\","]
#[doc = "  \"title\": \"Bond Physics Config Component\","]
#[doc = "  \"description\": \"Configuration that defines the physics model for a Bond (Dynamic or Static).\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"fields\","]
#[doc = "    \"physics_properties\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"fields\": {"]
#[doc = "      \"title\": \"BaseFields\","]
#[doc = "      \"description\": \"A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"patternProperties\": {"]
#[doc = "        \"^[a-z_][a-z0-9_]*$\": {"]
#[doc = "          \"oneOf\": ["]
#[doc = "            {"]
#[doc = "              \"description\": \"A direct reference to a shared definition in SharedDefinitions.schema.json.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"$ref\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"$ref\": {"]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"additionalProperties\": false"]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/base/Field.v1.schema.json\","]
#[doc = "              \"title\": \"Base Field\","]
#[doc = "              \"description\": \"Defines the structure for a single, inline field definition within a component.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"description\","]
#[doc = "                \"type\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"constraints\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "                  \"title\": \"Constraint Definition\","]
#[doc = "                  \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"enum\": {"]
#[doc = "                      \"type\": \"array\","]
#[doc = "                      \"items\": {"]
#[doc = "                        \"type\": \"string\""]
#[doc = "                      }"]
#[doc = "                    },"]
#[doc = "                    \"maxLength\": {"]
#[doc = "                      \"type\": \"integer\""]
#[doc = "                    },"]
#[doc = "                    \"maximum\": {"]
#[doc = "                      \"type\": \"number\""]
#[doc = "                    },"]
#[doc = "                    \"minLength\": {"]
#[doc = "                      \"type\": \"integer\""]
#[doc = "                    },"]
#[doc = "                    \"minimum\": {"]
#[doc = "                      \"type\": \"number\""]
#[doc = "                    },"]
#[doc = "                    \"pattern\": {"]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"additionalProperties\": false"]
#[doc = "                },"]
#[doc = "                \"default_value\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "                  \"title\": \"Any Value\","]
#[doc = "                  \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "                  \"type\": ["]
#[doc = "                    \"string\","]
#[doc = "                    \"number\","]
#[doc = "                    \"integer\","]
#[doc = "                    \"boolean\","]
#[doc = "                    \"object\","]
#[doc = "                    \"array\","]
#[doc = "                    \"null\""]
#[doc = "                  ]"]
#[doc = "                },"]
#[doc = "                \"description\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "                  \"title\": \"Description Field\","]
#[doc = "                  \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "                  \"default\": \"\","]
#[doc = "                  \"type\": \"string\""]
#[doc = "                },"]
#[doc = "                \"type\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "                  \"title\": \"Base Type System\","]
#[doc = "                  \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "                  \"oneOf\": ["]
#[doc = "                    {"]
#[doc = "                      \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "                      \"type\": \"string\","]
#[doc = "                      \"enum\": ["]
#[doc = "                        \"string\","]
#[doc = "                        \"boolean\","]
#[doc = "                        \"integer\","]
#[doc = "                        \"number\","]
#[doc = "                        \"f32\","]
#[doc = "                        \"f64\","]
#[doc = "                        \"i32\","]
#[doc = "                        \"i64\","]
#[doc = "                        \"u32\","]
#[doc = "                        \"u64\","]
#[doc = "                        \"uuid\","]
#[doc = "                        \"date-time\","]
#[doc = "                        \"duration\","]
#[doc = "                        \"object\","]
#[doc = "                        \"array\""]
#[doc = "                      ]"]
#[doc = "                    },"]
#[doc = "                    {"]
#[doc = "                      \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"required\": ["]
#[doc = "                        \"$ref\""]
#[doc = "                      ],"]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"$ref\": {"]
#[doc = "                          \"type\": \"string\""]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"additionalProperties\": false"]
#[doc = "                    }"]
#[doc = "                  ],"]
#[doc = "                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                },"]
#[doc = "                \"ui_label\": {"]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "            }"]
#[doc = "          ]"]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"physics_properties\": {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/base/PhysicsProperties.v1.schema.json\","]
#[doc = "      \"title\": \"Base Physics Properties\","]
#[doc = "      \"description\": \"Defines the common physics-related properties for components and laws.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"engine\","]
#[doc = "        \"is_quantum\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"collapse_sensitive\": {"]
#[doc = "          \"description\": \"Indicates if the object is affected by or triggers quantum collapse.\","]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        \"engine\": {"]
#[doc = "          \"description\": \"The physics engine responsible for this object.\","]
#[doc = "          \"enum\": ["]
#[doc = "            \"quantum\","]
#[doc = "            \"classical\","]
#[doc = "            \"hybrid\""]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        \"is_quantum\": {"]
#[doc = "          \"description\": \"Indicates if the object has quantum properties.\","]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "  \"fields\": {"]
#[doc = "    \"bond_model\": {"]
#[doc = "      \"description\": \"The physics model to apply to this bond.\","]
#[doc = "      \"enum\": ["]
#[doc = "        \"Dynamic\","]
#[doc = "        \"Static\""]
#[doc = "      ],"]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"dynamic_params\": {"]
#[doc = "      \"description\": \"Parameters for the spring-damper model, used only if bond_model is 'Dynamic'.\","]
#[doc = "      \"properties\": {"]
#[doc = "        \"base_damping_coefficient\": {"]
#[doc = "          \"type\": \"number\""]
#[doc = "        },"]
#[doc = "        \"base_spring_constant\": {"]
#[doc = "          \"type\": \"number\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"required\": ["]
#[doc = "        \"base_spring_constant\","]
#[doc = "        \"base_damping_coefficient\""]
#[doc = "      ],"]
#[doc = "      \"title\": \"BondPhysicsConfigDynamicParams\","]
#[doc = "      \"type\": \"object\""]
#[doc = "    },"]
#[doc = "    \"static_params\": {"]
#[doc = "      \"description\": \"Parameters for the associative model, used only if bond_model is 'Static'.\","]
#[doc = "      \"properties\": {"]
#[doc = "        \"consolidation_boost\": {"]
#[doc = "          \"type\": \"number\""]
#[doc = "        },"]
#[doc = "        \"emotional_anchor_strength\": {"]
#[doc = "          \"type\": \"number\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"required\": ["]
#[doc = "        \"consolidation_boost\","]
#[doc = "        \"emotional_anchor_strength\""]
#[doc = "      ],"]
#[doc = "      \"title\": \"BondPhysicsConfigStaticParams\","]
#[doc = "      \"type\": \"object\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"physics_properties\": {"]
#[doc = "    \"engine\": \"classical\","]
#[doc = "    \"is_quantum\": false"]
#[doc = "  },"]
#[doc = "  \"schema_version\": \"1.0.0\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct BondPhysicsConfigComponent {
    #[doc = "A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition."]
    pub fields: ::std::collections::HashMap<
        BondPhysicsConfigComponentFieldsKey,
        BondPhysicsConfigComponentFieldsValue,
    >,
    pub physics_properties: BasePhysicsProperties,
}
impl ::std::convert::From<&BondPhysicsConfigComponent> for BondPhysicsConfigComponent {
    fn from(value: &BondPhysicsConfigComponent) -> Self {
        value.clone()
    }
}
impl BondPhysicsConfigComponent {
    pub fn builder() -> builder::BondPhysicsConfigComponent {
        Default::default()
    }
}
#[doc = "`BondPhysicsConfigComponentFieldsKey`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"pattern\": \"^[a-z_][a-z0-9_]*$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct BondPhysicsConfigComponentFieldsKey(::std::string::String);
impl ::std::ops::Deref for BondPhysicsConfigComponentFieldsKey {
    type Target = ::std::string::String;
    fn deref(&self) -> &::std::string::String {
        &self.0
    }
}
impl ::std::convert::From<BondPhysicsConfigComponentFieldsKey> for ::std::string::String {
    fn from(value: BondPhysicsConfigComponentFieldsKey) -> Self {
        value.0
    }
}
impl ::std::convert::From<&BondPhysicsConfigComponentFieldsKey>
    for BondPhysicsConfigComponentFieldsKey
{
    fn from(value: &BondPhysicsConfigComponentFieldsKey) -> Self {
        value.clone()
    }
}
impl ::std::str::FromStr for BondPhysicsConfigComponentFieldsKey {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        static PATTERN: ::std::sync::LazyLock<::regress::Regex> =
            ::std::sync::LazyLock::new(|| ::regress::Regex::new("^[a-z_][a-z0-9_]*$").unwrap());
        if (&*PATTERN).find(value).is_none() {
            return Err("doesn't match pattern \"^[a-z_][a-z0-9_]*$\"".into());
        }
        Ok(Self(value.to_string()))
    }
}
impl ::std::convert::TryFrom<&str> for BondPhysicsConfigComponentFieldsKey {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String> for BondPhysicsConfigComponentFieldsKey {
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String> for BondPhysicsConfigComponentFieldsKey {
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl<'de> ::serde::Deserialize<'de> for BondPhysicsConfigComponentFieldsKey {
    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        ::std::string::String::deserialize(deserializer)?
            .parse()
            .map_err(|e: self::error::ConversionError| {
                <D::Error as ::serde::de::Error>::custom(e.to_string())
            })
    }
}
#[doc = "`BondPhysicsConfigComponentFieldsValue`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"description\": \"A direct reference to a shared definition in SharedDefinitions.schema.json.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"$ref\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"$ref\": {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/base/Field.v1.schema.json\","]
#[doc = "      \"title\": \"Base Field\","]
#[doc = "      \"description\": \"Defines the structure for a single, inline field definition within a component.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"description\","]
#[doc = "        \"type\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"constraints\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "          \"title\": \"Constraint Definition\","]
#[doc = "          \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"properties\": {"]
#[doc = "            \"enum\": {"]
#[doc = "              \"type\": \"array\","]
#[doc = "              \"items\": {"]
#[doc = "                \"type\": \"string\""]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"maxLength\": {"]
#[doc = "              \"type\": \"integer\""]
#[doc = "            },"]
#[doc = "            \"maximum\": {"]
#[doc = "              \"type\": \"number\""]
#[doc = "            },"]
#[doc = "            \"minLength\": {"]
#[doc = "              \"type\": \"integer\""]
#[doc = "            },"]
#[doc = "            \"minimum\": {"]
#[doc = "              \"type\": \"number\""]
#[doc = "            },"]
#[doc = "            \"pattern\": {"]
#[doc = "              \"type\": \"string\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        },"]
#[doc = "        \"default_value\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "          \"title\": \"Any Value\","]
#[doc = "          \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "          \"type\": ["]
#[doc = "            \"string\","]
#[doc = "            \"number\","]
#[doc = "            \"integer\","]
#[doc = "            \"boolean\","]
#[doc = "            \"object\","]
#[doc = "            \"array\","]
#[doc = "            \"null\""]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        \"description\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "          \"title\": \"Description Field\","]
#[doc = "          \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "          \"default\": \"\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"type\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "          \"title\": \"Base Type System\","]
#[doc = "          \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "          \"oneOf\": ["]
#[doc = "            {"]
#[doc = "              \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "              \"type\": \"string\","]
#[doc = "              \"enum\": ["]
#[doc = "                \"string\","]
#[doc = "                \"boolean\","]
#[doc = "                \"integer\","]
#[doc = "                \"number\","]
#[doc = "                \"f32\","]
#[doc = "                \"f64\","]
#[doc = "                \"i32\","]
#[doc = "                \"i64\","]
#[doc = "                \"u32\","]
#[doc = "                \"u64\","]
#[doc = "                \"uuid\","]
#[doc = "                \"date-time\","]
#[doc = "                \"duration\","]
#[doc = "                \"object\","]
#[doc = "                \"array\""]
#[doc = "              ]"]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"$ref\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"$ref\": {"]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"additionalProperties\": false"]
#[doc = "            }"]
#[doc = "          ],"]
#[doc = "          \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "        },"]
#[doc = "        \"ui_label\": {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(untagged, deny_unknown_fields)]
pub enum BondPhysicsConfigComponentFieldsValue {
    Variant0 {
        #[serde(rename = "$ref")]
        ref_: ::std::string::String,
    },
    Variant1 {
        #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
        constraints: ::std::option::Option<ConstraintDefinition>,
        #[doc = "Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values."]
        #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
        default_value: ::std::option::Option<::serde_json::Value>,
        #[doc = "A canonical, reusable definition for a human-readable description field."]
        description: ::std::string::String,
        #[doc = "The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema."]
        #[serde(rename = "type")]
        type_: BaseTypeSystem,
        #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
        ui_label: ::std::option::Option<::std::string::String>,
    },
}
impl ::std::convert::From<&Self> for BondPhysicsConfigComponentFieldsValue {
    fn from(value: &BondPhysicsConfigComponentFieldsValue) -> Self {
        value.clone()
    }
}
#[doc = "`BondPhysicsState`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"BondPhysicsState\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"tension\","]
#[doc = "    \"universal\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"tension\": {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/components/BondTension.v1.schema.json\","]
#[doc = "      \"title\": \"Bond Tension Component\","]
#[doc = "      \"description\": \"Models the classical physics of a relationship Bond, including its strength, tension, and resonance properties. This is managed by the Particular engine.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"fields\","]
#[doc = "        \"physics_properties\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"fields\": {"]
#[doc = "          \"title\": \"BaseFields\","]
#[doc = "          \"description\": \"A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"patternProperties\": {"]
#[doc = "            \"^[a-z_][a-z0-9_]*$\": {"]
#[doc = "              \"oneOf\": ["]
#[doc = "                {"]
#[doc = "                  \"description\": \"A direct reference to a shared definition in SharedDefinitions.schema.json.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"$ref\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"$ref\": {"]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"additionalProperties\": false"]
#[doc = "                },"]
#[doc = "                {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/base/Field.v1.schema.json\","]
#[doc = "                  \"title\": \"Base Field\","]
#[doc = "                  \"description\": \"Defines the structure for a single, inline field definition within a component.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"description\","]
#[doc = "                    \"type\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"constraints\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "                      \"title\": \"Constraint Definition\","]
#[doc = "                      \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"enum\": {"]
#[doc = "                          \"type\": \"array\","]
#[doc = "                          \"items\": {"]
#[doc = "                            \"type\": \"string\""]
#[doc = "                          }"]
#[doc = "                        },"]
#[doc = "                        \"maxLength\": {"]
#[doc = "                          \"type\": \"integer\""]
#[doc = "                        },"]
#[doc = "                        \"maximum\": {"]
#[doc = "                          \"type\": \"number\""]
#[doc = "                        },"]
#[doc = "                        \"minLength\": {"]
#[doc = "                          \"type\": \"integer\""]
#[doc = "                        },"]
#[doc = "                        \"minimum\": {"]
#[doc = "                          \"type\": \"number\""]
#[doc = "                        },"]
#[doc = "                        \"pattern\": {"]
#[doc = "                          \"type\": \"string\""]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"additionalProperties\": false"]
#[doc = "                    },"]
#[doc = "                    \"default_value\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "                      \"title\": \"Any Value\","]
#[doc = "                      \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "                      \"type\": ["]
#[doc = "                        \"string\","]
#[doc = "                        \"number\","]
#[doc = "                        \"integer\","]
#[doc = "                        \"boolean\","]
#[doc = "                        \"object\","]
#[doc = "                        \"array\","]
#[doc = "                        \"null\""]
#[doc = "                      ]"]
#[doc = "                    },"]
#[doc = "                    \"description\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "                      \"title\": \"Description Field\","]
#[doc = "                      \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "                      \"default\": \"\","]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    },"]
#[doc = "                    \"type\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "                      \"title\": \"Base Type System\","]
#[doc = "                      \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "                      \"oneOf\": ["]
#[doc = "                        {"]
#[doc = "                          \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "                          \"type\": \"string\","]
#[doc = "                          \"enum\": ["]
#[doc = "                            \"string\","]
#[doc = "                            \"boolean\","]
#[doc = "                            \"integer\","]
#[doc = "                            \"number\","]
#[doc = "                            \"f32\","]
#[doc = "                            \"f64\","]
#[doc = "                            \"i32\","]
#[doc = "                            \"i64\","]
#[doc = "                            \"u32\","]
#[doc = "                            \"u64\","]
#[doc = "                            \"uuid\","]
#[doc = "                            \"date-time\","]
#[doc = "                            \"duration\","]
#[doc = "                            \"object\","]
#[doc = "                            \"array\""]
#[doc = "                          ]"]
#[doc = "                        },"]
#[doc = "                        {"]
#[doc = "                          \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "                          \"type\": \"object\","]
#[doc = "                          \"required\": ["]
#[doc = "                            \"$ref\""]
#[doc = "                          ],"]
#[doc = "                          \"properties\": {"]
#[doc = "                            \"$ref\": {"]
#[doc = "                              \"type\": \"string\""]
#[doc = "                            }"]
#[doc = "                          },"]
#[doc = "                          \"additionalProperties\": false"]
#[doc = "                        }"]
#[doc = "                      ],"]
#[doc = "                      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                    },"]
#[doc = "                    \"ui_label\": {"]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                }"]
#[doc = "              ]"]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        },"]
#[doc = "        \"physics_properties\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/base/PhysicsProperties.v1.schema.json\","]
#[doc = "          \"title\": \"Base Physics Properties\","]
#[doc = "          \"description\": \"Defines the common physics-related properties for components and laws.\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"required\": ["]
#[doc = "            \"engine\","]
#[doc = "            \"is_quantum\""]
#[doc = "          ],"]
#[doc = "          \"properties\": {"]
#[doc = "            \"collapse_sensitive\": {"]
#[doc = "              \"description\": \"Indicates if the object is affected by or triggers quantum collapse.\","]
#[doc = "              \"type\": \"boolean\""]
#[doc = "            },"]
#[doc = "            \"engine\": {"]
#[doc = "              \"description\": \"The physics engine responsible for this object.\","]
#[doc = "              \"enum\": ["]
#[doc = "                \"quantum\","]
#[doc = "                \"classical\","]
#[doc = "                \"hybrid\""]
#[doc = "              ]"]
#[doc = "            },"]
#[doc = "            \"is_quantum\": {"]
#[doc = "              \"description\": \"Indicates if the object has quantum properties.\","]
#[doc = "              \"type\": \"boolean\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "      \"fields\": {"]
#[doc = "        \"bond_strength\": {"]
#[doc = "          \"constraints\": {"]
#[doc = "            \"maximum\": 1.0,"]
#[doc = "            \"minimum\": 0.0"]
#[doc = "          },"]
#[doc = "          \"default\": 0.5,"]
#[doc = "          \"description\": \"The overall strength or health of the bond.\","]
#[doc = "          \"format\": \"double\","]
#[doc = "          \"type\": \"number\","]
#[doc = "          \"x-python-type\": \"float\","]
#[doc = "          \"x-rust-type\": \"f64\""]
#[doc = "        },"]
#[doc = "        \"damping_coefficient\": {"]
#[doc = "          \"default\": 0.5,"]
#[doc = "          \"description\": \"The 'inertia' of the bond, representing how quickly it returns to equilibrium after a perturbation.\","]
#[doc = "          \"format\": \"double\","]
#[doc = "          \"type\": \"number\","]
#[doc = "          \"x-python-type\": \"float\","]
#[doc = "          \"x-rust-type\": \"f64\""]
#[doc = "        },"]
#[doc = "        \"resonance_phase\": {"]
#[doc = "          \"default\": 0.0,"]
#[doc = "          \"description\": \"The phase angle for resonance calculations with other bonds.\","]
#[doc = "          \"format\": \"double\","]
#[doc = "          \"type\": \"number\","]
#[doc = "          \"x-python-type\": \"float\","]
#[doc = "          \"x-rust-type\": \"f64\""]
#[doc = "        },"]
#[doc = "        \"spring_constant\": {"]
#[doc = "          \"default\": 10.0,"]
#[doc = "          \"description\": \"The 'stiffness' of the bond, representing its resistance to change.\","]
#[doc = "          \"format\": \"double\","]
#[doc = "          \"type\": \"number\","]
#[doc = "          \"x-python-type\": \"float\","]
#[doc = "          \"x-rust-type\": \"f64\""]
#[doc = "        },"]
#[doc = "        \"torsional_stress\": {"]
#[doc = "          \"default\": 0.0,"]
#[doc = "          \"description\": \"The cognitive dissonance or strain on the bond. Can be positive (creative tension) or negative (draining conflict).\","]
#[doc = "          \"format\": \"double\","]
#[doc = "          \"type\": \"number\","]
#[doc = "          \"x-python-type\": \"float\","]
#[doc = "          \"x-rust-type\": \"f64\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"physics_properties\": {"]
#[doc = "        \"collapse_sensitive\": false,"]
#[doc = "        \"engine\": \"classical\","]
#[doc = "        \"is_quantum\": false"]
#[doc = "      },"]
#[doc = "      \"schema_version\": \"1.0.0\""]
#[doc = "    },"]
#[doc = "    \"universal\": {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/components/UniversalPhysicsState.v1.schema.json\","]
#[doc = "      \"title\": \"Universal Physics State Component\","]
#[doc = "      \"description\": \"The transient, mutable physics state of an entity.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"properties\": {"]
#[doc = "        \"fields\": {"]
#[doc = "          \"title\": \"UniversalPhysicsStateFields\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"required\": ["]
#[doc = "            \"cognitive_perspective\","]
#[doc = "            \"consolidation_rate\","]
#[doc = "            \"decay_rate\","]
#[doc = "            \"energy\","]
#[doc = "            \"entanglement_strength\","]
#[doc = "            \"momentum\","]
#[doc = "            \"quantum_coherence\""]
#[doc = "          ],"]
#[doc = "          \"properties\": {"]
#[doc = "            \"cognitive_perspective\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/fields/CognitivePerspective.v1.schema.json\","]
#[doc = "              \"title\": \"Cognitive Perspective Field\","]
#[doc = "              \"description\": \"The intrinsic 'spin' or 'flavor' of the entity, which generates cognitive dissonance (torsion).\","]
#[doc = "              \"ui_label\": \"Cognitive Perspective\""]
#[doc = "            },"]
#[doc = "            \"consolidation_rate\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/snippets/fields/ConsolidationRate.v1.json\","]
#[doc = "              \"title\": \"Consolidation Rate Field\","]
#[doc = "              \"description\": \"The base rate of memory consolidation for an entity, before multipliers are applied. Represents how quickly an unstable memory becomes stable.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"value\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"value\": {"]
#[doc = "                  \"default\": 0.0,"]
#[doc = "                  \"type\": \"number\","]
#[doc = "                  \"format\": \"double\","]
#[doc = "                  \"maximum\": 1.0,"]
#[doc = "                  \"minimum\": 0.0,"]
#[doc = "                  \"x-python-type\": \"float\","]
#[doc = "                  \"x-rust-type\": \"f64\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"additionalProperties\": false"]
#[doc = "            },"]
#[doc = "            \"decay_rate\": {"]
#[doc = "              \"description\": \"The base rate of energy or coherence decay for an entity, before multipliers are applied.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"value\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"value\": {"]
#[doc = "                  \"default\": 0.01,"]
#[doc = "                  \"type\": \"number\","]
#[doc = "                  \"format\": \"double\","]
#[doc = "                  \"x-python-type\": \"float\","]
#[doc = "                  \"x-rust-type\": \"f64\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"additionalProperties\": false"]
#[doc = "            },"]
#[doc = "            \"energy\": {"]
#[doc = "              \"description\": \"The current energy level of an entity.\","]
#[doc = "              \"default\": 0.1,"]
#[doc = "              \"type\": \"number\""]
#[doc = "            },"]
#[doc = "            \"entanglement_strength\": {"]
#[doc = "              \"description\": \"The overall entanglement strength of this entity with others. Null for classical entities.\","]
#[doc = "              \"default\": null,"]
#[doc = "              \"type\": ["]
#[doc = "                \"number\","]
#[doc = "                \"null\""]
#[doc = "              ],"]
#[doc = "              \"maximum\": 1.0,"]
#[doc = "              \"minimum\": 0.0"]
#[doc = "            },"]
#[doc = "            \"momentum\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/types/physics/Vec6.v1.json\","]
#[doc = "              \"title\": \"6D Physics Vector\","]
#[doc = "              \"description\": \"A reusable data type for a vector of six f64 numbers, used for momentum and forces in the 6 spatial dimensions of the manifold.\","]
#[doc = "              \"type\": \"array\","]
#[doc = "              \"items\": {"]
#[doc = "                \"type\": \"number\""]
#[doc = "              },"]
#[doc = "              \"maxItems\": 6,"]
#[doc = "              \"minItems\": 6"]
#[doc = "            },"]
#[doc = "            \"quantum_coherence\": {"]
#[doc = "              \"description\": \"The quantum coherence level of the entity, representing its degree of superposition. Null for classical entities.\","]
#[doc = "              \"default\": null,"]
#[doc = "              \"type\": ["]
#[doc = "                \"number\","]
#[doc = "                \"null\""]
#[doc = "              ],"]
#[doc = "              \"maximum\": 1.0,"]
#[doc = "              \"minimum\": 0.0"]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "      \"schema_version\": \"3.0.0\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct BondPhysicsState {
    pub tension: BondTensionComponent,
    pub universal: UniversalPhysicsStateComponent,
}
impl ::std::convert::From<&BondPhysicsState> for BondPhysicsState {
    fn from(value: &BondPhysicsState) -> Self {
        value.clone()
    }
}
impl BondPhysicsState {
    pub fn builder() -> builder::BondPhysicsState {
        Default::default()
    }
}
#[doc = "Models the classical physics of a relationship Bond, including its strength, tension, and resonance properties. This is managed by the Particular engine."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"$id\": \"https://familiar.dev/schemas/components/BondTension.v1.schema.json\","]
#[doc = "  \"title\": \"Bond Tension Component\","]
#[doc = "  \"description\": \"Models the classical physics of a relationship Bond, including its strength, tension, and resonance properties. This is managed by the Particular engine.\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"fields\","]
#[doc = "    \"physics_properties\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"fields\": {"]
#[doc = "      \"title\": \"BaseFields\","]
#[doc = "      \"description\": \"A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"patternProperties\": {"]
#[doc = "        \"^[a-z_][a-z0-9_]*$\": {"]
#[doc = "          \"oneOf\": ["]
#[doc = "            {"]
#[doc = "              \"description\": \"A direct reference to a shared definition in SharedDefinitions.schema.json.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"$ref\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"$ref\": {"]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"additionalProperties\": false"]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/base/Field.v1.schema.json\","]
#[doc = "              \"title\": \"Base Field\","]
#[doc = "              \"description\": \"Defines the structure for a single, inline field definition within a component.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"description\","]
#[doc = "                \"type\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"constraints\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "                  \"title\": \"Constraint Definition\","]
#[doc = "                  \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"enum\": {"]
#[doc = "                      \"type\": \"array\","]
#[doc = "                      \"items\": {"]
#[doc = "                        \"type\": \"string\""]
#[doc = "                      }"]
#[doc = "                    },"]
#[doc = "                    \"maxLength\": {"]
#[doc = "                      \"type\": \"integer\""]
#[doc = "                    },"]
#[doc = "                    \"maximum\": {"]
#[doc = "                      \"type\": \"number\""]
#[doc = "                    },"]
#[doc = "                    \"minLength\": {"]
#[doc = "                      \"type\": \"integer\""]
#[doc = "                    },"]
#[doc = "                    \"minimum\": {"]
#[doc = "                      \"type\": \"number\""]
#[doc = "                    },"]
#[doc = "                    \"pattern\": {"]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"additionalProperties\": false"]
#[doc = "                },"]
#[doc = "                \"default_value\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "                  \"title\": \"Any Value\","]
#[doc = "                  \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "                  \"type\": ["]
#[doc = "                    \"string\","]
#[doc = "                    \"number\","]
#[doc = "                    \"integer\","]
#[doc = "                    \"boolean\","]
#[doc = "                    \"object\","]
#[doc = "                    \"array\","]
#[doc = "                    \"null\""]
#[doc = "                  ]"]
#[doc = "                },"]
#[doc = "                \"description\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "                  \"title\": \"Description Field\","]
#[doc = "                  \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "                  \"default\": \"\","]
#[doc = "                  \"type\": \"string\""]
#[doc = "                },"]
#[doc = "                \"type\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "                  \"title\": \"Base Type System\","]
#[doc = "                  \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "                  \"oneOf\": ["]
#[doc = "                    {"]
#[doc = "                      \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "                      \"type\": \"string\","]
#[doc = "                      \"enum\": ["]
#[doc = "                        \"string\","]
#[doc = "                        \"boolean\","]
#[doc = "                        \"integer\","]
#[doc = "                        \"number\","]
#[doc = "                        \"f32\","]
#[doc = "                        \"f64\","]
#[doc = "                        \"i32\","]
#[doc = "                        \"i64\","]
#[doc = "                        \"u32\","]
#[doc = "                        \"u64\","]
#[doc = "                        \"uuid\","]
#[doc = "                        \"date-time\","]
#[doc = "                        \"duration\","]
#[doc = "                        \"object\","]
#[doc = "                        \"array\""]
#[doc = "                      ]"]
#[doc = "                    },"]
#[doc = "                    {"]
#[doc = "                      \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"required\": ["]
#[doc = "                        \"$ref\""]
#[doc = "                      ],"]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"$ref\": {"]
#[doc = "                          \"type\": \"string\""]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"additionalProperties\": false"]
#[doc = "                    }"]
#[doc = "                  ],"]
#[doc = "                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                },"]
#[doc = "                \"ui_label\": {"]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "            }"]
#[doc = "          ]"]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"physics_properties\": {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/base/PhysicsProperties.v1.schema.json\","]
#[doc = "      \"title\": \"Base Physics Properties\","]
#[doc = "      \"description\": \"Defines the common physics-related properties for components and laws.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"engine\","]
#[doc = "        \"is_quantum\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"collapse_sensitive\": {"]
#[doc = "          \"description\": \"Indicates if the object is affected by or triggers quantum collapse.\","]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        \"engine\": {"]
#[doc = "          \"description\": \"The physics engine responsible for this object.\","]
#[doc = "          \"enum\": ["]
#[doc = "            \"quantum\","]
#[doc = "            \"classical\","]
#[doc = "            \"hybrid\""]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        \"is_quantum\": {"]
#[doc = "          \"description\": \"Indicates if the object has quantum properties.\","]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "  \"fields\": {"]
#[doc = "    \"bond_strength\": {"]
#[doc = "      \"constraints\": {"]
#[doc = "        \"maximum\": 1.0,"]
#[doc = "        \"minimum\": 0.0"]
#[doc = "      },"]
#[doc = "      \"default\": 0.5,"]
#[doc = "      \"description\": \"The overall strength or health of the bond.\","]
#[doc = "      \"format\": \"double\","]
#[doc = "      \"type\": \"number\","]
#[doc = "      \"x-python-type\": \"float\","]
#[doc = "      \"x-rust-type\": \"f64\""]
#[doc = "    },"]
#[doc = "    \"damping_coefficient\": {"]
#[doc = "      \"default\": 0.5,"]
#[doc = "      \"description\": \"The 'inertia' of the bond, representing how quickly it returns to equilibrium after a perturbation.\","]
#[doc = "      \"format\": \"double\","]
#[doc = "      \"type\": \"number\","]
#[doc = "      \"x-python-type\": \"float\","]
#[doc = "      \"x-rust-type\": \"f64\""]
#[doc = "    },"]
#[doc = "    \"resonance_phase\": {"]
#[doc = "      \"default\": 0.0,"]
#[doc = "      \"description\": \"The phase angle for resonance calculations with other bonds.\","]
#[doc = "      \"format\": \"double\","]
#[doc = "      \"type\": \"number\","]
#[doc = "      \"x-python-type\": \"float\","]
#[doc = "      \"x-rust-type\": \"f64\""]
#[doc = "    },"]
#[doc = "    \"spring_constant\": {"]
#[doc = "      \"default\": 10.0,"]
#[doc = "      \"description\": \"The 'stiffness' of the bond, representing its resistance to change.\","]
#[doc = "      \"format\": \"double\","]
#[doc = "      \"type\": \"number\","]
#[doc = "      \"x-python-type\": \"float\","]
#[doc = "      \"x-rust-type\": \"f64\""]
#[doc = "    },"]
#[doc = "    \"torsional_stress\": {"]
#[doc = "      \"default\": 0.0,"]
#[doc = "      \"description\": \"The cognitive dissonance or strain on the bond. Can be positive (creative tension) or negative (draining conflict).\","]
#[doc = "      \"format\": \"double\","]
#[doc = "      \"type\": \"number\","]
#[doc = "      \"x-python-type\": \"float\","]
#[doc = "      \"x-rust-type\": \"f64\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"physics_properties\": {"]
#[doc = "    \"collapse_sensitive\": false,"]
#[doc = "    \"engine\": \"classical\","]
#[doc = "    \"is_quantum\": false"]
#[doc = "  },"]
#[doc = "  \"schema_version\": \"1.0.0\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct BondTensionComponent {
    #[doc = "A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition."]
    pub fields:
        ::std::collections::HashMap<BondTensionComponentFieldsKey, BondTensionComponentFieldsValue>,
    pub physics_properties: BasePhysicsProperties,
}
impl ::std::convert::From<&BondTensionComponent> for BondTensionComponent {
    fn from(value: &BondTensionComponent) -> Self {
        value.clone()
    }
}
impl BondTensionComponent {
    pub fn builder() -> builder::BondTensionComponent {
        Default::default()
    }
}
#[doc = "`BondTensionComponentFieldsKey`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"pattern\": \"^[a-z_][a-z0-9_]*$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct BondTensionComponentFieldsKey(::std::string::String);
impl ::std::ops::Deref for BondTensionComponentFieldsKey {
    type Target = ::std::string::String;
    fn deref(&self) -> &::std::string::String {
        &self.0
    }
}
impl ::std::convert::From<BondTensionComponentFieldsKey> for ::std::string::String {
    fn from(value: BondTensionComponentFieldsKey) -> Self {
        value.0
    }
}
impl ::std::convert::From<&BondTensionComponentFieldsKey> for BondTensionComponentFieldsKey {
    fn from(value: &BondTensionComponentFieldsKey) -> Self {
        value.clone()
    }
}
impl ::std::str::FromStr for BondTensionComponentFieldsKey {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        static PATTERN: ::std::sync::LazyLock<::regress::Regex> =
            ::std::sync::LazyLock::new(|| ::regress::Regex::new("^[a-z_][a-z0-9_]*$").unwrap());
        if (&*PATTERN).find(value).is_none() {
            return Err("doesn't match pattern \"^[a-z_][a-z0-9_]*$\"".into());
        }
        Ok(Self(value.to_string()))
    }
}
impl ::std::convert::TryFrom<&str> for BondTensionComponentFieldsKey {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String> for BondTensionComponentFieldsKey {
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String> for BondTensionComponentFieldsKey {
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl<'de> ::serde::Deserialize<'de> for BondTensionComponentFieldsKey {
    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        ::std::string::String::deserialize(deserializer)?
            .parse()
            .map_err(|e: self::error::ConversionError| {
                <D::Error as ::serde::de::Error>::custom(e.to_string())
            })
    }
}
#[doc = "`BondTensionComponentFieldsValue`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"description\": \"A direct reference to a shared definition in SharedDefinitions.schema.json.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"$ref\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"$ref\": {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/base/Field.v1.schema.json\","]
#[doc = "      \"title\": \"Base Field\","]
#[doc = "      \"description\": \"Defines the structure for a single, inline field definition within a component.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"description\","]
#[doc = "        \"type\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"constraints\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "          \"title\": \"Constraint Definition\","]
#[doc = "          \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"properties\": {"]
#[doc = "            \"enum\": {"]
#[doc = "              \"type\": \"array\","]
#[doc = "              \"items\": {"]
#[doc = "                \"type\": \"string\""]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"maxLength\": {"]
#[doc = "              \"type\": \"integer\""]
#[doc = "            },"]
#[doc = "            \"maximum\": {"]
#[doc = "              \"type\": \"number\""]
#[doc = "            },"]
#[doc = "            \"minLength\": {"]
#[doc = "              \"type\": \"integer\""]
#[doc = "            },"]
#[doc = "            \"minimum\": {"]
#[doc = "              \"type\": \"number\""]
#[doc = "            },"]
#[doc = "            \"pattern\": {"]
#[doc = "              \"type\": \"string\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        },"]
#[doc = "        \"default_value\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "          \"title\": \"Any Value\","]
#[doc = "          \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "          \"type\": ["]
#[doc = "            \"string\","]
#[doc = "            \"number\","]
#[doc = "            \"integer\","]
#[doc = "            \"boolean\","]
#[doc = "            \"object\","]
#[doc = "            \"array\","]
#[doc = "            \"null\""]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        \"description\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "          \"title\": \"Description Field\","]
#[doc = "          \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "          \"default\": \"\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"type\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "          \"title\": \"Base Type System\","]
#[doc = "          \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "          \"oneOf\": ["]
#[doc = "            {"]
#[doc = "              \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "              \"type\": \"string\","]
#[doc = "              \"enum\": ["]
#[doc = "                \"string\","]
#[doc = "                \"boolean\","]
#[doc = "                \"integer\","]
#[doc = "                \"number\","]
#[doc = "                \"f32\","]
#[doc = "                \"f64\","]
#[doc = "                \"i32\","]
#[doc = "                \"i64\","]
#[doc = "                \"u32\","]
#[doc = "                \"u64\","]
#[doc = "                \"uuid\","]
#[doc = "                \"date-time\","]
#[doc = "                \"duration\","]
#[doc = "                \"object\","]
#[doc = "                \"array\""]
#[doc = "              ]"]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"$ref\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"$ref\": {"]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"additionalProperties\": false"]
#[doc = "            }"]
#[doc = "          ],"]
#[doc = "          \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "        },"]
#[doc = "        \"ui_label\": {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(untagged, deny_unknown_fields)]
pub enum BondTensionComponentFieldsValue {
    Variant0 {
        #[serde(rename = "$ref")]
        ref_: ::std::string::String,
    },
    Variant1 {
        #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
        constraints: ::std::option::Option<ConstraintDefinition>,
        #[doc = "Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values."]
        #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
        default_value: ::std::option::Option<::serde_json::Value>,
        #[doc = "A canonical, reusable definition for a human-readable description field."]
        description: ::std::string::String,
        #[doc = "The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema."]
        #[serde(rename = "type")]
        type_: BaseTypeSystem,
        #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
        ui_label: ::std::option::Option<::std::string::String>,
    },
}
impl ::std::convert::From<&Self> for BondTensionComponentFieldsValue {
    fn from(value: &BondTensionComponentFieldsValue) -> Self {
        value.clone()
    }
}
#[doc = "Defines the innate 'personality' or temperament of a Thread."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"$id\": \"https://familiar.dev/schemas/components/CognitiveBaseline.v1.schema.json\","]
#[doc = "  \"title\": \"Cognitive Baseline Component\","]
#[doc = "  \"description\": \"Defines the innate 'personality' or temperament of a Thread.\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"fields\","]
#[doc = "    \"physics_properties\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"fields\": {"]
#[doc = "      \"title\": \"BaseFields\","]
#[doc = "      \"description\": \"A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"patternProperties\": {"]
#[doc = "        \"^[a-z_][a-z0-9_]*$\": {"]
#[doc = "          \"oneOf\": ["]
#[doc = "            {"]
#[doc = "              \"description\": \"A direct reference to a shared definition in SharedDefinitions.schema.json.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"$ref\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"$ref\": {"]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"additionalProperties\": false"]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/base/Field.v1.schema.json\","]
#[doc = "              \"title\": \"Base Field\","]
#[doc = "              \"description\": \"Defines the structure for a single, inline field definition within a component.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"description\","]
#[doc = "                \"type\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"constraints\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "                  \"title\": \"Constraint Definition\","]
#[doc = "                  \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"enum\": {"]
#[doc = "                      \"type\": \"array\","]
#[doc = "                      \"items\": {"]
#[doc = "                        \"type\": \"string\""]
#[doc = "                      }"]
#[doc = "                    },"]
#[doc = "                    \"maxLength\": {"]
#[doc = "                      \"type\": \"integer\""]
#[doc = "                    },"]
#[doc = "                    \"maximum\": {"]
#[doc = "                      \"type\": \"number\""]
#[doc = "                    },"]
#[doc = "                    \"minLength\": {"]
#[doc = "                      \"type\": \"integer\""]
#[doc = "                    },"]
#[doc = "                    \"minimum\": {"]
#[doc = "                      \"type\": \"number\""]
#[doc = "                    },"]
#[doc = "                    \"pattern\": {"]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"additionalProperties\": false"]
#[doc = "                },"]
#[doc = "                \"default_value\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "                  \"title\": \"Any Value\","]
#[doc = "                  \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "                  \"type\": ["]
#[doc = "                    \"string\","]
#[doc = "                    \"number\","]
#[doc = "                    \"integer\","]
#[doc = "                    \"boolean\","]
#[doc = "                    \"object\","]
#[doc = "                    \"array\","]
#[doc = "                    \"null\""]
#[doc = "                  ]"]
#[doc = "                },"]
#[doc = "                \"description\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "                  \"title\": \"Description Field\","]
#[doc = "                  \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "                  \"default\": \"\","]
#[doc = "                  \"type\": \"string\""]
#[doc = "                },"]
#[doc = "                \"type\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "                  \"title\": \"Base Type System\","]
#[doc = "                  \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "                  \"oneOf\": ["]
#[doc = "                    {"]
#[doc = "                      \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "                      \"type\": \"string\","]
#[doc = "                      \"enum\": ["]
#[doc = "                        \"string\","]
#[doc = "                        \"boolean\","]
#[doc = "                        \"integer\","]
#[doc = "                        \"number\","]
#[doc = "                        \"f32\","]
#[doc = "                        \"f64\","]
#[doc = "                        \"i32\","]
#[doc = "                        \"i64\","]
#[doc = "                        \"u32\","]
#[doc = "                        \"u64\","]
#[doc = "                        \"uuid\","]
#[doc = "                        \"date-time\","]
#[doc = "                        \"duration\","]
#[doc = "                        \"object\","]
#[doc = "                        \"array\""]
#[doc = "                      ]"]
#[doc = "                    },"]
#[doc = "                    {"]
#[doc = "                      \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"required\": ["]
#[doc = "                        \"$ref\""]
#[doc = "                      ],"]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"$ref\": {"]
#[doc = "                          \"type\": \"string\""]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"additionalProperties\": false"]
#[doc = "                    }"]
#[doc = "                  ],"]
#[doc = "                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                },"]
#[doc = "                \"ui_label\": {"]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "            }"]
#[doc = "          ]"]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"physics_properties\": {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/base/PhysicsProperties.v1.schema.json\","]
#[doc = "      \"title\": \"Base Physics Properties\","]
#[doc = "      \"description\": \"Defines the common physics-related properties for components and laws.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"engine\","]
#[doc = "        \"is_quantum\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"collapse_sensitive\": {"]
#[doc = "          \"description\": \"Indicates if the object is affected by or triggers quantum collapse.\","]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        \"engine\": {"]
#[doc = "          \"description\": \"The physics engine responsible for this object.\","]
#[doc = "          \"enum\": ["]
#[doc = "            \"quantum\","]
#[doc = "            \"classical\","]
#[doc = "            \"hybrid\""]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        \"is_quantum\": {"]
#[doc = "          \"description\": \"Indicates if the object has quantum properties.\","]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "  \"fields\": {"]
#[doc = "    \"baseline\": {"]
#[doc = "      \"description\": \"Defines the innate 'personality' or temperament of a Thread, modulating its physics interactions.\","]
#[doc = "      \"properties\": {"]
#[doc = "        \"bond_damping_factor\": {"]
#[doc = "          \"description\": \"How resistant their bonds are to change. (UI Label: Relationship Stability)\","]
#[doc = "          \"maximum\": 2.0,"]
#[doc = "          \"minimum\": 0.5,"]
#[doc = "          \"type\": \"number\""]
#[doc = "        },"]
#[doc = "        \"consolidation_rate_modifier\": {"]
#[doc = "          \"description\": \"How quickly their memories become stable. (UI Label: Memory Consolidation)\","]
#[doc = "          \"maximum\": 1.5,"]
#[doc = "          \"minimum\": 0.8,"]
#[doc = "          \"type\": \"number\""]
#[doc = "        },"]
#[doc = "        \"emotional_volatility\": {"]
#[doc = "          \"description\": \"How strongly emotional events affect this person. (UI Label: Emotional Reactivity)\","]
#[doc = "          \"maximum\": 2.0,"]
#[doc = "          \"minimum\": 0.5,"]
#[doc = "          \"type\": \"number\""]
#[doc = "        },"]
#[doc = "        \"exploration_bias\": {"]
#[doc = "          \"description\": \"Tendency for creative, associative thinking. (UI Label: Openness to Experience)\","]
#[doc = "          \"maximum\": 1.3,"]
#[doc = "          \"minimum\": 0.7,"]
#[doc = "          \"type\": \"number\""]
#[doc = "        },"]
#[doc = "        \"social_energy_factor\": {"]
#[doc = "          \"description\": \"How energized they are by social interactions. (UI Label: Social Energy)\","]
#[doc = "          \"maximum\": 1.2,"]
#[doc = "          \"minimum\": 0.8,"]
#[doc = "          \"type\": \"number\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"required\": ["]
#[doc = "        \"emotional_volatility\","]
#[doc = "        \"social_energy_factor\","]
#[doc = "        \"consolidation_rate_modifier\","]
#[doc = "        \"bond_damping_factor\","]
#[doc = "        \"exploration_bias\""]
#[doc = "      ],"]
#[doc = "      \"type\": \"object\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"physics_properties\": {"]
#[doc = "    \"engine\": \"classical\","]
#[doc = "    \"is_quantum\": false"]
#[doc = "  },"]
#[doc = "  \"schema_version\": \"1.0.0\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct CognitiveBaselineComponent {
    #[doc = "A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition."]
    pub fields: ::std::collections::HashMap<
        CognitiveBaselineComponentFieldsKey,
        CognitiveBaselineComponentFieldsValue,
    >,
    pub physics_properties: BasePhysicsProperties,
}
impl ::std::convert::From<&CognitiveBaselineComponent> for CognitiveBaselineComponent {
    fn from(value: &CognitiveBaselineComponent) -> Self {
        value.clone()
    }
}
impl CognitiveBaselineComponent {
    pub fn builder() -> builder::CognitiveBaselineComponent {
        Default::default()
    }
}
#[doc = "`CognitiveBaselineComponentFieldsKey`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"pattern\": \"^[a-z_][a-z0-9_]*$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct CognitiveBaselineComponentFieldsKey(::std::string::String);
impl ::std::ops::Deref for CognitiveBaselineComponentFieldsKey {
    type Target = ::std::string::String;
    fn deref(&self) -> &::std::string::String {
        &self.0
    }
}
impl ::std::convert::From<CognitiveBaselineComponentFieldsKey> for ::std::string::String {
    fn from(value: CognitiveBaselineComponentFieldsKey) -> Self {
        value.0
    }
}
impl ::std::convert::From<&CognitiveBaselineComponentFieldsKey>
    for CognitiveBaselineComponentFieldsKey
{
    fn from(value: &CognitiveBaselineComponentFieldsKey) -> Self {
        value.clone()
    }
}
impl ::std::str::FromStr for CognitiveBaselineComponentFieldsKey {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        static PATTERN: ::std::sync::LazyLock<::regress::Regex> =
            ::std::sync::LazyLock::new(|| ::regress::Regex::new("^[a-z_][a-z0-9_]*$").unwrap());
        if (&*PATTERN).find(value).is_none() {
            return Err("doesn't match pattern \"^[a-z_][a-z0-9_]*$\"".into());
        }
        Ok(Self(value.to_string()))
    }
}
impl ::std::convert::TryFrom<&str> for CognitiveBaselineComponentFieldsKey {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String> for CognitiveBaselineComponentFieldsKey {
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String> for CognitiveBaselineComponentFieldsKey {
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl<'de> ::serde::Deserialize<'de> for CognitiveBaselineComponentFieldsKey {
    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        ::std::string::String::deserialize(deserializer)?
            .parse()
            .map_err(|e: self::error::ConversionError| {
                <D::Error as ::serde::de::Error>::custom(e.to_string())
            })
    }
}
#[doc = "`CognitiveBaselineComponentFieldsValue`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"description\": \"A direct reference to a shared definition in SharedDefinitions.schema.json.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"$ref\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"$ref\": {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/base/Field.v1.schema.json\","]
#[doc = "      \"title\": \"Base Field\","]
#[doc = "      \"description\": \"Defines the structure for a single, inline field definition within a component.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"description\","]
#[doc = "        \"type\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"constraints\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "          \"title\": \"Constraint Definition\","]
#[doc = "          \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"properties\": {"]
#[doc = "            \"enum\": {"]
#[doc = "              \"type\": \"array\","]
#[doc = "              \"items\": {"]
#[doc = "                \"type\": \"string\""]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"maxLength\": {"]
#[doc = "              \"type\": \"integer\""]
#[doc = "            },"]
#[doc = "            \"maximum\": {"]
#[doc = "              \"type\": \"number\""]
#[doc = "            },"]
#[doc = "            \"minLength\": {"]
#[doc = "              \"type\": \"integer\""]
#[doc = "            },"]
#[doc = "            \"minimum\": {"]
#[doc = "              \"type\": \"number\""]
#[doc = "            },"]
#[doc = "            \"pattern\": {"]
#[doc = "              \"type\": \"string\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        },"]
#[doc = "        \"default_value\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "          \"title\": \"Any Value\","]
#[doc = "          \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "          \"type\": ["]
#[doc = "            \"string\","]
#[doc = "            \"number\","]
#[doc = "            \"integer\","]
#[doc = "            \"boolean\","]
#[doc = "            \"object\","]
#[doc = "            \"array\","]
#[doc = "            \"null\""]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        \"description\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "          \"title\": \"Description Field\","]
#[doc = "          \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "          \"default\": \"\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"type\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "          \"title\": \"Base Type System\","]
#[doc = "          \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "          \"oneOf\": ["]
#[doc = "            {"]
#[doc = "              \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "              \"type\": \"string\","]
#[doc = "              \"enum\": ["]
#[doc = "                \"string\","]
#[doc = "                \"boolean\","]
#[doc = "                \"integer\","]
#[doc = "                \"number\","]
#[doc = "                \"f32\","]
#[doc = "                \"f64\","]
#[doc = "                \"i32\","]
#[doc = "                \"i64\","]
#[doc = "                \"u32\","]
#[doc = "                \"u64\","]
#[doc = "                \"uuid\","]
#[doc = "                \"date-time\","]
#[doc = "                \"duration\","]
#[doc = "                \"object\","]
#[doc = "                \"array\""]
#[doc = "              ]"]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"$ref\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"$ref\": {"]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"additionalProperties\": false"]
#[doc = "            }"]
#[doc = "          ],"]
#[doc = "          \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "        },"]
#[doc = "        \"ui_label\": {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(untagged, deny_unknown_fields)]
pub enum CognitiveBaselineComponentFieldsValue {
    Variant0 {
        #[serde(rename = "$ref")]
        ref_: ::std::string::String,
    },
    Variant1 {
        #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
        constraints: ::std::option::Option<ConstraintDefinition>,
        #[doc = "Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values."]
        #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
        default_value: ::std::option::Option<::serde_json::Value>,
        #[doc = "A canonical, reusable definition for a human-readable description field."]
        description: ::std::string::String,
        #[doc = "The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema."]
        #[serde(rename = "type")]
        type_: BaseTypeSystem,
        #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
        ui_label: ::std::option::Option<::std::string::String>,
    },
}
impl ::std::convert::From<&Self> for CognitiveBaselineComponentFieldsValue {
    fn from(value: &CognitiveBaselineComponentFieldsValue) -> Self {
        value.clone()
    }
}
#[doc = "A canonical enum for the temporal consolidation level of a Motif or Filament."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"$id\": \"https://familiar.dev/schemas/types/system/ConsolidationLevel.v1.json\","]
#[doc = "  \"title\": \"Consolidation Level\","]
#[doc = "  \"description\": \"A canonical enum for the temporal consolidation level of a Motif or Filament.\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"Daily\","]
#[doc = "    \"Weekly\","]
#[doc = "    \"Monthly\","]
#[doc = "    \"Yearly\","]
#[doc = "    \"Archived\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum ConsolidationLevel {
    Daily,
    Weekly,
    Monthly,
    Yearly,
    Archived,
}
impl ::std::convert::From<&Self> for ConsolidationLevel {
    fn from(value: &ConsolidationLevel) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display for ConsolidationLevel {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Daily => write!(f, "Daily"),
            Self::Weekly => write!(f, "Weekly"),
            Self::Monthly => write!(f, "Monthly"),
            Self::Yearly => write!(f, "Yearly"),
            Self::Archived => write!(f, "Archived"),
        }
    }
}
impl ::std::str::FromStr for ConsolidationLevel {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        match value {
            "Daily" => Ok(Self::Daily),
            "Weekly" => Ok(Self::Weekly),
            "Monthly" => Ok(Self::Monthly),
            "Yearly" => Ok(Self::Yearly),
            "Archived" => Ok(Self::Archived),
            _ => Err("invalid value".into()),
        }
    }
}
impl ::std::convert::TryFrom<&str> for ConsolidationLevel {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String> for ConsolidationLevel {
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String> for ConsolidationLevel {
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "The base rate of memory consolidation for an entity, before multipliers are applied. Represents how quickly an unstable memory becomes stable."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"$id\": \"https://familiar.dev/schemas/snippets/fields/ConsolidationRate.v1.json\","]
#[doc = "  \"title\": \"Consolidation Rate Field\","]
#[doc = "  \"description\": \"The base rate of memory consolidation for an entity, before multipliers are applied. Represents how quickly an unstable memory becomes stable.\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"value\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"value\": {"]
#[doc = "      \"default\": 0.0,"]
#[doc = "      \"type\": \"number\","]
#[doc = "      \"format\": \"double\","]
#[doc = "      \"maximum\": 1.0,"]
#[doc = "      \"minimum\": 0.0,"]
#[doc = "      \"x-python-type\": \"float\","]
#[doc = "      \"x-rust-type\": \"f64\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
pub struct ConsolidationRateField {
    pub value: f64,
}
impl ::std::convert::From<&ConsolidationRateField> for ConsolidationRateField {
    fn from(value: &ConsolidationRateField) -> Self {
        value.clone()
    }
}
impl ConsolidationRateField {
    pub fn builder() -> builder::ConsolidationRateField {
        Default::default()
    }
}
#[doc = "Tracks the temporal consolidation state of a Motif or Filament."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"$id\": \"https://familiar.dev/schemas/components/ConsolidationState.v1.schema.json\","]
#[doc = "  \"title\": \"Consolidation State Component\","]
#[doc = "  \"description\": \"Tracks the temporal consolidation state of a Motif or Filament.\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"fields\","]
#[doc = "    \"physics_properties\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"fields\": {"]
#[doc = "      \"title\": \"ConsolidationStateFields\","]
#[doc = "      \"description\": \"A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"consolidation_level\","]
#[doc = "        \"last_consolidated_at\","]
#[doc = "        \"next_consolidation_due\","]
#[doc = "        \"source_entity_count\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"consolidation_level\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/types/system/ConsolidationLevel.v1.json\","]
#[doc = "          \"title\": \"Consolidation Level\","]
#[doc = "          \"description\": \"A canonical enum for the temporal consolidation level of a Motif or Filament.\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"enum\": ["]
#[doc = "            \"Daily\","]
#[doc = "            \"Weekly\","]
#[doc = "            \"Monthly\","]
#[doc = "            \"Yearly\","]
#[doc = "            \"Archived\""]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        \"last_consolidated_at\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/types/primitives/NullableTimestamp.v1.json\","]
#[doc = "          \"title\": \"Nullable Timestamp\","]
#[doc = "          \"description\": \"A canonical definition for an optional ISO 8601 timestamp with timezone.\","]
#[doc = "          \"type\": ["]
#[doc = "            \"string\","]
#[doc = "            \"null\""]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        \"next_consolidation_due\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/types/primitives/NullableTimestamp.v1.json\","]
#[doc = "          \"title\": \"Nullable Timestamp\","]
#[doc = "          \"description\": \"A canonical definition for an optional ISO 8601 timestamp with timezone.\","]
#[doc = "          \"type\": ["]
#[doc = "            \"string\","]
#[doc = "            \"null\""]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        \"source_entity_count\": {"]
#[doc = "          \"type\": \"integer\","]
#[doc = "          \"minimum\": 1.0"]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"patternProperties\": {"]
#[doc = "        \"^[a-z_][a-z0-9_]*$\": {"]
#[doc = "          \"oneOf\": ["]
#[doc = "            {"]
#[doc = "              \"description\": \"A direct reference to a shared definition in SharedDefinitions.schema.json.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"$ref\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"$ref\": {"]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"additionalProperties\": false"]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/base/Field.v1.schema.json\","]
#[doc = "              \"title\": \"Base Field\","]
#[doc = "              \"description\": \"Defines the structure for a single, inline field definition within a component.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"description\","]
#[doc = "                \"type\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"constraints\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "                  \"title\": \"Constraint Definition\","]
#[doc = "                  \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"enum\": {"]
#[doc = "                      \"type\": \"array\","]
#[doc = "                      \"items\": {"]
#[doc = "                        \"type\": \"string\""]
#[doc = "                      }"]
#[doc = "                    },"]
#[doc = "                    \"maxLength\": {"]
#[doc = "                      \"type\": \"integer\""]
#[doc = "                    },"]
#[doc = "                    \"maximum\": {"]
#[doc = "                      \"type\": \"number\""]
#[doc = "                    },"]
#[doc = "                    \"minLength\": {"]
#[doc = "                      \"type\": \"integer\""]
#[doc = "                    },"]
#[doc = "                    \"minimum\": {"]
#[doc = "                      \"type\": \"number\""]
#[doc = "                    },"]
#[doc = "                    \"pattern\": {"]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"additionalProperties\": false"]
#[doc = "                },"]
#[doc = "                \"default_value\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "                  \"title\": \"Any Value\","]
#[doc = "                  \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "                  \"type\": ["]
#[doc = "                    \"string\","]
#[doc = "                    \"number\","]
#[doc = "                    \"integer\","]
#[doc = "                    \"boolean\","]
#[doc = "                    \"object\","]
#[doc = "                    \"array\","]
#[doc = "                    \"null\""]
#[doc = "                  ]"]
#[doc = "                },"]
#[doc = "                \"description\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "                  \"title\": \"Description Field\","]
#[doc = "                  \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "                  \"default\": \"\","]
#[doc = "                  \"type\": \"string\""]
#[doc = "                },"]
#[doc = "                \"type\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "                  \"title\": \"Base Type System\","]
#[doc = "                  \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "                  \"oneOf\": ["]
#[doc = "                    {"]
#[doc = "                      \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "                      \"type\": \"string\","]
#[doc = "                      \"enum\": ["]
#[doc = "                        \"string\","]
#[doc = "                        \"boolean\","]
#[doc = "                        \"integer\","]
#[doc = "                        \"number\","]
#[doc = "                        \"f32\","]
#[doc = "                        \"f64\","]
#[doc = "                        \"i32\","]
#[doc = "                        \"i64\","]
#[doc = "                        \"u32\","]
#[doc = "                        \"u64\","]
#[doc = "                        \"uuid\","]
#[doc = "                        \"date-time\","]
#[doc = "                        \"duration\","]
#[doc = "                        \"object\","]
#[doc = "                        \"array\""]
#[doc = "                      ]"]
#[doc = "                    },"]
#[doc = "                    {"]
#[doc = "                      \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"required\": ["]
#[doc = "                        \"$ref\""]
#[doc = "                      ],"]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"$ref\": {"]
#[doc = "                          \"type\": \"string\""]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"additionalProperties\": false"]
#[doc = "                    }"]
#[doc = "                  ],"]
#[doc = "                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                },"]
#[doc = "                \"ui_label\": {"]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "            }"]
#[doc = "          ]"]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"physics_properties\": {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/base/PhysicsProperties.v1.schema.json\","]
#[doc = "      \"title\": \"Base Physics Properties\","]
#[doc = "      \"description\": \"Defines the common physics-related properties for components and laws.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"engine\","]
#[doc = "        \"is_quantum\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"collapse_sensitive\": {"]
#[doc = "          \"description\": \"Indicates if the object is affected by or triggers quantum collapse.\","]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        \"engine\": {"]
#[doc = "          \"description\": \"The physics engine responsible for this object.\","]
#[doc = "          \"enum\": ["]
#[doc = "            \"quantum\","]
#[doc = "            \"classical\","]
#[doc = "            \"hybrid\""]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        \"is_quantum\": {"]
#[doc = "          \"description\": \"Indicates if the object has quantum properties.\","]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "  \"physics_properties\": {"]
#[doc = "    \"engine\": \"classical\","]
#[doc = "    \"is_quantum\": false"]
#[doc = "  },"]
#[doc = "  \"schema_version\": \"1.2.0\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct ConsolidationStateComponent {
    pub fields: ConsolidationStateFields,
    pub physics_properties: BasePhysicsProperties,
}
impl ::std::convert::From<&ConsolidationStateComponent> for ConsolidationStateComponent {
    fn from(value: &ConsolidationStateComponent) -> Self {
        value.clone()
    }
}
impl ConsolidationStateComponent {
    pub fn builder() -> builder::ConsolidationStateComponent {
        Default::default()
    }
}
#[doc = "A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"ConsolidationStateFields\","]
#[doc = "  \"description\": \"A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"consolidation_level\","]
#[doc = "    \"last_consolidated_at\","]
#[doc = "    \"next_consolidation_due\","]
#[doc = "    \"source_entity_count\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"consolidation_level\": {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/types/system/ConsolidationLevel.v1.json\","]
#[doc = "      \"title\": \"Consolidation Level\","]
#[doc = "      \"description\": \"A canonical enum for the temporal consolidation level of a Motif or Filament.\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"enum\": ["]
#[doc = "        \"Daily\","]
#[doc = "        \"Weekly\","]
#[doc = "        \"Monthly\","]
#[doc = "        \"Yearly\","]
#[doc = "        \"Archived\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"last_consolidated_at\": {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/types/primitives/NullableTimestamp.v1.json\","]
#[doc = "      \"title\": \"Nullable Timestamp\","]
#[doc = "      \"description\": \"A canonical definition for an optional ISO 8601 timestamp with timezone.\","]
#[doc = "      \"type\": ["]
#[doc = "        \"string\","]
#[doc = "        \"null\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"next_consolidation_due\": {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/types/primitives/NullableTimestamp.v1.json\","]
#[doc = "      \"title\": \"Nullable Timestamp\","]
#[doc = "      \"description\": \"A canonical definition for an optional ISO 8601 timestamp with timezone.\","]
#[doc = "      \"type\": ["]
#[doc = "        \"string\","]
#[doc = "        \"null\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"source_entity_count\": {"]
#[doc = "      \"type\": \"integer\","]
#[doc = "      \"minimum\": 1.0"]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"patternProperties\": {"]
#[doc = "    \"^[a-z_][a-z0-9_]*$\": {"]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"description\": \"A direct reference to a shared definition in SharedDefinitions.schema.json.\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"required\": ["]
#[doc = "            \"$ref\""]
#[doc = "          ],"]
#[doc = "          \"properties\": {"]
#[doc = "            \"$ref\": {"]
#[doc = "              \"type\": \"string\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/base/Field.v1.schema.json\","]
#[doc = "          \"title\": \"Base Field\","]
#[doc = "          \"description\": \"Defines the structure for a single, inline field definition within a component.\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"required\": ["]
#[doc = "            \"description\","]
#[doc = "            \"type\""]
#[doc = "          ],"]
#[doc = "          \"properties\": {"]
#[doc = "            \"constraints\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "              \"title\": \"Constraint Definition\","]
#[doc = "              \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"properties\": {"]
#[doc = "                \"enum\": {"]
#[doc = "                  \"type\": \"array\","]
#[doc = "                  \"items\": {"]
#[doc = "                    \"type\": \"string\""]
#[doc = "                  }"]
#[doc = "                },"]
#[doc = "                \"maxLength\": {"]
#[doc = "                  \"type\": \"integer\""]
#[doc = "                },"]
#[doc = "                \"maximum\": {"]
#[doc = "                  \"type\": \"number\""]
#[doc = "                },"]
#[doc = "                \"minLength\": {"]
#[doc = "                  \"type\": \"integer\""]
#[doc = "                },"]
#[doc = "                \"minimum\": {"]
#[doc = "                  \"type\": \"number\""]
#[doc = "                },"]
#[doc = "                \"pattern\": {"]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"additionalProperties\": false"]
#[doc = "            },"]
#[doc = "            \"default_value\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "              \"title\": \"Any Value\","]
#[doc = "              \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "              \"type\": ["]
#[doc = "                \"string\","]
#[doc = "                \"number\","]
#[doc = "                \"integer\","]
#[doc = "                \"boolean\","]
#[doc = "                \"object\","]
#[doc = "                \"array\","]
#[doc = "                \"null\""]
#[doc = "              ]"]
#[doc = "            },"]
#[doc = "            \"description\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "              \"title\": \"Description Field\","]
#[doc = "              \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "              \"default\": \"\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"type\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "              \"title\": \"Base Type System\","]
#[doc = "              \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "              \"oneOf\": ["]
#[doc = "                {"]
#[doc = "                  \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "                  \"type\": \"string\","]
#[doc = "                  \"enum\": ["]
#[doc = "                    \"string\","]
#[doc = "                    \"boolean\","]
#[doc = "                    \"integer\","]
#[doc = "                    \"number\","]
#[doc = "                    \"f32\","]
#[doc = "                    \"f64\","]
#[doc = "                    \"i32\","]
#[doc = "                    \"i64\","]
#[doc = "                    \"u32\","]
#[doc = "                    \"u64\","]
#[doc = "                    \"uuid\","]
#[doc = "                    \"date-time\","]
#[doc = "                    \"duration\","]
#[doc = "                    \"object\","]
#[doc = "                    \"array\""]
#[doc = "                  ]"]
#[doc = "                },"]
#[doc = "                {"]
#[doc = "                  \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"$ref\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"$ref\": {"]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"additionalProperties\": false"]
#[doc = "                }"]
#[doc = "              ],"]
#[doc = "              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "            },"]
#[doc = "            \"ui_label\": {"]
#[doc = "              \"type\": \"string\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
pub struct ConsolidationStateFields {
    #[doc = "A canonical enum for the temporal consolidation level of a Motif or Filament."]
    pub consolidation_level: ConsolidationLevel,
    #[doc = "A canonical definition for an optional ISO 8601 timestamp with timezone."]
    pub last_consolidated_at: ::std::option::Option<::std::string::String>,
    #[doc = "A canonical definition for an optional ISO 8601 timestamp with timezone."]
    pub next_consolidation_due: ::std::option::Option<::std::string::String>,
    pub source_entity_count: ::std::num::NonZeroU64,
}
impl ::std::convert::From<&ConsolidationStateFields> for ConsolidationStateFields {
    fn from(value: &ConsolidationStateFields) -> Self {
        value.clone()
    }
}
impl ConsolidationStateFields {
    pub fn builder() -> builder::ConsolidationStateFields {
        Default::default()
    }
}
#[doc = "A canonical definition for field validation constraints."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "  \"title\": \"Constraint Definition\","]
#[doc = "  \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"properties\": {"]
#[doc = "    \"enum\": {"]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    },"]
#[doc = "    \"maxLength\": {"]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"maximum\": {"]
#[doc = "      \"type\": \"number\""]
#[doc = "    },"]
#[doc = "    \"minLength\": {"]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"minimum\": {"]
#[doc = "      \"type\": \"number\""]
#[doc = "    },"]
#[doc = "    \"pattern\": {"]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
pub struct ConstraintDefinition {
    #[serde(
        rename = "enum",
        default,
        skip_serializing_if = "::std::vec::Vec::is_empty"
    )]
    pub enum_: ::std::vec::Vec<::std::string::String>,
    #[serde(
        rename = "maxLength",
        default,
        skip_serializing_if = "::std::option::Option::is_none"
    )]
    pub max_length: ::std::option::Option<i64>,
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub maximum: ::std::option::Option<f64>,
    #[serde(
        rename = "minLength",
        default,
        skip_serializing_if = "::std::option::Option::is_none"
    )]
    pub min_length: ::std::option::Option<i64>,
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub minimum: ::std::option::Option<f64>,
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub pattern: ::std::option::Option<::std::string::String>,
}
impl ::std::convert::From<&ConstraintDefinition> for ConstraintDefinition {
    fn from(value: &ConstraintDefinition) -> Self {
        value.clone()
    }
}
impl ::std::default::Default for ConstraintDefinition {
    fn default() -> Self {
        Self {
            enum_: Default::default(),
            max_length: Default::default(),
            maximum: Default::default(),
            min_length: Default::default(),
            minimum: Default::default(),
            pattern: Default::default(),
        }
    }
}
impl ConstraintDefinition {
    pub fn builder() -> builder::ConstraintDefinition {
        Default::default()
    }
}
#[doc = "A fully specified but not-yet-created cognitive entity, ready for the Decima agent to commit to the ECS."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"$id\": \"https://familiar.dev/schemas/payloads/DraftPayload.v1.schema.json\","]
#[doc = "  \"title\": \"Entity Draft Payload\","]
#[doc = "  \"description\": \"A fully specified but not-yet-created cognitive entity, ready for the Decima agent to commit to the ECS.\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"data\","]
#[doc = "    \"description\","]
#[doc = "    \"schema_version\","]
#[doc = "    \"title\","]
#[doc = "    \"user_context\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"data\": {"]
#[doc = "      \"description\": \"This payload's data is a valid, complete entity schema.\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/entities/Moment.v1.schema.json\","]
#[doc = "          \"title\": \"Moment Entity\","]
#[doc = "          \"description\": \"A classical entity representing a specific, objective event in the past. This is the atomic unit of episodic memory.\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"required\": ["]
#[doc = "            \"components\","]
#[doc = "            \"created_at\","]
#[doc = "            \"description\","]
#[doc = "            \"entity_id\","]
#[doc = "            \"entity_type\","]
#[doc = "            \"physics_state\","]
#[doc = "            \"schema_version\","]
#[doc = "            \"tenant_id\","]
#[doc = "            \"title\""]
#[doc = "          ],"]
#[doc = "          \"properties\": {"]
#[doc = "            \"components\": {"]
#[doc = "              \"title\": \"MomentComponents\","]
#[doc = "              \"description\": \"Component references temporarily disabled for pipeline testing\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"content\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"_comment\": {"]
#[doc = "                  \"description\": \"TODO: Re-enable component references when component schemas are available\","]
#[doc = "                  \"type\": \"string\""]
#[doc = "                },"]
#[doc = "                \"content\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/components/MomentContent.v1.schema.json\","]
#[doc = "                  \"title\": \"Moment Content Component\","]
#[doc = "                  \"description\": \"Defines the objective, factual content of a Moment entity, representing a specific event in time.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"description\","]
#[doc = "                    \"fields\","]
#[doc = "                    \"physics_properties\","]
#[doc = "                    \"schema_version\","]
#[doc = "                    \"title\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"description\": {"]
#[doc = "                      \"description\": \"A clear, complete sentence explaining the object's purpose and function within the system.\","]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    },"]
#[doc = "                    \"fields\": {"]
#[doc = "                      \"title\": \"MomentContentFields\","]
#[doc = "                      \"description\": \"A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"required\": ["]
#[doc = "                        \"description\","]
#[doc = "                        \"moment_type\""]
#[doc = "                      ],"]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"description\": {"]
#[doc = "                          \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "                          \"title\": \"Description Field\","]
#[doc = "                          \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "                          \"default\": \"\","]
#[doc = "                          \"type\": \"string\""]
#[doc = "                        },"]
#[doc = "                        \"moment_type\": {"]
#[doc = "                          \"$id\": \"https://familiar.dev/schemas/types/classification/MomentType.v1.json\","]
#[doc = "                          \"title\": \"Moment Type\","]
#[doc = "                          \"description\": \"A canonical enum for the classification of a Moment entity's content.\","]
#[doc = "                          \"type\": \"string\","]
#[doc = "                          \"enum\": ["]
#[doc = "                            \"Event\","]
#[doc = "                            \"Experience\","]
#[doc = "                            \"Observation\","]
#[doc = "                            \"Interaction\""]
#[doc = "                          ]"]
#[doc = "                        },"]
#[doc = "                        \"objective_facts\": {"]
#[doc = "                          \"$id\": \"https://familiar.dev/schemas/types/StringValueMap.v1.json\","]
#[doc = "                          \"title\": \"String Value Map\","]
#[doc = "                          \"description\": \"A generic key-value map where keys are strings and values can be any JSON type. Used for flexible data structures like parameters or metadata.\","]
#[doc = "                          \"type\": \"object\","]
#[doc = "                          \"patternProperties\": {"]
#[doc = "                            \"^[a-zA-Z0-9_]+$\": {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "                              \"title\": \"Any Value\","]
#[doc = "                              \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "                              \"type\": ["]
#[doc = "                                \"string\","]
#[doc = "                                \"number\","]
#[doc = "                                \"integer\","]
#[doc = "                                \"boolean\","]
#[doc = "                                \"object\","]
#[doc = "                                \"array\","]
#[doc = "                                \"null\""]
#[doc = "                              ]"]
#[doc = "                            }"]
#[doc = "                          },"]
#[doc = "                          \"additionalProperties\": false"]
#[doc = "                        },"]
#[doc = "                        \"participants\": {"]
#[doc = "                          \"$id\": \"https://familiar.dev/schemas/types/primitives/EntityIdList.v1.json\","]
#[doc = "                          \"title\": \"Entity ID List\","]
#[doc = "                          \"description\": \"A canonical definition for a list of unique entity identifiers (UUIDs).\","]
#[doc = "                          \"type\": \"array\","]
#[doc = "                          \"items\": {"]
#[doc = "                            \"type\": \"string\""]
#[doc = "                          },"]
#[doc = "                          \"uniqueItems\": true"]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"patternProperties\": {"]
#[doc = "                        \"^[a-z_][a-z0-9_]*$\": {"]
#[doc = "                          \"oneOf\": ["]
#[doc = "                            {"]
#[doc = "                              \"description\": \"A direct reference to a shared definition in SharedDefinitions.schema.json.\","]
#[doc = "                              \"type\": \"object\","]
#[doc = "                              \"required\": ["]
#[doc = "                                \"$ref\""]
#[doc = "                              ],"]
#[doc = "                              \"properties\": {"]
#[doc = "                                \"$ref\": {"]
#[doc = "                                  \"type\": \"string\""]
#[doc = "                                }"]
#[doc = "                              },"]
#[doc = "                              \"additionalProperties\": false"]
#[doc = "                            },"]
#[doc = "                            {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/base/Field.v1.schema.json\","]
#[doc = "                              \"title\": \"Base Field\","]
#[doc = "                              \"description\": \"Defines the structure for a single, inline field definition within a component.\","]
#[doc = "                              \"type\": \"object\","]
#[doc = "                              \"required\": ["]
#[doc = "                                \"description\","]
#[doc = "                                \"type\""]
#[doc = "                              ],"]
#[doc = "                              \"properties\": {"]
#[doc = "                                \"constraints\": {"]
#[doc = "                                  \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "                                  \"title\": \"Constraint Definition\","]
#[doc = "                                  \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "                                  \"type\": \"object\","]
#[doc = "                                  \"properties\": {"]
#[doc = "                                    \"enum\": {"]
#[doc = "                                      \"type\": \"array\","]
#[doc = "                                      \"items\": {"]
#[doc = "                                        \"type\": \"string\""]
#[doc = "                                      }"]
#[doc = "                                    },"]
#[doc = "                                    \"maxLength\": {"]
#[doc = "                                      \"type\": \"integer\""]
#[doc = "                                    },"]
#[doc = "                                    \"maximum\": {"]
#[doc = "                                      \"type\": \"number\""]
#[doc = "                                    },"]
#[doc = "                                    \"minLength\": {"]
#[doc = "                                      \"type\": \"integer\""]
#[doc = "                                    },"]
#[doc = "                                    \"minimum\": {"]
#[doc = "                                      \"type\": \"number\""]
#[doc = "                                    },"]
#[doc = "                                    \"pattern\": {"]
#[doc = "                                      \"type\": \"string\""]
#[doc = "                                    }"]
#[doc = "                                  },"]
#[doc = "                                  \"additionalProperties\": false"]
#[doc = "                                },"]
#[doc = "                                \"default_value\": {"]
#[doc = "                                  \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "                                  \"title\": \"Any Value\","]
#[doc = "                                  \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "                                  \"type\": ["]
#[doc = "                                    \"string\","]
#[doc = "                                    \"number\","]
#[doc = "                                    \"integer\","]
#[doc = "                                    \"boolean\","]
#[doc = "                                    \"object\","]
#[doc = "                                    \"array\","]
#[doc = "                                    \"null\""]
#[doc = "                                  ]"]
#[doc = "                                },"]
#[doc = "                                \"description\": {"]
#[doc = "                                  \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "                                  \"title\": \"Description Field\","]
#[doc = "                                  \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "                                  \"default\": \"\","]
#[doc = "                                  \"type\": \"string\""]
#[doc = "                                },"]
#[doc = "                                \"type\": {"]
#[doc = "                                  \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "                                  \"title\": \"Base Type System\","]
#[doc = "                                  \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "                                  \"oneOf\": ["]
#[doc = "                                    {"]
#[doc = "                                      \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "                                      \"type\": \"string\","]
#[doc = "                                      \"enum\": ["]
#[doc = "                                        \"string\","]
#[doc = "                                        \"boolean\","]
#[doc = "                                        \"integer\","]
#[doc = "                                        \"number\","]
#[doc = "                                        \"f32\","]
#[doc = "                                        \"f64\","]
#[doc = "                                        \"i32\","]
#[doc = "                                        \"i64\","]
#[doc = "                                        \"u32\","]
#[doc = "                                        \"u64\","]
#[doc = "                                        \"uuid\","]
#[doc = "                                        \"date-time\","]
#[doc = "                                        \"duration\","]
#[doc = "                                        \"object\","]
#[doc = "                                        \"array\""]
#[doc = "                                      ]"]
#[doc = "                                    },"]
#[doc = "                                    {"]
#[doc = "                                      \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "                                      \"type\": \"object\","]
#[doc = "                                      \"required\": ["]
#[doc = "                                        \"$ref\""]
#[doc = "                                      ],"]
#[doc = "                                      \"properties\": {"]
#[doc = "                                        \"$ref\": {"]
#[doc = "                                          \"type\": \"string\""]
#[doc = "                                        }"]
#[doc = "                                      },"]
#[doc = "                                      \"additionalProperties\": false"]
#[doc = "                                    }"]
#[doc = "                                  ],"]
#[doc = "                                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                                },"]
#[doc = "                                \"ui_label\": {"]
#[doc = "                                  \"type\": \"string\""]
#[doc = "                                }"]
#[doc = "                              },"]
#[doc = "                              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                            }"]
#[doc = "                          ]"]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"additionalProperties\": false"]
#[doc = "                    },"]
#[doc = "                    \"physics_properties\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/base/PhysicsProperties.v1.schema.json\","]
#[doc = "                      \"title\": \"Base Physics Properties\","]
#[doc = "                      \"description\": \"Defines the common physics-related properties for components and laws.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"required\": ["]
#[doc = "                        \"engine\","]
#[doc = "                        \"is_quantum\""]
#[doc = "                      ],"]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"collapse_sensitive\": {"]
#[doc = "                          \"description\": \"Indicates if the object is affected by or triggers quantum collapse.\","]
#[doc = "                          \"type\": \"boolean\""]
#[doc = "                        },"]
#[doc = "                        \"engine\": {"]
#[doc = "                          \"description\": \"The physics engine responsible for this object.\","]
#[doc = "                          \"enum\": ["]
#[doc = "                            \"quantum\","]
#[doc = "                            \"classical\","]
#[doc = "                            \"hybrid\""]
#[doc = "                          ]"]
#[doc = "                        },"]
#[doc = "                        \"is_quantum\": {"]
#[doc = "                          \"description\": \"Indicates if the object has quantum properties.\","]
#[doc = "                          \"type\": \"boolean\""]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                    },"]
#[doc = "                    \"schema_version\": {"]
#[doc = "                      \"description\": \"The semantic version of this schema definition (e.g., '1.0.0').\","]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    },"]
#[doc = "                    \"title\": {"]
#[doc = "                      \"description\": \"The human-readable, PascalCase name of the object (e.g., 'UniversalPhysicsState').\","]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "                  \"physics_properties\": {"]
#[doc = "                    \"engine\": \"classical\","]
#[doc = "                    \"is_quantum\": false"]
#[doc = "                  },"]
#[doc = "                  \"schema_version\": \"1.3.0\""]
#[doc = "                }"]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"created_at\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/types/primitives/Timestamp.v1.json\","]
#[doc = "              \"title\": \"Timestamp\","]
#[doc = "              \"description\": \"A canonical definition for an ISO 8601 timestamp with timezone.\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"description\": {"]
#[doc = "              \"description\": \"A clear, complete sentence explaining the object's purpose and function within the system.\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"entity_id\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/fields/EntityId.v1.json\","]
#[doc = "              \"title\": \"Entity ID Field\","]
#[doc = "              \"description\": \"A reusable definition for a unique entity identifier.\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"entity_type\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/types/classification/EntityType.v1.json\","]
#[doc = "              \"title\": \"Entity Type\","]
#[doc = "              \"description\": \"A canonical enum of all 7 cognitive entity types.\","]
#[doc = "              \"type\": \"string\","]
#[doc = "              \"enum\": ["]
#[doc = "                \"Focus\","]
#[doc = "                \"Filament\","]
#[doc = "                \"Motif\","]
#[doc = "                \"Intent\","]
#[doc = "                \"Moment\","]
#[doc = "                \"Bond\","]
#[doc = "                \"Thread\""]
#[doc = "              ]"]
#[doc = "            },"]
#[doc = "            \"physics_state\": {"]
#[doc = "              \"title\": \"MomentPhysicsState\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"manifold_position\","]
#[doc = "                \"universal\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"manifold_position\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/components/MemoryManifoldPosition.v1.schema.json\","]
#[doc = "                  \"title\": \"Memory Manifold Position Component\","]
#[doc = "                  \"description\": \"The entity's position in the 7D cognitive manifold, enforcing quantized spatial coordinates (Rule 8).\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"fields\","]
#[doc = "                    \"physics_properties\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"fields\": {"]
#[doc = "                      \"title\": \"BaseFields\","]
#[doc = "                      \"description\": \"A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"patternProperties\": {"]
#[doc = "                        \"^[a-z_][a-z0-9_]*$\": {"]
#[doc = "                          \"oneOf\": ["]
#[doc = "                            {"]
#[doc = "                              \"description\": \"A direct reference to a shared definition in SharedDefinitions.schema.json.\","]
#[doc = "                              \"type\": \"object\","]
#[doc = "                              \"required\": ["]
#[doc = "                                \"$ref\""]
#[doc = "                              ],"]
#[doc = "                              \"properties\": {"]
#[doc = "                                \"$ref\": {"]
#[doc = "                                  \"type\": \"string\""]
#[doc = "                                }"]
#[doc = "                              },"]
#[doc = "                              \"additionalProperties\": false"]
#[doc = "                            },"]
#[doc = "                            {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/base/Field.v1.schema.json\","]
#[doc = "                              \"title\": \"Base Field\","]
#[doc = "                              \"description\": \"Defines the structure for a single, inline field definition within a component.\","]
#[doc = "                              \"type\": \"object\","]
#[doc = "                              \"required\": ["]
#[doc = "                                \"description\","]
#[doc = "                                \"type\""]
#[doc = "                              ],"]
#[doc = "                              \"properties\": {"]
#[doc = "                                \"constraints\": {"]
#[doc = "                                  \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "                                  \"title\": \"Constraint Definition\","]
#[doc = "                                  \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "                                  \"type\": \"object\","]
#[doc = "                                  \"properties\": {"]
#[doc = "                                    \"enum\": {"]
#[doc = "                                      \"type\": \"array\","]
#[doc = "                                      \"items\": {"]
#[doc = "                                        \"type\": \"string\""]
#[doc = "                                      }"]
#[doc = "                                    },"]
#[doc = "                                    \"maxLength\": {"]
#[doc = "                                      \"type\": \"integer\""]
#[doc = "                                    },"]
#[doc = "                                    \"maximum\": {"]
#[doc = "                                      \"type\": \"number\""]
#[doc = "                                    },"]
#[doc = "                                    \"minLength\": {"]
#[doc = "                                      \"type\": \"integer\""]
#[doc = "                                    },"]
#[doc = "                                    \"minimum\": {"]
#[doc = "                                      \"type\": \"number\""]
#[doc = "                                    },"]
#[doc = "                                    \"pattern\": {"]
#[doc = "                                      \"type\": \"string\""]
#[doc = "                                    }"]
#[doc = "                                  },"]
#[doc = "                                  \"additionalProperties\": false"]
#[doc = "                                },"]
#[doc = "                                \"default_value\": {"]
#[doc = "                                  \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "                                  \"title\": \"Any Value\","]
#[doc = "                                  \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "                                  \"type\": ["]
#[doc = "                                    \"string\","]
#[doc = "                                    \"number\","]
#[doc = "                                    \"integer\","]
#[doc = "                                    \"boolean\","]
#[doc = "                                    \"object\","]
#[doc = "                                    \"array\","]
#[doc = "                                    \"null\""]
#[doc = "                                  ]"]
#[doc = "                                },"]
#[doc = "                                \"description\": {"]
#[doc = "                                  \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "                                  \"title\": \"Description Field\","]
#[doc = "                                  \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "                                  \"default\": \"\","]
#[doc = "                                  \"type\": \"string\""]
#[doc = "                                },"]
#[doc = "                                \"type\": {"]
#[doc = "                                  \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "                                  \"title\": \"Base Type System\","]
#[doc = "                                  \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "                                  \"oneOf\": ["]
#[doc = "                                    {"]
#[doc = "                                      \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "                                      \"type\": \"string\","]
#[doc = "                                      \"enum\": ["]
#[doc = "                                        \"string\","]
#[doc = "                                        \"boolean\","]
#[doc = "                                        \"integer\","]
#[doc = "                                        \"number\","]
#[doc = "                                        \"f32\","]
#[doc = "                                        \"f64\","]
#[doc = "                                        \"i32\","]
#[doc = "                                        \"i64\","]
#[doc = "                                        \"u32\","]
#[doc = "                                        \"u64\","]
#[doc = "                                        \"uuid\","]
#[doc = "                                        \"date-time\","]
#[doc = "                                        \"duration\","]
#[doc = "                                        \"object\","]
#[doc = "                                        \"array\""]
#[doc = "                                      ]"]
#[doc = "                                    },"]
#[doc = "                                    {"]
#[doc = "                                      \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "                                      \"type\": \"object\","]
#[doc = "                                      \"required\": ["]
#[doc = "                                        \"$ref\""]
#[doc = "                                      ],"]
#[doc = "                                      \"properties\": {"]
#[doc = "                                        \"$ref\": {"]
#[doc = "                                          \"type\": \"string\""]
#[doc = "                                        }"]
#[doc = "                                      },"]
#[doc = "                                      \"additionalProperties\": false"]
#[doc = "                                    }"]
#[doc = "                                  ],"]
#[doc = "                                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                                },"]
#[doc = "                                \"ui_label\": {"]
#[doc = "                                  \"type\": \"string\""]
#[doc = "                                }"]
#[doc = "                              },"]
#[doc = "                              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                            }"]
#[doc = "                          ]"]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"additionalProperties\": false"]
#[doc = "                    },"]
#[doc = "                    \"physics_properties\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/base/PhysicsProperties.v1.schema.json\","]
#[doc = "                      \"title\": \"Base Physics Properties\","]
#[doc = "                      \"description\": \"Defines the common physics-related properties for components and laws.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"required\": ["]
#[doc = "                        \"engine\","]
#[doc = "                        \"is_quantum\""]
#[doc = "                      ],"]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"collapse_sensitive\": {"]
#[doc = "                          \"description\": \"Indicates if the object is affected by or triggers quantum collapse.\","]
#[doc = "                          \"type\": \"boolean\""]
#[doc = "                        },"]
#[doc = "                        \"engine\": {"]
#[doc = "                          \"description\": \"The physics engine responsible for this object.\","]
#[doc = "                          \"enum\": ["]
#[doc = "                            \"quantum\","]
#[doc = "                            \"classical\","]
#[doc = "                            \"hybrid\""]
#[doc = "                          ]"]
#[doc = "                        },"]
#[doc = "                        \"is_quantum\": {"]
#[doc = "                          \"description\": \"Indicates if the object has quantum properties.\","]
#[doc = "                          \"type\": \"boolean\""]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "                  \"fields\": {"]
#[doc = "                    \"autobiographical_coordinate\": {"]
#[doc = "                      \"description\": \"Quantized coordinate for External <-> Self-related.\","]
#[doc = "                      \"type\": \"integer\""]
#[doc = "                    },"]
#[doc = "                    \"coherence_coordinate\": {"]
#[doc = "                      \"description\": \"Quantized coordinate for Fragmented <-> Unified.\","]
#[doc = "                      \"type\": \"integer\""]
#[doc = "                    },"]
#[doc = "                    \"emotional_coordinate\": {"]
#[doc = "                      \"description\": \"Quantized coordinate for Negative <-> Positive.\","]
#[doc = "                      \"type\": \"integer\""]
#[doc = "                    },"]
#[doc = "                    \"episodic_coordinate\": {"]
#[doc = "                      \"description\": \"Quantized coordinate for General <-> Specific.\","]
#[doc = "                      \"type\": \"integer\""]
#[doc = "                    },"]
#[doc = "                    \"salience_coordinate\": {"]
#[doc = "                      \"description\": \"Quantized coordinate for Background <-> Foreground.\","]
#[doc = "                      \"type\": \"integer\""]
#[doc = "                    },"]
#[doc = "                    \"semantic_coordinate\": {"]
#[doc = "                      \"description\": \"Quantized coordinate for Abstract <-> Concrete.\","]
#[doc = "                      \"type\": \"integer\""]
#[doc = "                    },"]
#[doc = "                    \"temporal_coordinate\": {"]
#[doc = "                      \"description\": \"Continuous time coordinate (t <= 0).\","]
#[doc = "                      \"maximum\": 0,"]
#[doc = "                      \"type\": \"number\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"physics_properties\": {"]
#[doc = "                    \"engine\": \"classical\","]
#[doc = "                    \"is_quantum\": false"]
#[doc = "                  },"]
#[doc = "                  \"schema_version\": \"1.0.0\""]
#[doc = "                },"]
#[doc = "                \"universal\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/components/UniversalPhysicsState.v1.schema.json\","]
#[doc = "                  \"title\": \"Universal Physics State Component\","]
#[doc = "                  \"description\": \"The transient, mutable physics state of an entity.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"fields\","]
#[doc = "                    \"physics_properties\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"fields\": {"]
#[doc = "                      \"title\": \"UniversalPhysicsStateFields\","]
#[doc = "                      \"description\": \"A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"required\": ["]
#[doc = "                        \"cognitive_perspective\","]
#[doc = "                        \"consolidation_rate\","]
#[doc = "                        \"decay_rate\","]
#[doc = "                        \"energy\","]
#[doc = "                        \"entanglement_strength\","]
#[doc = "                        \"momentum\","]
#[doc = "                        \"quantum_coherence\""]
#[doc = "                      ],"]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"cognitive_perspective\": {"]
#[doc = "                          \"$id\": \"https://familiar.dev/schemas/fields/CognitivePerspective.v1.schema.json\","]
#[doc = "                          \"title\": \"Cognitive Perspective Field\","]
#[doc = "                          \"description\": \"The intrinsic 'spin' or 'flavor' of the entity, which generates cognitive dissonance (torsion).\","]
#[doc = "                          \"type\": \"array\","]
#[doc = "                          \"items\": {"]
#[doc = "                            \"type\": \"number\""]
#[doc = "                          },"]
#[doc = "                          \"maxItems\": 3,"]
#[doc = "                          \"minItems\": 3,"]
#[doc = "                          \"ui_label\": \"Cognitive Perspective\""]
#[doc = "                        },"]
#[doc = "                        \"consolidation_rate\": {"]
#[doc = "                          \"$id\": \"https://familiar.dev/schemas/snippets/fields/ConsolidationRate.v1.json\","]
#[doc = "                          \"title\": \"Consolidation Rate Field\","]
#[doc = "                          \"description\": \"The base rate of memory consolidation for an entity, before multipliers are applied. Represents how quickly an unstable memory becomes stable.\","]
#[doc = "                          \"type\": \"object\","]
#[doc = "                          \"required\": ["]
#[doc = "                            \"value\""]
#[doc = "                          ],"]
#[doc = "                          \"properties\": {"]
#[doc = "                            \"value\": {"]
#[doc = "                              \"default\": 0.0,"]
#[doc = "                              \"type\": \"number\","]
#[doc = "                              \"format\": \"double\","]
#[doc = "                              \"maximum\": 1.0,"]
#[doc = "                              \"minimum\": 0.0,"]
#[doc = "                              \"x-python-type\": \"float\","]
#[doc = "                              \"x-rust-type\": \"f64\""]
#[doc = "                            }"]
#[doc = "                          },"]
#[doc = "                          \"additionalProperties\": false"]
#[doc = "                        },"]
#[doc = "                        \"decay_rate\": {"]
#[doc = "                          \"description\": \"The base rate of energy or coherence decay for an entity, before multipliers are applied.\","]
#[doc = "                          \"type\": \"object\","]
#[doc = "                          \"required\": ["]
#[doc = "                            \"value\""]
#[doc = "                          ],"]
#[doc = "                          \"properties\": {"]
#[doc = "                            \"value\": {"]
#[doc = "                              \"default\": 0.01,"]
#[doc = "                              \"type\": \"number\","]
#[doc = "                              \"format\": \"double\","]
#[doc = "                              \"x-python-type\": \"float\","]
#[doc = "                              \"x-rust-type\": \"f64\""]
#[doc = "                            }"]
#[doc = "                          },"]
#[doc = "                          \"additionalProperties\": false"]
#[doc = "                        },"]
#[doc = "                        \"energy\": {"]
#[doc = "                          \"description\": \"The current energy level of an entity.\","]
#[doc = "                          \"default\": 0.1,"]
#[doc = "                          \"type\": \"number\""]
#[doc = "                        },"]
#[doc = "                        \"entanglement_strength\": {"]
#[doc = "                          \"description\": \"The overall entanglement strength of this entity with others. Null for classical entities.\","]
#[doc = "                          \"default\": null,"]
#[doc = "                          \"type\": ["]
#[doc = "                            \"number\","]
#[doc = "                            \"null\""]
#[doc = "                          ],"]
#[doc = "                          \"maximum\": 1.0,"]
#[doc = "                          \"minimum\": 0.0"]
#[doc = "                        },"]
#[doc = "                        \"momentum\": {"]
#[doc = "                          \"$id\": \"https://familiar.dev/schemas/types/physics/Vec6.v1.json\","]
#[doc = "                          \"title\": \"6D Physics Vector\","]
#[doc = "                          \"description\": \"A reusable data type for a vector of six f64 numbers, used for momentum and forces in the 6 spatial dimensions of the manifold.\","]
#[doc = "                          \"type\": \"array\","]
#[doc = "                          \"items\": {"]
#[doc = "                            \"type\": \"number\""]
#[doc = "                          },"]
#[doc = "                          \"maxItems\": 6,"]
#[doc = "                          \"minItems\": 6"]
#[doc = "                        },"]
#[doc = "                        \"quantum_coherence\": {"]
#[doc = "                          \"description\": \"The quantum coherence level of the entity, representing its degree of superposition. Null for classical entities.\","]
#[doc = "                          \"default\": null,"]
#[doc = "                          \"type\": ["]
#[doc = "                            \"number\","]
#[doc = "                            \"null\""]
#[doc = "                          ],"]
#[doc = "                          \"maximum\": 1.0,"]
#[doc = "                          \"minimum\": 0.0"]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"patternProperties\": {"]
#[doc = "                        \"^[a-z_][a-z0-9_]*$\": {"]
#[doc = "                          \"oneOf\": ["]
#[doc = "                            {"]
#[doc = "                              \"description\": \"A direct reference to a shared definition in SharedDefinitions.schema.json.\","]
#[doc = "                              \"type\": \"object\","]
#[doc = "                              \"required\": ["]
#[doc = "                                \"$ref\""]
#[doc = "                              ],"]
#[doc = "                              \"properties\": {"]
#[doc = "                                \"$ref\": {"]
#[doc = "                                  \"type\": \"string\""]
#[doc = "                                }"]
#[doc = "                              },"]
#[doc = "                              \"additionalProperties\": false"]
#[doc = "                            },"]
#[doc = "                            {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/base/Field.v1.schema.json\","]
#[doc = "                              \"title\": \"Base Field\","]
#[doc = "                              \"description\": \"Defines the structure for a single, inline field definition within a component.\","]
#[doc = "                              \"type\": \"object\","]
#[doc = "                              \"required\": ["]
#[doc = "                                \"description\","]
#[doc = "                                \"type\""]
#[doc = "                              ],"]
#[doc = "                              \"properties\": {"]
#[doc = "                                \"constraints\": {"]
#[doc = "                                  \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "                                  \"title\": \"Constraint Definition\","]
#[doc = "                                  \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "                                  \"type\": \"object\","]
#[doc = "                                  \"properties\": {"]
#[doc = "                                    \"enum\": {"]
#[doc = "                                      \"type\": \"array\","]
#[doc = "                                      \"items\": {"]
#[doc = "                                        \"type\": \"string\""]
#[doc = "                                      }"]
#[doc = "                                    },"]
#[doc = "                                    \"maxLength\": {"]
#[doc = "                                      \"type\": \"integer\""]
#[doc = "                                    },"]
#[doc = "                                    \"maximum\": {"]
#[doc = "                                      \"type\": \"number\""]
#[doc = "                                    },"]
#[doc = "                                    \"minLength\": {"]
#[doc = "                                      \"type\": \"integer\""]
#[doc = "                                    },"]
#[doc = "                                    \"minimum\": {"]
#[doc = "                                      \"type\": \"number\""]
#[doc = "                                    },"]
#[doc = "                                    \"pattern\": {"]
#[doc = "                                      \"type\": \"string\""]
#[doc = "                                    }"]
#[doc = "                                  },"]
#[doc = "                                  \"additionalProperties\": false"]
#[doc = "                                },"]
#[doc = "                                \"default_value\": {"]
#[doc = "                                  \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "                                  \"title\": \"Any Value\","]
#[doc = "                                  \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "                                  \"type\": ["]
#[doc = "                                    \"string\","]
#[doc = "                                    \"number\","]
#[doc = "                                    \"integer\","]
#[doc = "                                    \"boolean\","]
#[doc = "                                    \"object\","]
#[doc = "                                    \"array\","]
#[doc = "                                    \"null\""]
#[doc = "                                  ]"]
#[doc = "                                },"]
#[doc = "                                \"description\": {"]
#[doc = "                                  \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "                                  \"title\": \"Description Field\","]
#[doc = "                                  \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "                                  \"default\": \"\","]
#[doc = "                                  \"type\": \"string\""]
#[doc = "                                },"]
#[doc = "                                \"type\": {"]
#[doc = "                                  \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "                                  \"title\": \"Base Type System\","]
#[doc = "                                  \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "                                  \"oneOf\": ["]
#[doc = "                                    {"]
#[doc = "                                      \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "                                      \"type\": \"string\","]
#[doc = "                                      \"enum\": ["]
#[doc = "                                        \"string\","]
#[doc = "                                        \"boolean\","]
#[doc = "                                        \"integer\","]
#[doc = "                                        \"number\","]
#[doc = "                                        \"f32\","]
#[doc = "                                        \"f64\","]
#[doc = "                                        \"i32\","]
#[doc = "                                        \"i64\","]
#[doc = "                                        \"u32\","]
#[doc = "                                        \"u64\","]
#[doc = "                                        \"uuid\","]
#[doc = "                                        \"date-time\","]
#[doc = "                                        \"duration\","]
#[doc = "                                        \"object\","]
#[doc = "                                        \"array\""]
#[doc = "                                      ]"]
#[doc = "                                    },"]
#[doc = "                                    {"]
#[doc = "                                      \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "                                      \"type\": \"object\","]
#[doc = "                                      \"required\": ["]
#[doc = "                                        \"$ref\""]
#[doc = "                                      ],"]
#[doc = "                                      \"properties\": {"]
#[doc = "                                        \"$ref\": {"]
#[doc = "                                          \"type\": \"string\""]
#[doc = "                                        }"]
#[doc = "                                      },"]
#[doc = "                                      \"additionalProperties\": false"]
#[doc = "                                    }"]
#[doc = "                                  ],"]
#[doc = "                                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                                },"]
#[doc = "                                \"ui_label\": {"]
#[doc = "                                  \"type\": \"string\""]
#[doc = "                                }"]
#[doc = "                              },"]
#[doc = "                              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                            }"]
#[doc = "                          ]"]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"additionalProperties\": false"]
#[doc = "                    },"]
#[doc = "                    \"physics_properties\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/base/PhysicsProperties.v1.schema.json\","]
#[doc = "                      \"title\": \"Base Physics Properties\","]
#[doc = "                      \"description\": \"Defines the common physics-related properties for components and laws.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"required\": ["]
#[doc = "                        \"engine\","]
#[doc = "                        \"is_quantum\""]
#[doc = "                      ],"]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"collapse_sensitive\": {"]
#[doc = "                          \"description\": \"Indicates if the object is affected by or triggers quantum collapse.\","]
#[doc = "                          \"type\": \"boolean\""]
#[doc = "                        },"]
#[doc = "                        \"engine\": {"]
#[doc = "                          \"description\": \"The physics engine responsible for this object.\","]
#[doc = "                          \"enum\": ["]
#[doc = "                            \"quantum\","]
#[doc = "                            \"classical\","]
#[doc = "                            \"hybrid\""]
#[doc = "                          ]"]
#[doc = "                        },"]
#[doc = "                        \"is_quantum\": {"]
#[doc = "                          \"description\": \"Indicates if the object has quantum properties.\","]
#[doc = "                          \"type\": \"boolean\""]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "                  \"schema_version\": \"3.0.0\""]
#[doc = "                }"]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"schema_version\": {"]
#[doc = "              \"description\": \"The semantic version of this schema definition (e.g., '1.0.0').\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"tenant_id\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/types/primitives/UUID.v1.json\","]
#[doc = "              \"title\": \"UUID\","]
#[doc = "              \"description\": \"A canonical definition for a Universally Unique Identifier (UUID).\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"title\": {"]
#[doc = "              \"description\": \"The human-readable, PascalCase name of the object (e.g., 'UniversalPhysicsState').\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "          \"schema_version\": \"1.1.0\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/entities/Bond.v1.schema.json\","]
#[doc = "          \"title\": \"Bond Entity\","]
#[doc = "          \"description\": \"A classical entity representing a persistent relationship between two Thread entities.\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"required\": ["]
#[doc = "            \"components\","]
#[doc = "            \"entity_type\","]
#[doc = "            \"physics_state\","]
#[doc = "            \"thread_a_id\","]
#[doc = "            \"thread_b_id\""]
#[doc = "          ],"]
#[doc = "          \"properties\": {"]
#[doc = "            \"components\": {"]
#[doc = "              \"title\": \"BondComponents\","]
#[doc = "              \"description\": \"Component references temporarily disabled for pipeline testing\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"content\","]
#[doc = "                \"permissions\","]
#[doc = "                \"physics_config\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"_comment\": {"]
#[doc = "                  \"description\": \"TODO: Re-enable component references when component schemas are available\","]
#[doc = "                  \"type\": \"string\""]
#[doc = "                },"]
#[doc = "                \"content\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/components/BondContent.v1.schema.json\","]
#[doc = "                  \"title\": \"Bond Content Component\","]
#[doc = "                  \"description\": \"Defines the descriptive content and history of a relationship Bond.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"fields\","]
#[doc = "                    \"physics_properties\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"fields\": {"]
#[doc = "                      \"title\": \"BondContentFields\","]
#[doc = "                      \"description\": \"A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"required\": ["]
#[doc = "                        \"relationship_type\""]
#[doc = "                      ],"]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"description\": {"]
#[doc = "                          \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "                          \"title\": \"Description Field\","]
#[doc = "                          \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "                          \"default\": \"\","]
#[doc = "                          \"type\": \"string\""]
#[doc = "                        },"]
#[doc = "                        \"history\": {"]
#[doc = "                          \"type\": \"array\","]
#[doc = "                          \"items\": {"]
#[doc = "                            \"$id\": \"https://familiar.dev/schemas/types/social/BondEvent.v1.json\","]
#[doc = "                            \"title\": \"Bond Event Type\","]
#[doc = "                            \"description\": \"Represents a significant event that impacted a bond's strength or state.\","]
#[doc = "                            \"type\": \"object\","]
#[doc = "                            \"required\": ["]
#[doc = "                              \"impact\","]
#[doc = "                              \"moment_id\","]
#[doc = "                              \"timestamp\""]
#[doc = "                            ],"]
#[doc = "                            \"properties\": {"]
#[doc = "                              \"impact\": {"]
#[doc = "                                \"description\": \"How much this event affected the bond, from -1.0 (negative) to 1.0 (positive).\","]
#[doc = "                                \"type\": \"number\","]
#[doc = "                                \"maximum\": 1.0,"]
#[doc = "                                \"minimum\": -1.0"]
#[doc = "                              },"]
#[doc = "                              \"moment_id\": {"]
#[doc = "                                \"type\": \"string\""]
#[doc = "                              },"]
#[doc = "                              \"timestamp\": {"]
#[doc = "                                \"$id\": \"https://familiar.dev/schemas/types/primitives/Timestamp.v1.json\","]
#[doc = "                                \"title\": \"Timestamp\","]
#[doc = "                                \"description\": \"A canonical definition for an ISO 8601 timestamp with timezone.\","]
#[doc = "                                \"type\": \"string\""]
#[doc = "                              }"]
#[doc = "                            }"]
#[doc = "                          }"]
#[doc = "                        },"]
#[doc = "                        \"relationship_type\": {"]
#[doc = "                          \"$id\": \"https://familiar.dev/schemas/types/social/RelationshipType.v1.json\","]
#[doc = "                          \"title\": \"Relationship Type\","]
#[doc = "                          \"description\": \"A canonical enum of all possible relationship types between Threads.\","]
#[doc = "                          \"type\": \"string\","]
#[doc = "                          \"enum\": ["]
#[doc = "                            \"Family\","]
#[doc = "                            \"Friend\","]
#[doc = "                            \"Romantic\","]
#[doc = "                            \"Professional\","]
#[doc = "                            \"Acquaintance\","]
#[doc = "                            \"Adversarial\""]
#[doc = "                          ]"]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"patternProperties\": {"]
#[doc = "                        \"^[a-z_][a-z0-9_]*$\": {"]
#[doc = "                          \"oneOf\": ["]
#[doc = "                            {"]
#[doc = "                              \"description\": \"A direct reference to a shared definition in SharedDefinitions.schema.json.\","]
#[doc = "                              \"type\": \"object\","]
#[doc = "                              \"required\": ["]
#[doc = "                                \"$ref\""]
#[doc = "                              ],"]
#[doc = "                              \"properties\": {"]
#[doc = "                                \"$ref\": {"]
#[doc = "                                  \"type\": \"string\""]
#[doc = "                                }"]
#[doc = "                              },"]
#[doc = "                              \"additionalProperties\": false"]
#[doc = "                            },"]
#[doc = "                            {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/base/Field.v1.schema.json\","]
#[doc = "                              \"title\": \"Base Field\","]
#[doc = "                              \"description\": \"Defines the structure for a single, inline field definition within a component.\","]
#[doc = "                              \"type\": \"object\","]
#[doc = "                              \"required\": ["]
#[doc = "                                \"description\","]
#[doc = "                                \"type\""]
#[doc = "                              ],"]
#[doc = "                              \"properties\": {"]
#[doc = "                                \"constraints\": {"]
#[doc = "                                  \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "                                  \"title\": \"Constraint Definition\","]
#[doc = "                                  \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "                                  \"type\": \"object\","]
#[doc = "                                  \"properties\": {"]
#[doc = "                                    \"enum\": {"]
#[doc = "                                      \"type\": \"array\","]
#[doc = "                                      \"items\": {"]
#[doc = "                                        \"type\": \"string\""]
#[doc = "                                      }"]
#[doc = "                                    },"]
#[doc = "                                    \"maxLength\": {"]
#[doc = "                                      \"type\": \"integer\""]
#[doc = "                                    },"]
#[doc = "                                    \"maximum\": {"]
#[doc = "                                      \"type\": \"number\""]
#[doc = "                                    },"]
#[doc = "                                    \"minLength\": {"]
#[doc = "                                      \"type\": \"integer\""]
#[doc = "                                    },"]
#[doc = "                                    \"minimum\": {"]
#[doc = "                                      \"type\": \"number\""]
#[doc = "                                    },"]
#[doc = "                                    \"pattern\": {"]
#[doc = "                                      \"type\": \"string\""]
#[doc = "                                    }"]
#[doc = "                                  },"]
#[doc = "                                  \"additionalProperties\": false"]
#[doc = "                                },"]
#[doc = "                                \"default_value\": {"]
#[doc = "                                  \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "                                  \"title\": \"Any Value\","]
#[doc = "                                  \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "                                  \"type\": ["]
#[doc = "                                    \"string\","]
#[doc = "                                    \"number\","]
#[doc = "                                    \"integer\","]
#[doc = "                                    \"boolean\","]
#[doc = "                                    \"object\","]
#[doc = "                                    \"array\","]
#[doc = "                                    \"null\""]
#[doc = "                                  ]"]
#[doc = "                                },"]
#[doc = "                                \"description\": {"]
#[doc = "                                  \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "                                  \"title\": \"Description Field\","]
#[doc = "                                  \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "                                  \"default\": \"\","]
#[doc = "                                  \"type\": \"string\""]
#[doc = "                                },"]
#[doc = "                                \"type\": {"]
#[doc = "                                  \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "                                  \"title\": \"Base Type System\","]
#[doc = "                                  \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "                                  \"oneOf\": ["]
#[doc = "                                    {"]
#[doc = "                                      \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "                                      \"type\": \"string\","]
#[doc = "                                      \"enum\": ["]
#[doc = "                                        \"string\","]
#[doc = "                                        \"boolean\","]
#[doc = "                                        \"integer\","]
#[doc = "                                        \"number\","]
#[doc = "                                        \"f32\","]
#[doc = "                                        \"f64\","]
#[doc = "                                        \"i32\","]
#[doc = "                                        \"i64\","]
#[doc = "                                        \"u32\","]
#[doc = "                                        \"u64\","]
#[doc = "                                        \"uuid\","]
#[doc = "                                        \"date-time\","]
#[doc = "                                        \"duration\","]
#[doc = "                                        \"object\","]
#[doc = "                                        \"array\""]
#[doc = "                                      ]"]
#[doc = "                                    },"]
#[doc = "                                    {"]
#[doc = "                                      \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "                                      \"type\": \"object\","]
#[doc = "                                      \"required\": ["]
#[doc = "                                        \"$ref\""]
#[doc = "                                      ],"]
#[doc = "                                      \"properties\": {"]
#[doc = "                                        \"$ref\": {"]
#[doc = "                                          \"type\": \"string\""]
#[doc = "                                        }"]
#[doc = "                                      },"]
#[doc = "                                      \"additionalProperties\": false"]
#[doc = "                                    }"]
#[doc = "                                  ],"]
#[doc = "                                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                                },"]
#[doc = "                                \"ui_label\": {"]
#[doc = "                                  \"type\": \"string\""]
#[doc = "                                }"]
#[doc = "                              },"]
#[doc = "                              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                            }"]
#[doc = "                          ]"]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"additionalProperties\": false"]
#[doc = "                    },"]
#[doc = "                    \"physics_properties\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/base/PhysicsProperties.v1.schema.json\","]
#[doc = "                      \"title\": \"Base Physics Properties\","]
#[doc = "                      \"description\": \"Defines the common physics-related properties for components and laws.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"required\": ["]
#[doc = "                        \"engine\","]
#[doc = "                        \"is_quantum\""]
#[doc = "                      ],"]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"collapse_sensitive\": {"]
#[doc = "                          \"description\": \"Indicates if the object is affected by or triggers quantum collapse.\","]
#[doc = "                          \"type\": \"boolean\""]
#[doc = "                        },"]
#[doc = "                        \"engine\": {"]
#[doc = "                          \"description\": \"The physics engine responsible for this object.\","]
#[doc = "                          \"enum\": ["]
#[doc = "                            \"quantum\","]
#[doc = "                            \"classical\","]
#[doc = "                            \"hybrid\""]
#[doc = "                          ]"]
#[doc = "                        },"]
#[doc = "                        \"is_quantum\": {"]
#[doc = "                          \"description\": \"Indicates if the object has quantum properties.\","]
#[doc = "                          \"type\": \"boolean\""]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "                  \"physics_properties\": {"]
#[doc = "                    \"engine\": \"classical\","]
#[doc = "                    \"is_quantum\": false"]
#[doc = "                  },"]
#[doc = "                  \"schema_version\": \"1.1.0\""]
#[doc = "                },"]
#[doc = "                \"permissions\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/components/BondPermissions.v1.schema.json\","]
#[doc = "                  \"title\": \"Bond Permissions Component\","]
#[doc = "                  \"description\": \"Defines the access control and privacy rules for a Bond and its associated Moments.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"fields\","]
#[doc = "                    \"physics_properties\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"fields\": {"]
#[doc = "                      \"title\": \"BaseFields\","]
#[doc = "                      \"description\": \"A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"patternProperties\": {"]
#[doc = "                        \"^[a-z_][a-z0-9_]*$\": {"]
#[doc = "                          \"oneOf\": ["]
#[doc = "                            {"]
#[doc = "                              \"description\": \"A direct reference to a shared definition in SharedDefinitions.schema.json.\","]
#[doc = "                              \"type\": \"object\","]
#[doc = "                              \"required\": ["]
#[doc = "                                \"$ref\""]
#[doc = "                              ],"]
#[doc = "                              \"properties\": {"]
#[doc = "                                \"$ref\": {"]
#[doc = "                                  \"type\": \"string\""]
#[doc = "                                }"]
#[doc = "                              },"]
#[doc = "                              \"additionalProperties\": false"]
#[doc = "                            },"]
#[doc = "                            {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/base/Field.v1.schema.json\","]
#[doc = "                              \"title\": \"Base Field\","]
#[doc = "                              \"description\": \"Defines the structure for a single, inline field definition within a component.\","]
#[doc = "                              \"type\": \"object\","]
#[doc = "                              \"required\": ["]
#[doc = "                                \"description\","]
#[doc = "                                \"type\""]
#[doc = "                              ],"]
#[doc = "                              \"properties\": {"]
#[doc = "                                \"constraints\": {"]
#[doc = "                                  \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "                                  \"title\": \"Constraint Definition\","]
#[doc = "                                  \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "                                  \"type\": \"object\","]
#[doc = "                                  \"properties\": {"]
#[doc = "                                    \"enum\": {"]
#[doc = "                                      \"type\": \"array\","]
#[doc = "                                      \"items\": {"]
#[doc = "                                        \"type\": \"string\""]
#[doc = "                                      }"]
#[doc = "                                    },"]
#[doc = "                                    \"maxLength\": {"]
#[doc = "                                      \"type\": \"integer\""]
#[doc = "                                    },"]
#[doc = "                                    \"maximum\": {"]
#[doc = "                                      \"type\": \"number\""]
#[doc = "                                    },"]
#[doc = "                                    \"minLength\": {"]
#[doc = "                                      \"type\": \"integer\""]
#[doc = "                                    },"]
#[doc = "                                    \"minimum\": {"]
#[doc = "                                      \"type\": \"number\""]
#[doc = "                                    },"]
#[doc = "                                    \"pattern\": {"]
#[doc = "                                      \"type\": \"string\""]
#[doc = "                                    }"]
#[doc = "                                  },"]
#[doc = "                                  \"additionalProperties\": false"]
#[doc = "                                },"]
#[doc = "                                \"default_value\": {"]
#[doc = "                                  \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "                                  \"title\": \"Any Value\","]
#[doc = "                                  \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "                                  \"type\": ["]
#[doc = "                                    \"string\","]
#[doc = "                                    \"number\","]
#[doc = "                                    \"integer\","]
#[doc = "                                    \"boolean\","]
#[doc = "                                    \"object\","]
#[doc = "                                    \"array\","]
#[doc = "                                    \"null\""]
#[doc = "                                  ]"]
#[doc = "                                },"]
#[doc = "                                \"description\": {"]
#[doc = "                                  \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "                                  \"title\": \"Description Field\","]
#[doc = "                                  \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "                                  \"default\": \"\","]
#[doc = "                                  \"type\": \"string\""]
#[doc = "                                },"]
#[doc = "                                \"type\": {"]
#[doc = "                                  \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "                                  \"title\": \"Base Type System\","]
#[doc = "                                  \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "                                  \"oneOf\": ["]
#[doc = "                                    {"]
#[doc = "                                      \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "                                      \"type\": \"string\","]
#[doc = "                                      \"enum\": ["]
#[doc = "                                        \"string\","]
#[doc = "                                        \"boolean\","]
#[doc = "                                        \"integer\","]
#[doc = "                                        \"number\","]
#[doc = "                                        \"f32\","]
#[doc = "                                        \"f64\","]
#[doc = "                                        \"i32\","]
#[doc = "                                        \"i64\","]
#[doc = "                                        \"u32\","]
#[doc = "                                        \"u64\","]
#[doc = "                                        \"uuid\","]
#[doc = "                                        \"date-time\","]
#[doc = "                                        \"duration\","]
#[doc = "                                        \"object\","]
#[doc = "                                        \"array\""]
#[doc = "                                      ]"]
#[doc = "                                    },"]
#[doc = "                                    {"]
#[doc = "                                      \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "                                      \"type\": \"object\","]
#[doc = "                                      \"required\": ["]
#[doc = "                                        \"$ref\""]
#[doc = "                                      ],"]
#[doc = "                                      \"properties\": {"]
#[doc = "                                        \"$ref\": {"]
#[doc = "                                          \"type\": \"string\""]
#[doc = "                                        }"]
#[doc = "                                      },"]
#[doc = "                                      \"additionalProperties\": false"]
#[doc = "                                    }"]
#[doc = "                                  ],"]
#[doc = "                                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                                },"]
#[doc = "                                \"ui_label\": {"]
#[doc = "                                  \"type\": \"string\""]
#[doc = "                                }"]
#[doc = "                              },"]
#[doc = "                              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                            }"]
#[doc = "                          ]"]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"additionalProperties\": false"]
#[doc = "                    },"]
#[doc = "                    \"physics_properties\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/base/PhysicsProperties.v1.schema.json\","]
#[doc = "                      \"title\": \"Base Physics Properties\","]
#[doc = "                      \"description\": \"Defines the common physics-related properties for components and laws.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"required\": ["]
#[doc = "                        \"engine\","]
#[doc = "                        \"is_quantum\""]
#[doc = "                      ],"]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"collapse_sensitive\": {"]
#[doc = "                          \"description\": \"Indicates if the object is affected by or triggers quantum collapse.\","]
#[doc = "                          \"type\": \"boolean\""]
#[doc = "                        },"]
#[doc = "                        \"engine\": {"]
#[doc = "                          \"description\": \"The physics engine responsible for this object.\","]
#[doc = "                          \"enum\": ["]
#[doc = "                            \"quantum\","]
#[doc = "                            \"classical\","]
#[doc = "                            \"hybrid\""]
#[doc = "                          ]"]
#[doc = "                        },"]
#[doc = "                        \"is_quantum\": {"]
#[doc = "                          \"description\": \"Indicates if the object has quantum properties.\","]
#[doc = "                          \"type\": \"boolean\""]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "                  \"fields\": {"]
#[doc = "                    \"allow_cross_tenant_view\": {"]
#[doc = "                      \"default\": false,"]
#[doc = "                      \"description\": \"If true, allows linked users from other tenants to view data according to their permissions.\","]
#[doc = "                      \"type\": \"boolean\""]
#[doc = "                    },"]
#[doc = "                    \"min_age_for_viewing\": {"]
#[doc = "                      \"default\": 13,"]
#[doc = "                      \"description\": \"The minimum age a child Thread must be for this bond's moments to be visible to them. Supports age-aware privacy.\","]
#[doc = "                      \"minimum\": 0,"]
#[doc = "                      \"type\": \"integer\""]
#[doc = "                    },"]
#[doc = "                    \"owner_permissions\": {"]
#[doc = "                      \"default\": ["]
#[doc = "                        \"Read\","]
#[doc = "                        \"Write\","]
#[doc = "                        \"Delete\","]
#[doc = "                        \"Share\""]
#[doc = "                      ],"]
#[doc = "                      \"description\": \"Permissions for the owner of the bond (the user in the current tenant).\","]
#[doc = "                      \"items\": {"]
#[doc = "                        \"$id\": \"https://familiar.dev/schemas/types/security/BondPermission.v1.json\","]
#[doc = "                        \"description\": \"A canonical enum of permissions related to a Bond.\","]
#[doc = "                        \"enum\": ["]
#[doc = "                          \"Read\","]
#[doc = "                          \"Write\","]
#[doc = "                          \"Delete\","]
#[doc = "                          \"Share\""]
#[doc = "                        ],"]
#[doc = "                        \"title\": \"Bond Permission\","]
#[doc = "                        \"type\": \"string\""]
#[doc = "                      },"]
#[doc = "                      \"type\": \"array\""]
#[doc = "                    },"]
#[doc = "                    \"subject_permissions\": {"]
#[doc = "                      \"default\": ["]
#[doc = "                        \"Read\","]
#[doc = "                        \"Contribute\""]
#[doc = "                      ],"]
#[doc = "                      \"description\": \"Permissions for the other person in the bond.\","]
#[doc = "                      \"items\": {"]
#[doc = "                        \"enum\": ["]
#[doc = "                          \"Read\","]
#[doc = "                          \"Write\","]
#[doc = "                          \"Contribute\""]
#[doc = "                        ],"]
#[doc = "                        \"type\": \"string\""]
#[doc = "                      },"]
#[doc = "                      \"type\": \"array\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"physics_properties\": {"]
#[doc = "                    \"engine\": \"classical\","]
#[doc = "                    \"is_quantum\": false"]
#[doc = "                  },"]
#[doc = "                  \"schema_version\": \"1.0.0\""]
#[doc = "                },"]
#[doc = "                \"physics_config\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/components/BondPhysicsConfig.v1.schema.json\","]
#[doc = "                  \"title\": \"Bond Physics Config Component\","]
#[doc = "                  \"description\": \"Configuration that defines the physics model for a Bond (Dynamic or Static).\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"fields\","]
#[doc = "                    \"physics_properties\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"fields\": {"]
#[doc = "                      \"title\": \"BaseFields\","]
#[doc = "                      \"description\": \"A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"patternProperties\": {"]
#[doc = "                        \"^[a-z_][a-z0-9_]*$\": {"]
#[doc = "                          \"oneOf\": ["]
#[doc = "                            {"]
#[doc = "                              \"description\": \"A direct reference to a shared definition in SharedDefinitions.schema.json.\","]
#[doc = "                              \"type\": \"object\","]
#[doc = "                              \"required\": ["]
#[doc = "                                \"$ref\""]
#[doc = "                              ],"]
#[doc = "                              \"properties\": {"]
#[doc = "                                \"$ref\": {"]
#[doc = "                                  \"type\": \"string\""]
#[doc = "                                }"]
#[doc = "                              },"]
#[doc = "                              \"additionalProperties\": false"]
#[doc = "                            },"]
#[doc = "                            {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/base/Field.v1.schema.json\","]
#[doc = "                              \"title\": \"Base Field\","]
#[doc = "                              \"description\": \"Defines the structure for a single, inline field definition within a component.\","]
#[doc = "                              \"type\": \"object\","]
#[doc = "                              \"required\": ["]
#[doc = "                                \"description\","]
#[doc = "                                \"type\""]
#[doc = "                              ],"]
#[doc = "                              \"properties\": {"]
#[doc = "                                \"constraints\": {"]
#[doc = "                                  \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "                                  \"title\": \"Constraint Definition\","]
#[doc = "                                  \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "                                  \"type\": \"object\","]
#[doc = "                                  \"properties\": {"]
#[doc = "                                    \"enum\": {"]
#[doc = "                                      \"type\": \"array\","]
#[doc = "                                      \"items\": {"]
#[doc = "                                        \"type\": \"string\""]
#[doc = "                                      }"]
#[doc = "                                    },"]
#[doc = "                                    \"maxLength\": {"]
#[doc = "                                      \"type\": \"integer\""]
#[doc = "                                    },"]
#[doc = "                                    \"maximum\": {"]
#[doc = "                                      \"type\": \"number\""]
#[doc = "                                    },"]
#[doc = "                                    \"minLength\": {"]
#[doc = "                                      \"type\": \"integer\""]
#[doc = "                                    },"]
#[doc = "                                    \"minimum\": {"]
#[doc = "                                      \"type\": \"number\""]
#[doc = "                                    },"]
#[doc = "                                    \"pattern\": {"]
#[doc = "                                      \"type\": \"string\""]
#[doc = "                                    }"]
#[doc = "                                  },"]
#[doc = "                                  \"additionalProperties\": false"]
#[doc = "                                },"]
#[doc = "                                \"default_value\": {"]
#[doc = "                                  \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "                                  \"title\": \"Any Value\","]
#[doc = "                                  \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "                                  \"type\": ["]
#[doc = "                                    \"string\","]
#[doc = "                                    \"number\","]
#[doc = "                                    \"integer\","]
#[doc = "                                    \"boolean\","]
#[doc = "                                    \"object\","]
#[doc = "                                    \"array\","]
#[doc = "                                    \"null\""]
#[doc = "                                  ]"]
#[doc = "                                },"]
#[doc = "                                \"description\": {"]
#[doc = "                                  \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "                                  \"title\": \"Description Field\","]
#[doc = "                                  \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "                                  \"default\": \"\","]
#[doc = "                                  \"type\": \"string\""]
#[doc = "                                },"]
#[doc = "                                \"type\": {"]
#[doc = "                                  \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "                                  \"title\": \"Base Type System\","]
#[doc = "                                  \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "                                  \"oneOf\": ["]
#[doc = "                                    {"]
#[doc = "                                      \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "                                      \"type\": \"string\","]
#[doc = "                                      \"enum\": ["]
#[doc = "                                        \"string\","]
#[doc = "                                        \"boolean\","]
#[doc = "                                        \"integer\","]
#[doc = "                                        \"number\","]
#[doc = "                                        \"f32\","]
#[doc = "                                        \"f64\","]
#[doc = "                                        \"i32\","]
#[doc = "                                        \"i64\","]
#[doc = "                                        \"u32\","]
#[doc = "                                        \"u64\","]
#[doc = "                                        \"uuid\","]
#[doc = "                                        \"date-time\","]
#[doc = "                                        \"duration\","]
#[doc = "                                        \"object\","]
#[doc = "                                        \"array\""]
#[doc = "                                      ]"]
#[doc = "                                    },"]
#[doc = "                                    {"]
#[doc = "                                      \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "                                      \"type\": \"object\","]
#[doc = "                                      \"required\": ["]
#[doc = "                                        \"$ref\""]
#[doc = "                                      ],"]
#[doc = "                                      \"properties\": {"]
#[doc = "                                        \"$ref\": {"]
#[doc = "                                          \"type\": \"string\""]
#[doc = "                                        }"]
#[doc = "                                      },"]
#[doc = "                                      \"additionalProperties\": false"]
#[doc = "                                    }"]
#[doc = "                                  ],"]
#[doc = "                                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                                },"]
#[doc = "                                \"ui_label\": {"]
#[doc = "                                  \"type\": \"string\""]
#[doc = "                                }"]
#[doc = "                              },"]
#[doc = "                              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                            }"]
#[doc = "                          ]"]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"additionalProperties\": false"]
#[doc = "                    },"]
#[doc = "                    \"physics_properties\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/base/PhysicsProperties.v1.schema.json\","]
#[doc = "                      \"title\": \"Base Physics Properties\","]
#[doc = "                      \"description\": \"Defines the common physics-related properties for components and laws.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"required\": ["]
#[doc = "                        \"engine\","]
#[doc = "                        \"is_quantum\""]
#[doc = "                      ],"]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"collapse_sensitive\": {"]
#[doc = "                          \"description\": \"Indicates if the object is affected by or triggers quantum collapse.\","]
#[doc = "                          \"type\": \"boolean\""]
#[doc = "                        },"]
#[doc = "                        \"engine\": {"]
#[doc = "                          \"description\": \"The physics engine responsible for this object.\","]
#[doc = "                          \"enum\": ["]
#[doc = "                            \"quantum\","]
#[doc = "                            \"classical\","]
#[doc = "                            \"hybrid\""]
#[doc = "                          ]"]
#[doc = "                        },"]
#[doc = "                        \"is_quantum\": {"]
#[doc = "                          \"description\": \"Indicates if the object has quantum properties.\","]
#[doc = "                          \"type\": \"boolean\""]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "                  \"fields\": {"]
#[doc = "                    \"bond_model\": {"]
#[doc = "                      \"description\": \"The physics model to apply to this bond.\","]
#[doc = "                      \"enum\": ["]
#[doc = "                        \"Dynamic\","]
#[doc = "                        \"Static\""]
#[doc = "                      ],"]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    },"]
#[doc = "                    \"dynamic_params\": {"]
#[doc = "                      \"description\": \"Parameters for the spring-damper model, used only if bond_model is 'Dynamic'.\","]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"base_damping_coefficient\": {"]
#[doc = "                          \"type\": \"number\""]
#[doc = "                        },"]
#[doc = "                        \"base_spring_constant\": {"]
#[doc = "                          \"type\": \"number\""]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"required\": ["]
#[doc = "                        \"base_spring_constant\","]
#[doc = "                        \"base_damping_coefficient\""]
#[doc = "                      ],"]
#[doc = "                      \"title\": \"BondPhysicsConfigDynamicParams\","]
#[doc = "                      \"type\": \"object\""]
#[doc = "                    },"]
#[doc = "                    \"static_params\": {"]
#[doc = "                      \"description\": \"Parameters for the associative model, used only if bond_model is 'Static'.\","]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"consolidation_boost\": {"]
#[doc = "                          \"type\": \"number\""]
#[doc = "                        },"]
#[doc = "                        \"emotional_anchor_strength\": {"]
#[doc = "                          \"type\": \"number\""]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"required\": ["]
#[doc = "                        \"consolidation_boost\","]
#[doc = "                        \"emotional_anchor_strength\""]
#[doc = "                      ],"]
#[doc = "                      \"title\": \"BondPhysicsConfigStaticParams\","]
#[doc = "                      \"type\": \"object\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"physics_properties\": {"]
#[doc = "                    \"engine\": \"classical\","]
#[doc = "                    \"is_quantum\": false"]
#[doc = "                  },"]
#[doc = "                  \"schema_version\": \"1.0.0\""]
#[doc = "                }"]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"entity_type\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/types/classification/EntityType.v1.json\","]
#[doc = "              \"title\": \"Entity Type\","]
#[doc = "              \"description\": \"A canonical enum of all 7 cognitive entity types.\","]
#[doc = "              \"type\": \"string\","]
#[doc = "              \"enum\": ["]
#[doc = "                \"Focus\","]
#[doc = "                \"Filament\","]
#[doc = "                \"Motif\","]
#[doc = "                \"Intent\","]
#[doc = "                \"Moment\","]
#[doc = "                \"Bond\","]
#[doc = "                \"Thread\""]
#[doc = "              ]"]
#[doc = "            },"]
#[doc = "            \"physics_state\": {"]
#[doc = "              \"title\": \"BondPhysicsState\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"tension\","]
#[doc = "                \"universal\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"tension\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/components/BondTension.v1.schema.json\","]
#[doc = "                  \"title\": \"Bond Tension Component\","]
#[doc = "                  \"description\": \"Models the classical physics of a relationship Bond, including its strength, tension, and resonance properties. This is managed by the Particular engine.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"fields\","]
#[doc = "                    \"physics_properties\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"fields\": {"]
#[doc = "                      \"title\": \"BaseFields\","]
#[doc = "                      \"description\": \"A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"patternProperties\": {"]
#[doc = "                        \"^[a-z_][a-z0-9_]*$\": {"]
#[doc = "                          \"oneOf\": ["]
#[doc = "                            {"]
#[doc = "                              \"description\": \"A direct reference to a shared definition in SharedDefinitions.schema.json.\","]
#[doc = "                              \"type\": \"object\","]
#[doc = "                              \"required\": ["]
#[doc = "                                \"$ref\""]
#[doc = "                              ],"]
#[doc = "                              \"properties\": {"]
#[doc = "                                \"$ref\": {"]
#[doc = "                                  \"type\": \"string\""]
#[doc = "                                }"]
#[doc = "                              },"]
#[doc = "                              \"additionalProperties\": false"]
#[doc = "                            },"]
#[doc = "                            {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/base/Field.v1.schema.json\","]
#[doc = "                              \"title\": \"Base Field\","]
#[doc = "                              \"description\": \"Defines the structure for a single, inline field definition within a component.\","]
#[doc = "                              \"type\": \"object\","]
#[doc = "                              \"required\": ["]
#[doc = "                                \"description\","]
#[doc = "                                \"type\""]
#[doc = "                              ],"]
#[doc = "                              \"properties\": {"]
#[doc = "                                \"constraints\": {"]
#[doc = "                                  \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "                                  \"title\": \"Constraint Definition\","]
#[doc = "                                  \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "                                  \"type\": \"object\","]
#[doc = "                                  \"properties\": {"]
#[doc = "                                    \"enum\": {"]
#[doc = "                                      \"type\": \"array\","]
#[doc = "                                      \"items\": {"]
#[doc = "                                        \"type\": \"string\""]
#[doc = "                                      }"]
#[doc = "                                    },"]
#[doc = "                                    \"maxLength\": {"]
#[doc = "                                      \"type\": \"integer\""]
#[doc = "                                    },"]
#[doc = "                                    \"maximum\": {"]
#[doc = "                                      \"type\": \"number\""]
#[doc = "                                    },"]
#[doc = "                                    \"minLength\": {"]
#[doc = "                                      \"type\": \"integer\""]
#[doc = "                                    },"]
#[doc = "                                    \"minimum\": {"]
#[doc = "                                      \"type\": \"number\""]
#[doc = "                                    },"]
#[doc = "                                    \"pattern\": {"]
#[doc = "                                      \"type\": \"string\""]
#[doc = "                                    }"]
#[doc = "                                  },"]
#[doc = "                                  \"additionalProperties\": false"]
#[doc = "                                },"]
#[doc = "                                \"default_value\": {"]
#[doc = "                                  \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "                                  \"title\": \"Any Value\","]
#[doc = "                                  \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "                                  \"type\": ["]
#[doc = "                                    \"string\","]
#[doc = "                                    \"number\","]
#[doc = "                                    \"integer\","]
#[doc = "                                    \"boolean\","]
#[doc = "                                    \"object\","]
#[doc = "                                    \"array\","]
#[doc = "                                    \"null\""]
#[doc = "                                  ]"]
#[doc = "                                },"]
#[doc = "                                \"description\": {"]
#[doc = "                                  \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "                                  \"title\": \"Description Field\","]
#[doc = "                                  \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "                                  \"default\": \"\","]
#[doc = "                                  \"type\": \"string\""]
#[doc = "                                },"]
#[doc = "                                \"type\": {"]
#[doc = "                                  \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "                                  \"title\": \"Base Type System\","]
#[doc = "                                  \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "                                  \"oneOf\": ["]
#[doc = "                                    {"]
#[doc = "                                      \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "                                      \"type\": \"string\","]
#[doc = "                                      \"enum\": ["]
#[doc = "                                        \"string\","]
#[doc = "                                        \"boolean\","]
#[doc = "                                        \"integer\","]
#[doc = "                                        \"number\","]
#[doc = "                                        \"f32\","]
#[doc = "                                        \"f64\","]
#[doc = "                                        \"i32\","]
#[doc = "                                        \"i64\","]
#[doc = "                                        \"u32\","]
#[doc = "                                        \"u64\","]
#[doc = "                                        \"uuid\","]
#[doc = "                                        \"date-time\","]
#[doc = "                                        \"duration\","]
#[doc = "                                        \"object\","]
#[doc = "                                        \"array\""]
#[doc = "                                      ]"]
#[doc = "                                    },"]
#[doc = "                                    {"]
#[doc = "                                      \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "                                      \"type\": \"object\","]
#[doc = "                                      \"required\": ["]
#[doc = "                                        \"$ref\""]
#[doc = "                                      ],"]
#[doc = "                                      \"properties\": {"]
#[doc = "                                        \"$ref\": {"]
#[doc = "                                          \"type\": \"string\""]
#[doc = "                                        }"]
#[doc = "                                      },"]
#[doc = "                                      \"additionalProperties\": false"]
#[doc = "                                    }"]
#[doc = "                                  ],"]
#[doc = "                                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                                },"]
#[doc = "                                \"ui_label\": {"]
#[doc = "                                  \"type\": \"string\""]
#[doc = "                                }"]
#[doc = "                              },"]
#[doc = "                              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                            }"]
#[doc = "                          ]"]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"additionalProperties\": false"]
#[doc = "                    },"]
#[doc = "                    \"physics_properties\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/base/PhysicsProperties.v1.schema.json\","]
#[doc = "                      \"title\": \"Base Physics Properties\","]
#[doc = "                      \"description\": \"Defines the common physics-related properties for components and laws.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"required\": ["]
#[doc = "                        \"engine\","]
#[doc = "                        \"is_quantum\""]
#[doc = "                      ],"]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"collapse_sensitive\": {"]
#[doc = "                          \"description\": \"Indicates if the object is affected by or triggers quantum collapse.\","]
#[doc = "                          \"type\": \"boolean\""]
#[doc = "                        },"]
#[doc = "                        \"engine\": {"]
#[doc = "                          \"description\": \"The physics engine responsible for this object.\","]
#[doc = "                          \"enum\": ["]
#[doc = "                            \"quantum\","]
#[doc = "                            \"classical\","]
#[doc = "                            \"hybrid\""]
#[doc = "                          ]"]
#[doc = "                        },"]
#[doc = "                        \"is_quantum\": {"]
#[doc = "                          \"description\": \"Indicates if the object has quantum properties.\","]
#[doc = "                          \"type\": \"boolean\""]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "                  \"fields\": {"]
#[doc = "                    \"bond_strength\": {"]
#[doc = "                      \"constraints\": {"]
#[doc = "                        \"maximum\": 1.0,"]
#[doc = "                        \"minimum\": 0.0"]
#[doc = "                      },"]
#[doc = "                      \"default\": 0.5,"]
#[doc = "                      \"description\": \"The overall strength or health of the bond.\","]
#[doc = "                      \"format\": \"double\","]
#[doc = "                      \"type\": \"number\","]
#[doc = "                      \"x-python-type\": \"float\","]
#[doc = "                      \"x-rust-type\": \"f64\""]
#[doc = "                    },"]
#[doc = "                    \"damping_coefficient\": {"]
#[doc = "                      \"default\": 0.5,"]
#[doc = "                      \"description\": \"The 'inertia' of the bond, representing how quickly it returns to equilibrium after a perturbation.\","]
#[doc = "                      \"format\": \"double\","]
#[doc = "                      \"type\": \"number\","]
#[doc = "                      \"x-python-type\": \"float\","]
#[doc = "                      \"x-rust-type\": \"f64\""]
#[doc = "                    },"]
#[doc = "                    \"resonance_phase\": {"]
#[doc = "                      \"default\": 0.0,"]
#[doc = "                      \"description\": \"The phase angle for resonance calculations with other bonds.\","]
#[doc = "                      \"format\": \"double\","]
#[doc = "                      \"type\": \"number\","]
#[doc = "                      \"x-python-type\": \"float\","]
#[doc = "                      \"x-rust-type\": \"f64\""]
#[doc = "                    },"]
#[doc = "                    \"spring_constant\": {"]
#[doc = "                      \"default\": 10.0,"]
#[doc = "                      \"description\": \"The 'stiffness' of the bond, representing its resistance to change.\","]
#[doc = "                      \"format\": \"double\","]
#[doc = "                      \"type\": \"number\","]
#[doc = "                      \"x-python-type\": \"float\","]
#[doc = "                      \"x-rust-type\": \"f64\""]
#[doc = "                    },"]
#[doc = "                    \"torsional_stress\": {"]
#[doc = "                      \"default\": 0.0,"]
#[doc = "                      \"description\": \"The cognitive dissonance or strain on the bond. Can be positive (creative tension) or negative (draining conflict).\","]
#[doc = "                      \"format\": \"double\","]
#[doc = "                      \"type\": \"number\","]
#[doc = "                      \"x-python-type\": \"float\","]
#[doc = "                      \"x-rust-type\": \"f64\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"physics_properties\": {"]
#[doc = "                    \"collapse_sensitive\": false,"]
#[doc = "                    \"engine\": \"classical\","]
#[doc = "                    \"is_quantum\": false"]
#[doc = "                  },"]
#[doc = "                  \"schema_version\": \"1.0.0\""]
#[doc = "                },"]
#[doc = "                \"universal\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/components/UniversalPhysicsState.v1.schema.json\","]
#[doc = "                  \"title\": \"Universal Physics State Component\","]
#[doc = "                  \"description\": \"The transient, mutable physics state of an entity.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"fields\": {"]
#[doc = "                      \"title\": \"UniversalPhysicsStateFields\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"required\": ["]
#[doc = "                        \"cognitive_perspective\","]
#[doc = "                        \"consolidation_rate\","]
#[doc = "                        \"decay_rate\","]
#[doc = "                        \"energy\","]
#[doc = "                        \"entanglement_strength\","]
#[doc = "                        \"momentum\","]
#[doc = "                        \"quantum_coherence\""]
#[doc = "                      ],"]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"cognitive_perspective\": {"]
#[doc = "                          \"$id\": \"https://familiar.dev/schemas/fields/CognitivePerspective.v1.schema.json\","]
#[doc = "                          \"title\": \"Cognitive Perspective Field\","]
#[doc = "                          \"description\": \"The intrinsic 'spin' or 'flavor' of the entity, which generates cognitive dissonance (torsion).\","]
#[doc = "                          \"ui_label\": \"Cognitive Perspective\""]
#[doc = "                        },"]
#[doc = "                        \"consolidation_rate\": {"]
#[doc = "                          \"$id\": \"https://familiar.dev/schemas/snippets/fields/ConsolidationRate.v1.json\","]
#[doc = "                          \"title\": \"Consolidation Rate Field\","]
#[doc = "                          \"description\": \"The base rate of memory consolidation for an entity, before multipliers are applied. Represents how quickly an unstable memory becomes stable.\","]
#[doc = "                          \"type\": \"object\","]
#[doc = "                          \"required\": ["]
#[doc = "                            \"value\""]
#[doc = "                          ],"]
#[doc = "                          \"properties\": {"]
#[doc = "                            \"value\": {"]
#[doc = "                              \"default\": 0.0,"]
#[doc = "                              \"type\": \"number\","]
#[doc = "                              \"format\": \"double\","]
#[doc = "                              \"maximum\": 1.0,"]
#[doc = "                              \"minimum\": 0.0,"]
#[doc = "                              \"x-python-type\": \"float\","]
#[doc = "                              \"x-rust-type\": \"f64\""]
#[doc = "                            }"]
#[doc = "                          },"]
#[doc = "                          \"additionalProperties\": false"]
#[doc = "                        },"]
#[doc = "                        \"decay_rate\": {"]
#[doc = "                          \"description\": \"The base rate of energy or coherence decay for an entity, before multipliers are applied.\","]
#[doc = "                          \"type\": \"object\","]
#[doc = "                          \"required\": ["]
#[doc = "                            \"value\""]
#[doc = "                          ],"]
#[doc = "                          \"properties\": {"]
#[doc = "                            \"value\": {"]
#[doc = "                              \"default\": 0.01,"]
#[doc = "                              \"type\": \"number\","]
#[doc = "                              \"format\": \"double\","]
#[doc = "                              \"x-python-type\": \"float\","]
#[doc = "                              \"x-rust-type\": \"f64\""]
#[doc = "                            }"]
#[doc = "                          },"]
#[doc = "                          \"additionalProperties\": false"]
#[doc = "                        },"]
#[doc = "                        \"energy\": {"]
#[doc = "                          \"description\": \"The current energy level of an entity.\","]
#[doc = "                          \"default\": 0.1,"]
#[doc = "                          \"type\": \"number\""]
#[doc = "                        },"]
#[doc = "                        \"entanglement_strength\": {"]
#[doc = "                          \"description\": \"The overall entanglement strength of this entity with others. Null for classical entities.\","]
#[doc = "                          \"default\": null,"]
#[doc = "                          \"type\": ["]
#[doc = "                            \"number\","]
#[doc = "                            \"null\""]
#[doc = "                          ],"]
#[doc = "                          \"maximum\": 1.0,"]
#[doc = "                          \"minimum\": 0.0"]
#[doc = "                        },"]
#[doc = "                        \"momentum\": {"]
#[doc = "                          \"$id\": \"https://familiar.dev/schemas/types/physics/Vec6.v1.json\","]
#[doc = "                          \"title\": \"6D Physics Vector\","]
#[doc = "                          \"description\": \"A reusable data type for a vector of six f64 numbers, used for momentum and forces in the 6 spatial dimensions of the manifold.\","]
#[doc = "                          \"type\": \"array\","]
#[doc = "                          \"items\": {"]
#[doc = "                            \"type\": \"number\""]
#[doc = "                          },"]
#[doc = "                          \"maxItems\": 6,"]
#[doc = "                          \"minItems\": 6"]
#[doc = "                        },"]
#[doc = "                        \"quantum_coherence\": {"]
#[doc = "                          \"description\": \"The quantum coherence level of the entity, representing its degree of superposition. Null for classical entities.\","]
#[doc = "                          \"default\": null,"]
#[doc = "                          \"type\": ["]
#[doc = "                            \"number\","]
#[doc = "                            \"null\""]
#[doc = "                          ],"]
#[doc = "                          \"maximum\": 1.0,"]
#[doc = "                          \"minimum\": 0.0"]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"additionalProperties\": false"]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "                  \"schema_version\": \"3.0.0\""]
#[doc = "                }"]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"thread_a_id\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/fields/EntityId.v1.json\","]
#[doc = "              \"title\": \"Entity ID Field\","]
#[doc = "              \"description\": \"A reusable definition for a unique entity identifier.\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"thread_b_id\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/fields/EntityId.v1.json\","]
#[doc = "              \"title\": \"Entity ID Field\","]
#[doc = "              \"description\": \"A reusable definition for a unique entity identifier.\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/entities/thread.v3.schema.json\","]
#[doc = "          \"title\": \"Thread\","]
#[doc = "          \"description\": \"A polymorphic Thread entity that can be either a PersonThread or a GenericThread.\","]
#[doc = "          \"oneOf\": ["]
#[doc = "            {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/entities/PersonThread.v1.schema.json\","]
#[doc = "              \"title\": \"Person Thread\","]
#[doc = "              \"description\": \"A Thread representing a person, which MUST have a CognitiveBaseline.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"components\","]
#[doc = "                \"created_at\","]
#[doc = "                \"entity_id\","]
#[doc = "                \"identity\","]
#[doc = "                \"physics_state\","]
#[doc = "                \"tenant_id\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"components\": {"]
#[doc = "                  \"title\": \"PersonThreadComponents\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"cognitive_baseline\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"cognitive_baseline\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/components/CognitiveBaseline.v1.schema.json\","]
#[doc = "                      \"title\": \"Cognitive Baseline Component\","]
#[doc = "                      \"description\": \"Defines the innate 'personality' or temperament of a Thread.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"required\": ["]
#[doc = "                        \"fields\","]
#[doc = "                        \"physics_properties\""]
#[doc = "                      ],"]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"fields\": {"]
#[doc = "                          \"title\": \"BaseFields\","]
#[doc = "                          \"description\": \"A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.\","]
#[doc = "                          \"type\": \"object\","]
#[doc = "                          \"patternProperties\": {"]
#[doc = "                            \"^[a-z_][a-z0-9_]*$\": {"]
#[doc = "                              \"oneOf\": ["]
#[doc = "                                {"]
#[doc = "                                  \"description\": \"A direct reference to a shared definition in SharedDefinitions.schema.json.\","]
#[doc = "                                  \"type\": \"object\","]
#[doc = "                                  \"required\": ["]
#[doc = "                                    \"$ref\""]
#[doc = "                                  ],"]
#[doc = "                                  \"properties\": {"]
#[doc = "                                    \"$ref\": {"]
#[doc = "                                      \"type\": \"string\""]
#[doc = "                                    }"]
#[doc = "                                  },"]
#[doc = "                                  \"additionalProperties\": false"]
#[doc = "                                },"]
#[doc = "                                {"]
#[doc = "                                  \"$id\": \"https://familiar.dev/schemas/base/Field.v1.schema.json\","]
#[doc = "                                  \"title\": \"Base Field\","]
#[doc = "                                  \"description\": \"Defines the structure for a single, inline field definition within a component.\","]
#[doc = "                                  \"type\": \"object\","]
#[doc = "                                  \"required\": ["]
#[doc = "                                    \"description\","]
#[doc = "                                    \"type\""]
#[doc = "                                  ],"]
#[doc = "                                  \"properties\": {"]
#[doc = "                                    \"constraints\": {"]
#[doc = "                                      \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "                                      \"title\": \"Constraint Definition\","]
#[doc = "                                      \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "                                      \"type\": \"object\","]
#[doc = "                                      \"properties\": {"]
#[doc = "                                        \"enum\": {"]
#[doc = "                                          \"type\": \"array\","]
#[doc = "                                          \"items\": {"]
#[doc = "                                            \"type\": \"string\""]
#[doc = "                                          }"]
#[doc = "                                        },"]
#[doc = "                                        \"maxLength\": {"]
#[doc = "                                          \"type\": \"integer\""]
#[doc = "                                        },"]
#[doc = "                                        \"maximum\": {"]
#[doc = "                                          \"type\": \"number\""]
#[doc = "                                        },"]
#[doc = "                                        \"minLength\": {"]
#[doc = "                                          \"type\": \"integer\""]
#[doc = "                                        },"]
#[doc = "                                        \"minimum\": {"]
#[doc = "                                          \"type\": \"number\""]
#[doc = "                                        },"]
#[doc = "                                        \"pattern\": {"]
#[doc = "                                          \"type\": \"string\""]
#[doc = "                                        }"]
#[doc = "                                      },"]
#[doc = "                                      \"additionalProperties\": false"]
#[doc = "                                    },"]
#[doc = "                                    \"default_value\": {"]
#[doc = "                                      \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "                                      \"title\": \"Any Value\","]
#[doc = "                                      \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "                                      \"type\": ["]
#[doc = "                                        \"string\","]
#[doc = "                                        \"number\","]
#[doc = "                                        \"integer\","]
#[doc = "                                        \"boolean\","]
#[doc = "                                        \"object\","]
#[doc = "                                        \"array\","]
#[doc = "                                        \"null\""]
#[doc = "                                      ]"]
#[doc = "                                    },"]
#[doc = "                                    \"description\": {"]
#[doc = "                                      \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "                                      \"title\": \"Description Field\","]
#[doc = "                                      \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "                                      \"default\": \"\","]
#[doc = "                                      \"type\": \"string\""]
#[doc = "                                    },"]
#[doc = "                                    \"type\": {"]
#[doc = "                                      \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "                                      \"title\": \"Base Type System\","]
#[doc = "                                      \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "                                      \"oneOf\": ["]
#[doc = "                                        {"]
#[doc = "                                          \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "                                          \"type\": \"string\","]
#[doc = "                                          \"enum\": ["]
#[doc = "                                            \"string\","]
#[doc = "                                            \"boolean\","]
#[doc = "                                            \"integer\","]
#[doc = "                                            \"number\","]
#[doc = "                                            \"f32\","]
#[doc = "                                            \"f64\","]
#[doc = "                                            \"i32\","]
#[doc = "                                            \"i64\","]
#[doc = "                                            \"u32\","]
#[doc = "                                            \"u64\","]
#[doc = "                                            \"uuid\","]
#[doc = "                                            \"date-time\","]
#[doc = "                                            \"duration\","]
#[doc = "                                            \"object\","]
#[doc = "                                            \"array\""]
#[doc = "                                          ]"]
#[doc = "                                        },"]
#[doc = "                                        {"]
#[doc = "                                          \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "                                          \"type\": \"object\","]
#[doc = "                                          \"required\": ["]
#[doc = "                                            \"$ref\""]
#[doc = "                                          ],"]
#[doc = "                                          \"properties\": {"]
#[doc = "                                            \"$ref\": {"]
#[doc = "                                              \"type\": \"string\""]
#[doc = "                                            }"]
#[doc = "                                          },"]
#[doc = "                                          \"additionalProperties\": false"]
#[doc = "                                        }"]
#[doc = "                                      ],"]
#[doc = "                                      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                                    },"]
#[doc = "                                    \"ui_label\": {"]
#[doc = "                                      \"type\": \"string\""]
#[doc = "                                    }"]
#[doc = "                                  },"]
#[doc = "                                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                                }"]
#[doc = "                              ]"]
#[doc = "                            }"]
#[doc = "                          },"]
#[doc = "                          \"additionalProperties\": false"]
#[doc = "                        },"]
#[doc = "                        \"physics_properties\": {"]
#[doc = "                          \"$id\": \"https://familiar.dev/schemas/base/PhysicsProperties.v1.schema.json\","]
#[doc = "                          \"title\": \"Base Physics Properties\","]
#[doc = "                          \"description\": \"Defines the common physics-related properties for components and laws.\","]
#[doc = "                          \"type\": \"object\","]
#[doc = "                          \"required\": ["]
#[doc = "                            \"engine\","]
#[doc = "                            \"is_quantum\""]
#[doc = "                          ],"]
#[doc = "                          \"properties\": {"]
#[doc = "                            \"collapse_sensitive\": {"]
#[doc = "                              \"description\": \"Indicates if the object is affected by or triggers quantum collapse.\","]
#[doc = "                              \"type\": \"boolean\""]
#[doc = "                            },"]
#[doc = "                            \"engine\": {"]
#[doc = "                              \"description\": \"The physics engine responsible for this object.\","]
#[doc = "                              \"enum\": ["]
#[doc = "                                \"quantum\","]
#[doc = "                                \"classical\","]
#[doc = "                                \"hybrid\""]
#[doc = "                              ]"]
#[doc = "                            },"]
#[doc = "                            \"is_quantum\": {"]
#[doc = "                              \"description\": \"Indicates if the object has quantum properties.\","]
#[doc = "                              \"type\": \"boolean\""]
#[doc = "                            }"]
#[doc = "                          },"]
#[doc = "                          \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "                      \"fields\": {"]
#[doc = "                        \"baseline\": {"]
#[doc = "                          \"description\": \"Defines the innate 'personality' or temperament of a Thread, modulating its physics interactions.\","]
#[doc = "                          \"properties\": {"]
#[doc = "                            \"bond_damping_factor\": {"]
#[doc = "                              \"description\": \"How resistant their bonds are to change. (UI Label: Relationship Stability)\","]
#[doc = "                              \"maximum\": 2.0,"]
#[doc = "                              \"minimum\": 0.5,"]
#[doc = "                              \"type\": \"number\""]
#[doc = "                            },"]
#[doc = "                            \"consolidation_rate_modifier\": {"]
#[doc = "                              \"description\": \"How quickly their memories become stable. (UI Label: Memory Consolidation)\","]
#[doc = "                              \"maximum\": 1.5,"]
#[doc = "                              \"minimum\": 0.8,"]
#[doc = "                              \"type\": \"number\""]
#[doc = "                            },"]
#[doc = "                            \"emotional_volatility\": {"]
#[doc = "                              \"description\": \"How strongly emotional events affect this person. (UI Label: Emotional Reactivity)\","]
#[doc = "                              \"maximum\": 2.0,"]
#[doc = "                              \"minimum\": 0.5,"]
#[doc = "                              \"type\": \"number\""]
#[doc = "                            },"]
#[doc = "                            \"exploration_bias\": {"]
#[doc = "                              \"description\": \"Tendency for creative, associative thinking. (UI Label: Openness to Experience)\","]
#[doc = "                              \"maximum\": 1.3,"]
#[doc = "                              \"minimum\": 0.7,"]
#[doc = "                              \"type\": \"number\""]
#[doc = "                            },"]
#[doc = "                            \"social_energy_factor\": {"]
#[doc = "                              \"description\": \"How energized they are by social interactions. (UI Label: Social Energy)\","]
#[doc = "                              \"maximum\": 1.2,"]
#[doc = "                              \"minimum\": 0.8,"]
#[doc = "                              \"type\": \"number\""]
#[doc = "                            }"]
#[doc = "                          },"]
#[doc = "                          \"required\": ["]
#[doc = "                            \"emotional_volatility\","]
#[doc = "                            \"social_energy_factor\","]
#[doc = "                            \"consolidation_rate_modifier\","]
#[doc = "                            \"bond_damping_factor\","]
#[doc = "                            \"exploration_bias\""]
#[doc = "                          ],"]
#[doc = "                          \"type\": \"object\""]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"physics_properties\": {"]
#[doc = "                        \"engine\": \"classical\","]
#[doc = "                        \"is_quantum\": false"]
#[doc = "                      },"]
#[doc = "                      \"schema_version\": \"1.0.0\""]
#[doc = "                    }"]
#[doc = "                  }"]
#[doc = "                },"]
#[doc = "                \"created_at\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/types/primitives/Timestamp.v1.json\","]
#[doc = "                  \"title\": \"Timestamp\","]
#[doc = "                  \"description\": \"A canonical definition for an ISO 8601 timestamp with timezone.\","]
#[doc = "                  \"type\": \"string\""]
#[doc = "                },"]
#[doc = "                \"entity_id\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/fields/EntityId.v1.json\","]
#[doc = "                  \"title\": \"Entity ID Field\","]
#[doc = "                  \"description\": \"A reusable definition for a unique entity identifier.\","]
#[doc = "                  \"type\": \"string\""]
#[doc = "                },"]
#[doc = "                \"identity\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/components/ThreadContent.v1.schema.json\","]
#[doc = "                  \"title\": \"Thread Content Component\","]
#[doc = "                  \"description\": \"Defines the core, immutable content of a Thread entity, such as its name and type.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"fields\","]
#[doc = "                    \"physics_properties\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"fields\": {"]
#[doc = "                      \"title\": \"BaseFields\","]
#[doc = "                      \"description\": \"A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"patternProperties\": {"]
#[doc = "                        \"^[a-z_][a-z0-9_]*$\": {"]
#[doc = "                          \"oneOf\": ["]
#[doc = "                            {"]
#[doc = "                              \"description\": \"A direct reference to a shared definition in SharedDefinitions.schema.json.\","]
#[doc = "                              \"type\": \"object\","]
#[doc = "                              \"required\": ["]
#[doc = "                                \"$ref\""]
#[doc = "                              ],"]
#[doc = "                              \"properties\": {"]
#[doc = "                                \"$ref\": {"]
#[doc = "                                  \"type\": \"string\""]
#[doc = "                                }"]
#[doc = "                              },"]
#[doc = "                              \"additionalProperties\": false"]
#[doc = "                            },"]
#[doc = "                            {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/base/Field.v1.schema.json\","]
#[doc = "                              \"title\": \"Base Field\","]
#[doc = "                              \"description\": \"Defines the structure for a single, inline field definition within a component.\","]
#[doc = "                              \"type\": \"object\","]
#[doc = "                              \"required\": ["]
#[doc = "                                \"description\","]
#[doc = "                                \"type\""]
#[doc = "                              ],"]
#[doc = "                              \"properties\": {"]
#[doc = "                                \"constraints\": {"]
#[doc = "                                  \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "                                  \"title\": \"Constraint Definition\","]
#[doc = "                                  \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "                                  \"type\": \"object\","]
#[doc = "                                  \"properties\": {"]
#[doc = "                                    \"enum\": {"]
#[doc = "                                      \"type\": \"array\","]
#[doc = "                                      \"items\": {"]
#[doc = "                                        \"type\": \"string\""]
#[doc = "                                      }"]
#[doc = "                                    },"]
#[doc = "                                    \"maxLength\": {"]
#[doc = "                                      \"type\": \"integer\""]
#[doc = "                                    },"]
#[doc = "                                    \"maximum\": {"]
#[doc = "                                      \"type\": \"number\""]
#[doc = "                                    },"]
#[doc = "                                    \"minLength\": {"]
#[doc = "                                      \"type\": \"integer\""]
#[doc = "                                    },"]
#[doc = "                                    \"minimum\": {"]
#[doc = "                                      \"type\": \"number\""]
#[doc = "                                    },"]
#[doc = "                                    \"pattern\": {"]
#[doc = "                                      \"type\": \"string\""]
#[doc = "                                    }"]
#[doc = "                                  },"]
#[doc = "                                  \"additionalProperties\": false"]
#[doc = "                                },"]
#[doc = "                                \"default_value\": {"]
#[doc = "                                  \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "                                  \"title\": \"Any Value\","]
#[doc = "                                  \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "                                  \"type\": ["]
#[doc = "                                    \"string\","]
#[doc = "                                    \"number\","]
#[doc = "                                    \"integer\","]
#[doc = "                                    \"boolean\","]
#[doc = "                                    \"object\","]
#[doc = "                                    \"array\","]
#[doc = "                                    \"null\""]
#[doc = "                                  ]"]
#[doc = "                                },"]
#[doc = "                                \"description\": {"]
#[doc = "                                  \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "                                  \"title\": \"Description Field\","]
#[doc = "                                  \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "                                  \"default\": \"\","]
#[doc = "                                  \"type\": \"string\""]
#[doc = "                                },"]
#[doc = "                                \"type\": {"]
#[doc = "                                  \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "                                  \"title\": \"Base Type System\","]
#[doc = "                                  \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "                                  \"oneOf\": ["]
#[doc = "                                    {"]
#[doc = "                                      \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "                                      \"type\": \"string\","]
#[doc = "                                      \"enum\": ["]
#[doc = "                                        \"string\","]
#[doc = "                                        \"boolean\","]
#[doc = "                                        \"integer\","]
#[doc = "                                        \"number\","]
#[doc = "                                        \"f32\","]
#[doc = "                                        \"f64\","]
#[doc = "                                        \"i32\","]
#[doc = "                                        \"i64\","]
#[doc = "                                        \"u32\","]
#[doc = "                                        \"u64\","]
#[doc = "                                        \"uuid\","]
#[doc = "                                        \"date-time\","]
#[doc = "                                        \"duration\","]
#[doc = "                                        \"object\","]
#[doc = "                                        \"array\""]
#[doc = "                                      ]"]
#[doc = "                                    },"]
#[doc = "                                    {"]
#[doc = "                                      \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "                                      \"type\": \"object\","]
#[doc = "                                      \"required\": ["]
#[doc = "                                        \"$ref\""]
#[doc = "                                      ],"]
#[doc = "                                      \"properties\": {"]
#[doc = "                                        \"$ref\": {"]
#[doc = "                                          \"type\": \"string\""]
#[doc = "                                        }"]
#[doc = "                                      },"]
#[doc = "                                      \"additionalProperties\": false"]
#[doc = "                                    }"]
#[doc = "                                  ],"]
#[doc = "                                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                                },"]
#[doc = "                                \"ui_label\": {"]
#[doc = "                                  \"type\": \"string\""]
#[doc = "                                }"]
#[doc = "                              },"]
#[doc = "                              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                            }"]
#[doc = "                          ]"]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"additionalProperties\": false"]
#[doc = "                    },"]
#[doc = "                    \"physics_properties\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/base/PhysicsProperties.v1.schema.json\","]
#[doc = "                      \"title\": \"Base Physics Properties\","]
#[doc = "                      \"description\": \"Defines the common physics-related properties for components and laws.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"required\": ["]
#[doc = "                        \"engine\","]
#[doc = "                        \"is_quantum\""]
#[doc = "                      ],"]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"collapse_sensitive\": {"]
#[doc = "                          \"description\": \"Indicates if the object is affected by or triggers quantum collapse.\","]
#[doc = "                          \"type\": \"boolean\""]
#[doc = "                        },"]
#[doc = "                        \"engine\": {"]
#[doc = "                          \"description\": \"The physics engine responsible for this object.\","]
#[doc = "                          \"enum\": ["]
#[doc = "                            \"quantum\","]
#[doc = "                            \"classical\","]
#[doc = "                            \"hybrid\""]
#[doc = "                          ]"]
#[doc = "                        },"]
#[doc = "                        \"is_quantum\": {"]
#[doc = "                          \"description\": \"Indicates if the object has quantum properties.\","]
#[doc = "                          \"type\": \"boolean\""]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "                  \"fields\": {"]
#[doc = "                    \"aliases\": {"]
#[doc = "                      \"description\": \"A list of alternative names for this Thread (e.g., nicknames).\","]
#[doc = "                      \"items\": {"]
#[doc = "                        \"type\": \"string\""]
#[doc = "                      },"]
#[doc = "                      \"type\": \"array\""]
#[doc = "                    },"]
#[doc = "                    \"description\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "                      \"default\": \"\","]
#[doc = "                      \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "                      \"title\": \"Description Field\","]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    },"]
#[doc = "                    \"name\": {"]
#[doc = "                      \"description\": \"The primary, human-readable name of an entity.\","]
#[doc = "                      \"title\": \"Name Field\","]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    },"]
#[doc = "                    \"thread_type\": {"]
#[doc = "                      \"description\": \"The Platonic Form of the Thread, enforcing abstract relationships.\","]
#[doc = "                      \"enum\": ["]
#[doc = "                        \"Person\","]
#[doc = "                        \"Place\","]
#[doc = "                        \"Concept\","]
#[doc = "                        \"GenericObject\""]
#[doc = "                      ],"]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"physics_properties\": {"]
#[doc = "                    \"engine\": \"classical\","]
#[doc = "                    \"is_quantum\": false"]
#[doc = "                  },"]
#[doc = "                  \"schema_version\": \"1.2.0\""]
#[doc = "                },"]
#[doc = "                \"physics_state\": {"]
#[doc = "                  \"title\": \"PersonThreadPhysicsState\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"universal\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"universal\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/components/UniversalPhysicsState.v1.schema.json\","]
#[doc = "                      \"title\": \"Universal Physics State Component\","]
#[doc = "                      \"description\": \"The transient, mutable physics state of an entity.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"fields\": {"]
#[doc = "                          \"title\": \"UniversalPhysicsStateFields\","]
#[doc = "                          \"type\": \"object\","]
#[doc = "                          \"required\": ["]
#[doc = "                            \"cognitive_perspective\","]
#[doc = "                            \"consolidation_rate\","]
#[doc = "                            \"decay_rate\","]
#[doc = "                            \"energy\","]
#[doc = "                            \"entanglement_strength\","]
#[doc = "                            \"momentum\","]
#[doc = "                            \"quantum_coherence\""]
#[doc = "                          ],"]
#[doc = "                          \"properties\": {"]
#[doc = "                            \"cognitive_perspective\": {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/fields/CognitivePerspective.v1.schema.json\","]
#[doc = "                              \"title\": \"Cognitive Perspective Field\","]
#[doc = "                              \"description\": \"The intrinsic 'spin' or 'flavor' of the entity, which generates cognitive dissonance (torsion).\","]
#[doc = "                              \"ui_label\": \"Cognitive Perspective\""]
#[doc = "                            },"]
#[doc = "                            \"consolidation_rate\": {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/snippets/fields/ConsolidationRate.v1.json\","]
#[doc = "                              \"title\": \"Consolidation Rate Field\","]
#[doc = "                              \"description\": \"The base rate of memory consolidation for an entity, before multipliers are applied. Represents how quickly an unstable memory becomes stable.\","]
#[doc = "                              \"type\": \"object\","]
#[doc = "                              \"required\": ["]
#[doc = "                                \"value\""]
#[doc = "                              ],"]
#[doc = "                              \"properties\": {"]
#[doc = "                                \"value\": {"]
#[doc = "                                  \"default\": 0.0,"]
#[doc = "                                  \"type\": \"number\","]
#[doc = "                                  \"format\": \"double\","]
#[doc = "                                  \"maximum\": 1.0,"]
#[doc = "                                  \"minimum\": 0.0,"]
#[doc = "                                  \"x-python-type\": \"float\","]
#[doc = "                                  \"x-rust-type\": \"f64\""]
#[doc = "                                }"]
#[doc = "                              },"]
#[doc = "                              \"additionalProperties\": false"]
#[doc = "                            },"]
#[doc = "                            \"decay_rate\": {"]
#[doc = "                              \"description\": \"The base rate of energy or coherence decay for an entity, before multipliers are applied.\","]
#[doc = "                              \"type\": \"object\","]
#[doc = "                              \"required\": ["]
#[doc = "                                \"value\""]
#[doc = "                              ],"]
#[doc = "                              \"properties\": {"]
#[doc = "                                \"value\": {"]
#[doc = "                                  \"default\": 0.01,"]
#[doc = "                                  \"type\": \"number\","]
#[doc = "                                  \"format\": \"double\","]
#[doc = "                                  \"x-python-type\": \"float\","]
#[doc = "                                  \"x-rust-type\": \"f64\""]
#[doc = "                                }"]
#[doc = "                              },"]
#[doc = "                              \"additionalProperties\": false"]
#[doc = "                            },"]
#[doc = "                            \"energy\": {"]
#[doc = "                              \"description\": \"The current energy level of an entity.\","]
#[doc = "                              \"default\": 0.1,"]
#[doc = "                              \"type\": \"number\""]
#[doc = "                            },"]
#[doc = "                            \"entanglement_strength\": {"]
#[doc = "                              \"description\": \"The overall entanglement strength of this entity with others. Null for classical entities.\","]
#[doc = "                              \"default\": null,"]
#[doc = "                              \"type\": ["]
#[doc = "                                \"number\","]
#[doc = "                                \"null\""]
#[doc = "                              ],"]
#[doc = "                              \"maximum\": 1.0,"]
#[doc = "                              \"minimum\": 0.0"]
#[doc = "                            },"]
#[doc = "                            \"momentum\": {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/types/physics/Vec6.v1.json\","]
#[doc = "                              \"title\": \"6D Physics Vector\","]
#[doc = "                              \"description\": \"A reusable data type for a vector of six f64 numbers, used for momentum and forces in the 6 spatial dimensions of the manifold.\","]
#[doc = "                              \"type\": \"array\","]
#[doc = "                              \"items\": {"]
#[doc = "                                \"type\": \"number\""]
#[doc = "                              },"]
#[doc = "                              \"maxItems\": 6,"]
#[doc = "                              \"minItems\": 6"]
#[doc = "                            },"]
#[doc = "                            \"quantum_coherence\": {"]
#[doc = "                              \"description\": \"The quantum coherence level of the entity, representing its degree of superposition. Null for classical entities.\","]
#[doc = "                              \"default\": null,"]
#[doc = "                              \"type\": ["]
#[doc = "                                \"number\","]
#[doc = "                                \"null\""]
#[doc = "                              ],"]
#[doc = "                              \"maximum\": 1.0,"]
#[doc = "                              \"minimum\": 0.0"]
#[doc = "                            }"]
#[doc = "                          },"]
#[doc = "                          \"additionalProperties\": false"]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "                      \"schema_version\": \"3.0.0\""]
#[doc = "                    }"]
#[doc = "                  }"]
#[doc = "                },"]
#[doc = "                \"tenant_id\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/types/primitives/UUID.v1.json\","]
#[doc = "                  \"title\": \"UUID\","]
#[doc = "                  \"description\": \"A canonical definition for a Universally Unique Identifier (UUID).\","]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "              \"schema_version\": \"1.1.0\""]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/entities/GenericThread.v1.schema.json\","]
#[doc = "              \"title\": \"Generic Thread\","]
#[doc = "              \"description\": \"A Thread representing a Place, Concept, or GenericObject, which MUST NOT have a CognitiveBaseline.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"created_at\","]
#[doc = "                \"entity_id\","]
#[doc = "                \"identity\","]
#[doc = "                \"physics_state\","]
#[doc = "                \"tenant_id\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"created_at\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/types/primitives/Timestamp.v1.json\","]
#[doc = "                  \"title\": \"Timestamp\","]
#[doc = "                  \"description\": \"A canonical definition for an ISO 8601 timestamp with timezone.\","]
#[doc = "                  \"type\": \"string\""]
#[doc = "                },"]
#[doc = "                \"entity_id\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/fields/EntityId.v1.json\","]
#[doc = "                  \"title\": \"Entity ID Field\","]
#[doc = "                  \"description\": \"A reusable definition for a unique entity identifier.\","]
#[doc = "                  \"type\": \"string\""]
#[doc = "                },"]
#[doc = "                \"identity\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/components/ThreadContent.v1.schema.json\","]
#[doc = "                  \"title\": \"Thread Content Component\","]
#[doc = "                  \"description\": \"Defines the core, immutable content of a Thread entity, such as its name and type.\","]
#[doc = "                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "                  \"fields\": {"]
#[doc = "                    \"aliases\": {"]
#[doc = "                      \"description\": \"A list of alternative names for this Thread (e.g., nicknames).\","]
#[doc = "                      \"items\": {"]
#[doc = "                        \"type\": \"string\""]
#[doc = "                      },"]
#[doc = "                      \"type\": \"array\""]
#[doc = "                    },"]
#[doc = "                    \"description\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "                      \"default\": \"\","]
#[doc = "                      \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "                      \"title\": \"Description Field\","]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    },"]
#[doc = "                    \"name\": {"]
#[doc = "                      \"description\": \"The primary, human-readable name of an entity.\","]
#[doc = "                      \"title\": \"Name Field\","]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    },"]
#[doc = "                    \"thread_type\": {"]
#[doc = "                      \"description\": \"The Platonic Form of the Thread, enforcing abstract relationships.\","]
#[doc = "                      \"enum\": ["]
#[doc = "                        \"Person\","]
#[doc = "                        \"Place\","]
#[doc = "                        \"Concept\","]
#[doc = "                        \"GenericObject\""]
#[doc = "                      ],"]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"physics_properties\": {"]
#[doc = "                    \"engine\": \"classical\","]
#[doc = "                    \"is_quantum\": false"]
#[doc = "                  },"]
#[doc = "                  \"schema_version\": \"1.2.0\""]
#[doc = "                },"]
#[doc = "                \"physics_state\": {"]
#[doc = "                  \"title\": \"GenericThreadPhysicsState\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"universal\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"universal\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/components/UniversalPhysicsState.v1.schema.json\","]
#[doc = "                      \"title\": \"Universal Physics State Component\","]
#[doc = "                      \"description\": \"The transient, mutable physics state of an entity.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"fields\": {"]
#[doc = "                          \"title\": \"UniversalPhysicsStateFields\","]
#[doc = "                          \"type\": \"object\","]
#[doc = "                          \"required\": ["]
#[doc = "                            \"cognitive_perspective\","]
#[doc = "                            \"consolidation_rate\","]
#[doc = "                            \"decay_rate\","]
#[doc = "                            \"energy\","]
#[doc = "                            \"entanglement_strength\","]
#[doc = "                            \"momentum\","]
#[doc = "                            \"quantum_coherence\""]
#[doc = "                          ],"]
#[doc = "                          \"properties\": {"]
#[doc = "                            \"cognitive_perspective\": {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/fields/CognitivePerspective.v1.schema.json\","]
#[doc = "                              \"title\": \"Cognitive Perspective Field\","]
#[doc = "                              \"description\": \"The intrinsic 'spin' or 'flavor' of the entity, which generates cognitive dissonance (torsion).\","]
#[doc = "                              \"ui_label\": \"Cognitive Perspective\""]
#[doc = "                            },"]
#[doc = "                            \"consolidation_rate\": {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/snippets/fields/ConsolidationRate.v1.json\","]
#[doc = "                              \"title\": \"Consolidation Rate Field\","]
#[doc = "                              \"description\": \"The base rate of memory consolidation for an entity, before multipliers are applied. Represents how quickly an unstable memory becomes stable.\","]
#[doc = "                              \"type\": \"object\","]
#[doc = "                              \"required\": ["]
#[doc = "                                \"value\""]
#[doc = "                              ],"]
#[doc = "                              \"properties\": {"]
#[doc = "                                \"value\": {"]
#[doc = "                                  \"default\": 0.0,"]
#[doc = "                                  \"type\": \"number\","]
#[doc = "                                  \"format\": \"double\","]
#[doc = "                                  \"maximum\": 1.0,"]
#[doc = "                                  \"minimum\": 0.0,"]
#[doc = "                                  \"x-python-type\": \"float\","]
#[doc = "                                  \"x-rust-type\": \"f64\""]
#[doc = "                                }"]
#[doc = "                              },"]
#[doc = "                              \"additionalProperties\": false"]
#[doc = "                            },"]
#[doc = "                            \"decay_rate\": {"]
#[doc = "                              \"description\": \"The base rate of energy or coherence decay for an entity, before multipliers are applied.\","]
#[doc = "                              \"type\": \"object\","]
#[doc = "                              \"required\": ["]
#[doc = "                                \"value\""]
#[doc = "                              ],"]
#[doc = "                              \"properties\": {"]
#[doc = "                                \"value\": {"]
#[doc = "                                  \"default\": 0.01,"]
#[doc = "                                  \"type\": \"number\","]
#[doc = "                                  \"format\": \"double\","]
#[doc = "                                  \"x-python-type\": \"float\","]
#[doc = "                                  \"x-rust-type\": \"f64\""]
#[doc = "                                }"]
#[doc = "                              },"]
#[doc = "                              \"additionalProperties\": false"]
#[doc = "                            },"]
#[doc = "                            \"energy\": {"]
#[doc = "                              \"description\": \"The current energy level of an entity.\","]
#[doc = "                              \"default\": 0.1,"]
#[doc = "                              \"type\": \"number\""]
#[doc = "                            },"]
#[doc = "                            \"entanglement_strength\": {"]
#[doc = "                              \"description\": \"The overall entanglement strength of this entity with others. Null for classical entities.\","]
#[doc = "                              \"default\": null,"]
#[doc = "                              \"type\": ["]
#[doc = "                                \"number\","]
#[doc = "                                \"null\""]
#[doc = "                              ],"]
#[doc = "                              \"maximum\": 1.0,"]
#[doc = "                              \"minimum\": 0.0"]
#[doc = "                            },"]
#[doc = "                            \"momentum\": {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/types/physics/Vec6.v1.json\","]
#[doc = "                              \"title\": \"6D Physics Vector\","]
#[doc = "                              \"description\": \"A reusable data type for a vector of six f64 numbers, used for momentum and forces in the 6 spatial dimensions of the manifold.\","]
#[doc = "                              \"type\": \"array\","]
#[doc = "                              \"items\": {"]
#[doc = "                                \"type\": \"number\""]
#[doc = "                              },"]
#[doc = "                              \"maxItems\": 6,"]
#[doc = "                              \"minItems\": 6"]
#[doc = "                            },"]
#[doc = "                            \"quantum_coherence\": {"]
#[doc = "                              \"description\": \"The quantum coherence level of the entity, representing its degree of superposition. Null for classical entities.\","]
#[doc = "                              \"default\": null,"]
#[doc = "                              \"type\": ["]
#[doc = "                                \"number\","]
#[doc = "                                \"null\""]
#[doc = "                              ],"]
#[doc = "                              \"maximum\": 1.0,"]
#[doc = "                              \"minimum\": 0.0"]
#[doc = "                            }"]
#[doc = "                          },"]
#[doc = "                          \"additionalProperties\": false"]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "                      \"schema_version\": \"3.0.0\""]
#[doc = "                    }"]
#[doc = "                  }"]
#[doc = "                },"]
#[doc = "                \"tenant_id\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/types/primitives/UUID.v1.json\","]
#[doc = "                  \"title\": \"UUID\","]
#[doc = "                  \"description\": \"A canonical definition for a Universally Unique Identifier (UUID).\","]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "              \"schema_version\": \"1.1.0\""]
#[doc = "            }"]
#[doc = "          ],"]
#[doc = "          \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/entities/Motif.v1.schema.json\","]
#[doc = "          \"title\": \"Motif Entity\","]
#[doc = "          \"description\": \"A quantum entity representing a recurring pattern of subjective experiences, derived from the consolidation of EntanglementState entities.\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"required\": ["]
#[doc = "            \"components\","]
#[doc = "            \"entity_type\","]
#[doc = "            \"physics_state\""]
#[doc = "          ],"]
#[doc = "          \"properties\": {"]
#[doc = "            \"components\": {"]
#[doc = "              \"title\": \"MotifComponents\","]
#[doc = "              \"description\": \"Component references temporarily disabled for pipeline testing\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"consolidation\","]
#[doc = "                \"content\","]
#[doc = "                \"gdpr\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"_comment\": {"]
#[doc = "                  \"description\": \"TODO: Re-enable component references when component schemas are available\","]
#[doc = "                  \"type\": \"string\""]
#[doc = "                },"]
#[doc = "                \"consolidation\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/components/ConsolidationState.v1.schema.json\","]
#[doc = "                  \"title\": \"Consolidation State Component\","]
#[doc = "                  \"description\": \"Tracks the temporal consolidation state of a Motif or Filament.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"fields\","]
#[doc = "                    \"physics_properties\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"fields\": {"]
#[doc = "                      \"title\": \"ConsolidationStateFields\","]
#[doc = "                      \"description\": \"A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"required\": ["]
#[doc = "                        \"consolidation_level\","]
#[doc = "                        \"last_consolidated_at\","]
#[doc = "                        \"next_consolidation_due\","]
#[doc = "                        \"source_entity_count\""]
#[doc = "                      ],"]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"consolidation_level\": {"]
#[doc = "                          \"$id\": \"https://familiar.dev/schemas/types/system/ConsolidationLevel.v1.json\","]
#[doc = "                          \"title\": \"Consolidation Level\","]
#[doc = "                          \"description\": \"A canonical enum for the temporal consolidation level of a Motif or Filament.\","]
#[doc = "                          \"type\": \"string\","]
#[doc = "                          \"enum\": ["]
#[doc = "                            \"Daily\","]
#[doc = "                            \"Weekly\","]
#[doc = "                            \"Monthly\","]
#[doc = "                            \"Yearly\","]
#[doc = "                            \"Archived\""]
#[doc = "                          ]"]
#[doc = "                        },"]
#[doc = "                        \"last_consolidated_at\": {"]
#[doc = "                          \"$id\": \"https://familiar.dev/schemas/types/primitives/NullableTimestamp.v1.json\","]
#[doc = "                          \"title\": \"Nullable Timestamp\","]
#[doc = "                          \"description\": \"A canonical definition for an optional ISO 8601 timestamp with timezone.\","]
#[doc = "                          \"type\": ["]
#[doc = "                            \"string\","]
#[doc = "                            \"null\""]
#[doc = "                          ]"]
#[doc = "                        },"]
#[doc = "                        \"next_consolidation_due\": {"]
#[doc = "                          \"$id\": \"https://familiar.dev/schemas/types/primitives/NullableTimestamp.v1.json\","]
#[doc = "                          \"title\": \"Nullable Timestamp\","]
#[doc = "                          \"description\": \"A canonical definition for an optional ISO 8601 timestamp with timezone.\","]
#[doc = "                          \"type\": ["]
#[doc = "                            \"string\","]
#[doc = "                            \"null\""]
#[doc = "                          ]"]
#[doc = "                        },"]
#[doc = "                        \"source_entity_count\": {"]
#[doc = "                          \"type\": \"integer\","]
#[doc = "                          \"minimum\": 1.0"]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"patternProperties\": {"]
#[doc = "                        \"^[a-z_][a-z0-9_]*$\": {"]
#[doc = "                          \"oneOf\": ["]
#[doc = "                            {"]
#[doc = "                              \"description\": \"A direct reference to a shared definition in SharedDefinitions.schema.json.\","]
#[doc = "                              \"type\": \"object\","]
#[doc = "                              \"required\": ["]
#[doc = "                                \"$ref\""]
#[doc = "                              ],"]
#[doc = "                              \"properties\": {"]
#[doc = "                                \"$ref\": {"]
#[doc = "                                  \"type\": \"string\""]
#[doc = "                                }"]
#[doc = "                              },"]
#[doc = "                              \"additionalProperties\": false"]
#[doc = "                            },"]
#[doc = "                            {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/base/Field.v1.schema.json\","]
#[doc = "                              \"title\": \"Base Field\","]
#[doc = "                              \"description\": \"Defines the structure for a single, inline field definition within a component.\","]
#[doc = "                              \"type\": \"object\","]
#[doc = "                              \"required\": ["]
#[doc = "                                \"description\","]
#[doc = "                                \"type\""]
#[doc = "                              ],"]
#[doc = "                              \"properties\": {"]
#[doc = "                                \"constraints\": {"]
#[doc = "                                  \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "                                  \"title\": \"Constraint Definition\","]
#[doc = "                                  \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "                                  \"type\": \"object\","]
#[doc = "                                  \"properties\": {"]
#[doc = "                                    \"enum\": {"]
#[doc = "                                      \"type\": \"array\","]
#[doc = "                                      \"items\": {"]
#[doc = "                                        \"type\": \"string\""]
#[doc = "                                      }"]
#[doc = "                                    },"]
#[doc = "                                    \"maxLength\": {"]
#[doc = "                                      \"type\": \"integer\""]
#[doc = "                                    },"]
#[doc = "                                    \"maximum\": {"]
#[doc = "                                      \"type\": \"number\""]
#[doc = "                                    },"]
#[doc = "                                    \"minLength\": {"]
#[doc = "                                      \"type\": \"integer\""]
#[doc = "                                    },"]
#[doc = "                                    \"minimum\": {"]
#[doc = "                                      \"type\": \"number\""]
#[doc = "                                    },"]
#[doc = "                                    \"pattern\": {"]
#[doc = "                                      \"type\": \"string\""]
#[doc = "                                    }"]
#[doc = "                                  },"]
#[doc = "                                  \"additionalProperties\": false"]
#[doc = "                                },"]
#[doc = "                                \"default_value\": {"]
#[doc = "                                  \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "                                  \"title\": \"Any Value\","]
#[doc = "                                  \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "                                  \"type\": ["]
#[doc = "                                    \"string\","]
#[doc = "                                    \"number\","]
#[doc = "                                    \"integer\","]
#[doc = "                                    \"boolean\","]
#[doc = "                                    \"object\","]
#[doc = "                                    \"array\","]
#[doc = "                                    \"null\""]
#[doc = "                                  ]"]
#[doc = "                                },"]
#[doc = "                                \"description\": {"]
#[doc = "                                  \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "                                  \"title\": \"Description Field\","]
#[doc = "                                  \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "                                  \"default\": \"\","]
#[doc = "                                  \"type\": \"string\""]
#[doc = "                                },"]
#[doc = "                                \"type\": {"]
#[doc = "                                  \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "                                  \"title\": \"Base Type System\","]
#[doc = "                                  \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "                                  \"oneOf\": ["]
#[doc = "                                    {"]
#[doc = "                                      \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "                                      \"type\": \"string\","]
#[doc = "                                      \"enum\": ["]
#[doc = "                                        \"string\","]
#[doc = "                                        \"boolean\","]
#[doc = "                                        \"integer\","]
#[doc = "                                        \"number\","]
#[doc = "                                        \"f32\","]
#[doc = "                                        \"f64\","]
#[doc = "                                        \"i32\","]
#[doc = "                                        \"i64\","]
#[doc = "                                        \"u32\","]
#[doc = "                                        \"u64\","]
#[doc = "                                        \"uuid\","]
#[doc = "                                        \"date-time\","]
#[doc = "                                        \"duration\","]
#[doc = "                                        \"object\","]
#[doc = "                                        \"array\""]
#[doc = "                                      ]"]
#[doc = "                                    },"]
#[doc = "                                    {"]
#[doc = "                                      \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "                                      \"type\": \"object\","]
#[doc = "                                      \"required\": ["]
#[doc = "                                        \"$ref\""]
#[doc = "                                      ],"]
#[doc = "                                      \"properties\": {"]
#[doc = "                                        \"$ref\": {"]
#[doc = "                                          \"type\": \"string\""]
#[doc = "                                        }"]
#[doc = "                                      },"]
#[doc = "                                      \"additionalProperties\": false"]
#[doc = "                                    }"]
#[doc = "                                  ],"]
#[doc = "                                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                                },"]
#[doc = "                                \"ui_label\": {"]
#[doc = "                                  \"type\": \"string\""]
#[doc = "                                }"]
#[doc = "                              },"]
#[doc = "                              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                            }"]
#[doc = "                          ]"]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"additionalProperties\": false"]
#[doc = "                    },"]
#[doc = "                    \"physics_properties\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/base/PhysicsProperties.v1.schema.json\","]
#[doc = "                      \"title\": \"Base Physics Properties\","]
#[doc = "                      \"description\": \"Defines the common physics-related properties for components and laws.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"required\": ["]
#[doc = "                        \"engine\","]
#[doc = "                        \"is_quantum\""]
#[doc = "                      ],"]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"collapse_sensitive\": {"]
#[doc = "                          \"description\": \"Indicates if the object is affected by or triggers quantum collapse.\","]
#[doc = "                          \"type\": \"boolean\""]
#[doc = "                        },"]
#[doc = "                        \"engine\": {"]
#[doc = "                          \"description\": \"The physics engine responsible for this object.\","]
#[doc = "                          \"enum\": ["]
#[doc = "                            \"quantum\","]
#[doc = "                            \"classical\","]
#[doc = "                            \"hybrid\""]
#[doc = "                          ]"]
#[doc = "                        },"]
#[doc = "                        \"is_quantum\": {"]
#[doc = "                          \"description\": \"Indicates if the object has quantum properties.\","]
#[doc = "                          \"type\": \"boolean\""]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "                  \"physics_properties\": {"]
#[doc = "                    \"engine\": \"classical\","]
#[doc = "                    \"is_quantum\": false"]
#[doc = "                  },"]
#[doc = "                  \"schema_version\": \"1.2.0\""]
#[doc = "                },"]
#[doc = "                \"content\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/components/MotifContent.v1.schema.json\","]
#[doc = "                  \"title\": \"Motif Content Component\","]
#[doc = "                  \"description\": \"Defines the emergent pattern content of a Motif entity. This is a quantum component.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"fields\","]
#[doc = "                    \"physics_properties\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"fields\": {"]
#[doc = "                      \"title\": \"MotifContentFields\","]
#[doc = "                      \"description\": \"A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"required\": ["]
#[doc = "                        \"motif_description\","]
#[doc = "                        \"motif_type\","]
#[doc = "                        \"source_entanglements\""]
#[doc = "                      ],"]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"motif_description\": {"]
#[doc = "                          \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "                          \"title\": \"Description Field\","]
#[doc = "                          \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "                          \"default\": \"\","]
#[doc = "                          \"type\": \"string\""]
#[doc = "                        },"]
#[doc = "                        \"motif_type\": {"]
#[doc = "                          \"$id\": \"https://familiar.dev/schemas/types/physics/MotifType.v1.json\","]
#[doc = "                          \"title\": \"Motif Type\","]
#[doc = "                          \"description\": \"A canonical enum of the types of recurring themes or motifs in memory.\","]
#[doc = "                          \"type\": \"string\","]
#[doc = "                          \"enum\": ["]
#[doc = "                            \"Behavioral\","]
#[doc = "                            \"Emotional\","]
#[doc = "                            \"Situational\","]
#[doc = "                            \"Temporal\""]
#[doc = "                          ]"]
#[doc = "                        },"]
#[doc = "                        \"source_entanglements\": {"]
#[doc = "                          \"$id\": \"https://familiar.dev/schemas/types/primitives/EntityIdList.v1.json\","]
#[doc = "                          \"title\": \"Entity ID List\","]
#[doc = "                          \"description\": \"A canonical definition for a list of unique entity identifiers (UUIDs).\","]
#[doc = "                          \"type\": \"array\","]
#[doc = "                          \"items\": {"]
#[doc = "                            \"type\": \"string\""]
#[doc = "                          },"]
#[doc = "                          \"uniqueItems\": true"]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"patternProperties\": {"]
#[doc = "                        \"^[a-z_][a-z0-9_]*$\": {"]
#[doc = "                          \"oneOf\": ["]
#[doc = "                            {"]
#[doc = "                              \"description\": \"A direct reference to a shared definition in SharedDefinitions.schema.json.\","]
#[doc = "                              \"type\": \"object\","]
#[doc = "                              \"required\": ["]
#[doc = "                                \"$ref\""]
#[doc = "                              ],"]
#[doc = "                              \"properties\": {"]
#[doc = "                                \"$ref\": {"]
#[doc = "                                  \"type\": \"string\""]
#[doc = "                                }"]
#[doc = "                              },"]
#[doc = "                              \"additionalProperties\": false"]
#[doc = "                            },"]
#[doc = "                            {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/base/Field.v1.schema.json\","]
#[doc = "                              \"title\": \"Base Field\","]
#[doc = "                              \"description\": \"Defines the structure for a single, inline field definition within a component.\","]
#[doc = "                              \"type\": \"object\","]
#[doc = "                              \"required\": ["]
#[doc = "                                \"description\","]
#[doc = "                                \"type\""]
#[doc = "                              ],"]
#[doc = "                              \"properties\": {"]
#[doc = "                                \"constraints\": {"]
#[doc = "                                  \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "                                  \"title\": \"Constraint Definition\","]
#[doc = "                                  \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "                                  \"type\": \"object\","]
#[doc = "                                  \"properties\": {"]
#[doc = "                                    \"enum\": {"]
#[doc = "                                      \"type\": \"array\","]
#[doc = "                                      \"items\": {"]
#[doc = "                                        \"type\": \"string\""]
#[doc = "                                      }"]
#[doc = "                                    },"]
#[doc = "                                    \"maxLength\": {"]
#[doc = "                                      \"type\": \"integer\""]
#[doc = "                                    },"]
#[doc = "                                    \"maximum\": {"]
#[doc = "                                      \"type\": \"number\""]
#[doc = "                                    },"]
#[doc = "                                    \"minLength\": {"]
#[doc = "                                      \"type\": \"integer\""]
#[doc = "                                    },"]
#[doc = "                                    \"minimum\": {"]
#[doc = "                                      \"type\": \"number\""]
#[doc = "                                    },"]
#[doc = "                                    \"pattern\": {"]
#[doc = "                                      \"type\": \"string\""]
#[doc = "                                    }"]
#[doc = "                                  },"]
#[doc = "                                  \"additionalProperties\": false"]
#[doc = "                                },"]
#[doc = "                                \"default_value\": {"]
#[doc = "                                  \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "                                  \"title\": \"Any Value\","]
#[doc = "                                  \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "                                  \"type\": ["]
#[doc = "                                    \"string\","]
#[doc = "                                    \"number\","]
#[doc = "                                    \"integer\","]
#[doc = "                                    \"boolean\","]
#[doc = "                                    \"object\","]
#[doc = "                                    \"array\","]
#[doc = "                                    \"null\""]
#[doc = "                                  ]"]
#[doc = "                                },"]
#[doc = "                                \"description\": {"]
#[doc = "                                  \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "                                  \"title\": \"Description Field\","]
#[doc = "                                  \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "                                  \"default\": \"\","]
#[doc = "                                  \"type\": \"string\""]
#[doc = "                                },"]
#[doc = "                                \"type\": {"]
#[doc = "                                  \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "                                  \"title\": \"Base Type System\","]
#[doc = "                                  \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "                                  \"oneOf\": ["]
#[doc = "                                    {"]
#[doc = "                                      \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "                                      \"type\": \"string\","]
#[doc = "                                      \"enum\": ["]
#[doc = "                                        \"string\","]
#[doc = "                                        \"boolean\","]
#[doc = "                                        \"integer\","]
#[doc = "                                        \"number\","]
#[doc = "                                        \"f32\","]
#[doc = "                                        \"f64\","]
#[doc = "                                        \"i32\","]
#[doc = "                                        \"i64\","]
#[doc = "                                        \"u32\","]
#[doc = "                                        \"u64\","]
#[doc = "                                        \"uuid\","]
#[doc = "                                        \"date-time\","]
#[doc = "                                        \"duration\","]
#[doc = "                                        \"object\","]
#[doc = "                                        \"array\""]
#[doc = "                                      ]"]
#[doc = "                                    },"]
#[doc = "                                    {"]
#[doc = "                                      \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "                                      \"type\": \"object\","]
#[doc = "                                      \"required\": ["]
#[doc = "                                        \"$ref\""]
#[doc = "                                      ],"]
#[doc = "                                      \"properties\": {"]
#[doc = "                                        \"$ref\": {"]
#[doc = "                                          \"type\": \"string\""]
#[doc = "                                        }"]
#[doc = "                                      },"]
#[doc = "                                      \"additionalProperties\": false"]
#[doc = "                                    }"]
#[doc = "                                  ],"]
#[doc = "                                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                                },"]
#[doc = "                                \"ui_label\": {"]
#[doc = "                                  \"type\": \"string\""]
#[doc = "                                }"]
#[doc = "                              },"]
#[doc = "                              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                            }"]
#[doc = "                          ]"]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"additionalProperties\": false"]
#[doc = "                    },"]
#[doc = "                    \"physics_properties\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/base/PhysicsProperties.v1.schema.json\","]
#[doc = "                      \"title\": \"Base Physics Properties\","]
#[doc = "                      \"description\": \"Defines the common physics-related properties for components and laws.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"required\": ["]
#[doc = "                        \"engine\","]
#[doc = "                        \"is_quantum\""]
#[doc = "                      ],"]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"collapse_sensitive\": {"]
#[doc = "                          \"description\": \"Indicates if the object is affected by or triggers quantum collapse.\","]
#[doc = "                          \"type\": \"boolean\""]
#[doc = "                        },"]
#[doc = "                        \"engine\": {"]
#[doc = "                          \"description\": \"The physics engine responsible for this object.\","]
#[doc = "                          \"enum\": ["]
#[doc = "                            \"quantum\","]
#[doc = "                            \"classical\","]
#[doc = "                            \"hybrid\""]
#[doc = "                          ]"]
#[doc = "                        },"]
#[doc = "                        \"is_quantum\": {"]
#[doc = "                          \"description\": \"Indicates if the object has quantum properties.\","]
#[doc = "                          \"type\": \"boolean\""]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "                  \"physics_properties\": {"]
#[doc = "                    \"engine\": \"quantum\","]
#[doc = "                    \"is_quantum\": true"]
#[doc = "                  },"]
#[doc = "                  \"schema_version\": \"1.4.0\""]
#[doc = "                },"]
#[doc = "                \"gdpr\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/components/GDPRDependency.v1.schema.json\","]
#[doc = "                  \"title\": \"GDPR Dependency Component\","]
#[doc = "                  \"description\": \"Tracks data provenance to enable compliant cascading deletions for GDPR's Right to Erasure.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"fields\","]
#[doc = "                    \"physics_properties\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"fields\": {"]
#[doc = "                      \"title\": \"BaseFields\","]
#[doc = "                      \"description\": \"A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"patternProperties\": {"]
#[doc = "                        \"^[a-z_][a-z0-9_]*$\": {"]
#[doc = "                          \"oneOf\": ["]
#[doc = "                            {"]
#[doc = "                              \"description\": \"A direct reference to a shared definition in SharedDefinitions.schema.json.\","]
#[doc = "                              \"type\": \"object\","]
#[doc = "                              \"required\": ["]
#[doc = "                                \"$ref\""]
#[doc = "                              ],"]
#[doc = "                              \"properties\": {"]
#[doc = "                                \"$ref\": {"]
#[doc = "                                  \"type\": \"string\""]
#[doc = "                                }"]
#[doc = "                              },"]
#[doc = "                              \"additionalProperties\": false"]
#[doc = "                            },"]
#[doc = "                            {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/base/Field.v1.schema.json\","]
#[doc = "                              \"title\": \"Base Field\","]
#[doc = "                              \"description\": \"Defines the structure for a single, inline field definition within a component.\","]
#[doc = "                              \"type\": \"object\","]
#[doc = "                              \"required\": ["]
#[doc = "                                \"description\","]
#[doc = "                                \"type\""]
#[doc = "                              ],"]
#[doc = "                              \"properties\": {"]
#[doc = "                                \"constraints\": {"]
#[doc = "                                  \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "                                  \"title\": \"Constraint Definition\","]
#[doc = "                                  \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "                                  \"type\": \"object\","]
#[doc = "                                  \"properties\": {"]
#[doc = "                                    \"enum\": {"]
#[doc = "                                      \"type\": \"array\","]
#[doc = "                                      \"items\": {"]
#[doc = "                                        \"type\": \"string\""]
#[doc = "                                      }"]
#[doc = "                                    },"]
#[doc = "                                    \"maxLength\": {"]
#[doc = "                                      \"type\": \"integer\""]
#[doc = "                                    },"]
#[doc = "                                    \"maximum\": {"]
#[doc = "                                      \"type\": \"number\""]
#[doc = "                                    },"]
#[doc = "                                    \"minLength\": {"]
#[doc = "                                      \"type\": \"integer\""]
#[doc = "                                    },"]
#[doc = "                                    \"minimum\": {"]
#[doc = "                                      \"type\": \"number\""]
#[doc = "                                    },"]
#[doc = "                                    \"pattern\": {"]
#[doc = "                                      \"type\": \"string\""]
#[doc = "                                    }"]
#[doc = "                                  },"]
#[doc = "                                  \"additionalProperties\": false"]
#[doc = "                                },"]
#[doc = "                                \"default_value\": {"]
#[doc = "                                  \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "                                  \"title\": \"Any Value\","]
#[doc = "                                  \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "                                  \"type\": ["]
#[doc = "                                    \"string\","]
#[doc = "                                    \"number\","]
#[doc = "                                    \"integer\","]
#[doc = "                                    \"boolean\","]
#[doc = "                                    \"object\","]
#[doc = "                                    \"array\","]
#[doc = "                                    \"null\""]
#[doc = "                                  ]"]
#[doc = "                                },"]
#[doc = "                                \"description\": {"]
#[doc = "                                  \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "                                  \"title\": \"Description Field\","]
#[doc = "                                  \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "                                  \"default\": \"\","]
#[doc = "                                  \"type\": \"string\""]
#[doc = "                                },"]
#[doc = "                                \"type\": {"]
#[doc = "                                  \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "                                  \"title\": \"Base Type System\","]
#[doc = "                                  \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "                                  \"oneOf\": ["]
#[doc = "                                    {"]
#[doc = "                                      \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "                                      \"type\": \"string\","]
#[doc = "                                      \"enum\": ["]
#[doc = "                                        \"string\","]
#[doc = "                                        \"boolean\","]
#[doc = "                                        \"integer\","]
#[doc = "                                        \"number\","]
#[doc = "                                        \"f32\","]
#[doc = "                                        \"f64\","]
#[doc = "                                        \"i32\","]
#[doc = "                                        \"i64\","]
#[doc = "                                        \"u32\","]
#[doc = "                                        \"u64\","]
#[doc = "                                        \"uuid\","]
#[doc = "                                        \"date-time\","]
#[doc = "                                        \"duration\","]
#[doc = "                                        \"object\","]
#[doc = "                                        \"array\""]
#[doc = "                                      ]"]
#[doc = "                                    },"]
#[doc = "                                    {"]
#[doc = "                                      \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "                                      \"type\": \"object\","]
#[doc = "                                      \"required\": ["]
#[doc = "                                        \"$ref\""]
#[doc = "                                      ],"]
#[doc = "                                      \"properties\": {"]
#[doc = "                                        \"$ref\": {"]
#[doc = "                                          \"type\": \"string\""]
#[doc = "                                        }"]
#[doc = "                                      },"]
#[doc = "                                      \"additionalProperties\": false"]
#[doc = "                                    }"]
#[doc = "                                  ],"]
#[doc = "                                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                                },"]
#[doc = "                                \"ui_label\": {"]
#[doc = "                                  \"type\": \"string\""]
#[doc = "                                }"]
#[doc = "                              },"]
#[doc = "                              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                            }"]
#[doc = "                          ]"]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"additionalProperties\": false"]
#[doc = "                    },"]
#[doc = "                    \"physics_properties\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/base/PhysicsProperties.v1.schema.json\","]
#[doc = "                      \"title\": \"Base Physics Properties\","]
#[doc = "                      \"description\": \"Defines the common physics-related properties for components and laws.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"required\": ["]
#[doc = "                        \"engine\","]
#[doc = "                        \"is_quantum\""]
#[doc = "                      ],"]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"collapse_sensitive\": {"]
#[doc = "                          \"description\": \"Indicates if the object is affected by or triggers quantum collapse.\","]
#[doc = "                          \"type\": \"boolean\""]
#[doc = "                        },"]
#[doc = "                        \"engine\": {"]
#[doc = "                          \"description\": \"The physics engine responsible for this object.\","]
#[doc = "                          \"enum\": ["]
#[doc = "                            \"quantum\","]
#[doc = "                            \"classical\","]
#[doc = "                            \"hybrid\""]
#[doc = "                          ]"]
#[doc = "                        },"]
#[doc = "                        \"is_quantum\": {"]
#[doc = "                          \"description\": \"Indicates if the object has quantum properties.\","]
#[doc = "                          \"type\": \"boolean\""]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "                  \"fields\": {"]
#[doc = "                    \"contributing_users\": {"]
#[doc = "                      \"description\": \"A set of User IDs whose data contributed to this entity's existence or state.\","]
#[doc = "                      \"items\": {"]
#[doc = "                        \"type\": \"uuid\""]
#[doc = "                      },"]
#[doc = "                      \"type\": \"array\","]
#[doc = "                      \"uniqueItems\": true"]
#[doc = "                    },"]
#[doc = "                    \"upstream_dependencies\": {"]
#[doc = "                      \"description\": \"A list of source entity IDs (e.g., Moments) that this entity (e.g., a Motif) depends on.\","]
#[doc = "                      \"items\": {"]
#[doc = "                        \"type\": \"uuid\""]
#[doc = "                      },"]
#[doc = "                      \"type\": \"array\""]
#[doc = "                    },"]
#[doc = "                    \"user_evidence_weights\": {"]
#[doc = "                      \"additionalProperties\": {"]
#[doc = "                        \"maximum\": 1.0,"]
#[doc = "                        \"minimum\": 0.0,"]
#[doc = "                        \"type\": \"number\""]
#[doc = "                      },"]
#[doc = "                      \"type\": \"object\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"physics_properties\": {"]
#[doc = "                    \"engine\": \"classical\","]
#[doc = "                    \"is_quantum\": false"]
#[doc = "                  },"]
#[doc = "                  \"schema_version\": \"1.0.0\""]
#[doc = "                }"]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"entity_type\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/types/classification/EntityType.v1.json\","]
#[doc = "              \"title\": \"Entity Type\","]
#[doc = "              \"description\": \"A canonical enum of all 7 cognitive entity types.\","]
#[doc = "              \"type\": \"string\","]
#[doc = "              \"enum\": ["]
#[doc = "                \"Focus\","]
#[doc = "                \"Filament\","]
#[doc = "                \"Motif\","]
#[doc = "                \"Intent\","]
#[doc = "                \"Moment\","]
#[doc = "                \"Bond\","]
#[doc = "                \"Thread\""]
#[doc = "              ]"]
#[doc = "            },"]
#[doc = "            \"physics_state\": {"]
#[doc = "              \"title\": \"MotifPhysicsState\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"quantum\","]
#[doc = "                \"universal\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"quantum\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/components/QuantumState.v1.schema.json\","]
#[doc = "                  \"title\": \"Quantum State Component\","]
#[doc = "                  \"description\": \"Manages the quantum properties of an entity, including its superposition and entanglement.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"fields\","]
#[doc = "                    \"physics_properties\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"fields\": {"]
#[doc = "                      \"title\": \"BaseFields\","]
#[doc = "                      \"description\": \"A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"patternProperties\": {"]
#[doc = "                        \"^[a-z_][a-z0-9_]*$\": {"]
#[doc = "                          \"oneOf\": ["]
#[doc = "                            {"]
#[doc = "                              \"description\": \"A direct reference to a shared definition in SharedDefinitions.schema.json.\","]
#[doc = "                              \"type\": \"object\","]
#[doc = "                              \"required\": ["]
#[doc = "                                \"$ref\""]
#[doc = "                              ],"]
#[doc = "                              \"properties\": {"]
#[doc = "                                \"$ref\": {"]
#[doc = "                                  \"type\": \"string\""]
#[doc = "                                }"]
#[doc = "                              },"]
#[doc = "                              \"additionalProperties\": false"]
#[doc = "                            },"]
#[doc = "                            {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/base/Field.v1.schema.json\","]
#[doc = "                              \"title\": \"Base Field\","]
#[doc = "                              \"description\": \"Defines the structure for a single, inline field definition within a component.\","]
#[doc = "                              \"type\": \"object\","]
#[doc = "                              \"required\": ["]
#[doc = "                                \"description\","]
#[doc = "                                \"type\""]
#[doc = "                              ],"]
#[doc = "                              \"properties\": {"]
#[doc = "                                \"constraints\": {"]
#[doc = "                                  \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "                                  \"title\": \"Constraint Definition\","]
#[doc = "                                  \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "                                  \"type\": \"object\","]
#[doc = "                                  \"properties\": {"]
#[doc = "                                    \"enum\": {"]
#[doc = "                                      \"type\": \"array\","]
#[doc = "                                      \"items\": {"]
#[doc = "                                        \"type\": \"string\""]
#[doc = "                                      }"]
#[doc = "                                    },"]
#[doc = "                                    \"maxLength\": {"]
#[doc = "                                      \"type\": \"integer\""]
#[doc = "                                    },"]
#[doc = "                                    \"maximum\": {"]
#[doc = "                                      \"type\": \"number\""]
#[doc = "                                    },"]
#[doc = "                                    \"minLength\": {"]
#[doc = "                                      \"type\": \"integer\""]
#[doc = "                                    },"]
#[doc = "                                    \"minimum\": {"]
#[doc = "                                      \"type\": \"number\""]
#[doc = "                                    },"]
#[doc = "                                    \"pattern\": {"]
#[doc = "                                      \"type\": \"string\""]
#[doc = "                                    }"]
#[doc = "                                  },"]
#[doc = "                                  \"additionalProperties\": false"]
#[doc = "                                },"]
#[doc = "                                \"default_value\": {"]
#[doc = "                                  \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "                                  \"title\": \"Any Value\","]
#[doc = "                                  \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "                                  \"type\": ["]
#[doc = "                                    \"string\","]
#[doc = "                                    \"number\","]
#[doc = "                                    \"integer\","]
#[doc = "                                    \"boolean\","]
#[doc = "                                    \"object\","]
#[doc = "                                    \"array\","]
#[doc = "                                    \"null\""]
#[doc = "                                  ]"]
#[doc = "                                },"]
#[doc = "                                \"description\": {"]
#[doc = "                                  \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "                                  \"title\": \"Description Field\","]
#[doc = "                                  \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "                                  \"default\": \"\","]
#[doc = "                                  \"type\": \"string\""]
#[doc = "                                },"]
#[doc = "                                \"type\": {"]
#[doc = "                                  \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "                                  \"title\": \"Base Type System\","]
#[doc = "                                  \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "                                  \"oneOf\": ["]
#[doc = "                                    {"]
#[doc = "                                      \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "                                      \"type\": \"string\","]
#[doc = "                                      \"enum\": ["]
#[doc = "                                        \"string\","]
#[doc = "                                        \"boolean\","]
#[doc = "                                        \"integer\","]
#[doc = "                                        \"number\","]
#[doc = "                                        \"f32\","]
#[doc = "                                        \"f64\","]
#[doc = "                                        \"i32\","]
#[doc = "                                        \"i64\","]
#[doc = "                                        \"u32\","]
#[doc = "                                        \"u64\","]
#[doc = "                                        \"uuid\","]
#[doc = "                                        \"date-time\","]
#[doc = "                                        \"duration\","]
#[doc = "                                        \"object\","]
#[doc = "                                        \"array\""]
#[doc = "                                      ]"]
#[doc = "                                    },"]
#[doc = "                                    {"]
#[doc = "                                      \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "                                      \"type\": \"object\","]
#[doc = "                                      \"required\": ["]
#[doc = "                                        \"$ref\""]
#[doc = "                                      ],"]
#[doc = "                                      \"properties\": {"]
#[doc = "                                        \"$ref\": {"]
#[doc = "                                          \"type\": \"string\""]
#[doc = "                                        }"]
#[doc = "                                      },"]
#[doc = "                                      \"additionalProperties\": false"]
#[doc = "                                    }"]
#[doc = "                                  ],"]
#[doc = "                                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                                },"]
#[doc = "                                \"ui_label\": {"]
#[doc = "                                  \"type\": \"string\""]
#[doc = "                                }"]
#[doc = "                              },"]
#[doc = "                              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                            }"]
#[doc = "                          ]"]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"additionalProperties\": false"]
#[doc = "                    },"]
#[doc = "                    \"physics_properties\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/base/PhysicsProperties.v1.schema.json\","]
#[doc = "                      \"title\": \"Base Physics Properties\","]
#[doc = "                      \"description\": \"Defines the common physics-related properties for components and laws.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"required\": ["]
#[doc = "                        \"engine\","]
#[doc = "                        \"is_quantum\""]
#[doc = "                      ],"]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"collapse_sensitive\": {"]
#[doc = "                          \"description\": \"Indicates if the object is affected by or triggers quantum collapse.\","]
#[doc = "                          \"type\": \"boolean\""]
#[doc = "                        },"]
#[doc = "                        \"engine\": {"]
#[doc = "                          \"description\": \"The physics engine responsible for this object.\","]
#[doc = "                          \"enum\": ["]
#[doc = "                            \"quantum\","]
#[doc = "                            \"classical\","]
#[doc = "                            \"hybrid\""]
#[doc = "                          ]"]
#[doc = "                        },"]
#[doc = "                        \"is_quantum\": {"]
#[doc = "                          \"description\": \"Indicates if the object has quantum properties.\","]
#[doc = "                          \"type\": \"boolean\""]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "                  \"fields\": {"]
#[doc = "                    \"coherence_score\": {"]
#[doc = "                      \"description\": \"The purity of the quantum state (0.0 = maximally mixed, 1.0 = pure).\","]
#[doc = "                      \"maximum\": 1.0,"]
#[doc = "                      \"minimum\": 0.0,"]
#[doc = "                      \"type\": \"number\""]
#[doc = "                    },"]
#[doc = "                    \"density_matrix\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/types/physics/DensityMatrix.v1.json\","]
#[doc = "                      \"description\": \"A 2x2 matrix of complex numbers representing a quantum state.\","]
#[doc = "                      \"items\": {"]
#[doc = "                        \"items\": {"]
#[doc = "                          \"$id\": \"https://familiar.dev/schemas/types/physics/ComplexNumber.v1.json\","]
#[doc = "                          \"description\": \"Represents a complex number with real and imaginary parts.\","]
#[doc = "                          \"properties\": {"]
#[doc = "                            \"imaginary\": {"]
#[doc = "                              \"type\": \"number\""]
#[doc = "                            },"]
#[doc = "                            \"real\": {"]
#[doc = "                              \"type\": \"number\""]
#[doc = "                            }"]
#[doc = "                          },"]
#[doc = "                          \"required\": ["]
#[doc = "                            \"real\","]
#[doc = "                            \"imaginary\""]
#[doc = "                          ],"]
#[doc = "                          \"title\": \"Complex Number\","]
#[doc = "                          \"type\": \"object\""]
#[doc = "                        },"]
#[doc = "                        \"maxItems\": 2,"]
#[doc = "                        \"minItems\": 2,"]
#[doc = "                        \"type\": \"array\""]
#[doc = "                      },"]
#[doc = "                      \"maxItems\": 2,"]
#[doc = "                      \"minItems\": 2,"]
#[doc = "                      \"title\": \"Density Matrix\","]
#[doc = "                      \"type\": \"array\""]
#[doc = "                    },"]
#[doc = "                    \"entanglement_network\": {"]
#[doc = "                      \"additionalProperties\": {"]
#[doc = "                        \"maximum\": 1.0,"]
#[doc = "                        \"minimum\": 0.0,"]
#[doc = "                        \"type\": \"number\""]
#[doc = "                      },"]
#[doc = "                      \"type\": \"object\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"physics_properties\": {"]
#[doc = "                    \"engine\": \"quantum\","]
#[doc = "                    \"is_quantum\": true"]
#[doc = "                  },"]
#[doc = "                  \"schema_version\": \"1.0.0\""]
#[doc = "                },"]
#[doc = "                \"universal\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/components/UniversalPhysicsState.v1.schema.json\","]
#[doc = "                  \"title\": \"Universal Physics State Component\","]
#[doc = "                  \"description\": \"The transient, mutable physics state of an entity.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"fields\": {"]
#[doc = "                      \"title\": \"UniversalPhysicsStateFields\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"required\": ["]
#[doc = "                        \"cognitive_perspective\","]
#[doc = "                        \"consolidation_rate\","]
#[doc = "                        \"decay_rate\","]
#[doc = "                        \"energy\","]
#[doc = "                        \"entanglement_strength\","]
#[doc = "                        \"momentum\","]
#[doc = "                        \"quantum_coherence\""]
#[doc = "                      ],"]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"cognitive_perspective\": {"]
#[doc = "                          \"$id\": \"https://familiar.dev/schemas/fields/CognitivePerspective.v1.schema.json\","]
#[doc = "                          \"title\": \"Cognitive Perspective Field\","]
#[doc = "                          \"description\": \"The intrinsic 'spin' or 'flavor' of the entity, which generates cognitive dissonance (torsion).\","]
#[doc = "                          \"ui_label\": \"Cognitive Perspective\""]
#[doc = "                        },"]
#[doc = "                        \"consolidation_rate\": {"]
#[doc = "                          \"$id\": \"https://familiar.dev/schemas/snippets/fields/ConsolidationRate.v1.json\","]
#[doc = "                          \"title\": \"Consolidation Rate Field\","]
#[doc = "                          \"description\": \"The base rate of memory consolidation for an entity, before multipliers are applied. Represents how quickly an unstable memory becomes stable.\","]
#[doc = "                          \"type\": \"object\","]
#[doc = "                          \"required\": ["]
#[doc = "                            \"value\""]
#[doc = "                          ],"]
#[doc = "                          \"properties\": {"]
#[doc = "                            \"value\": {"]
#[doc = "                              \"default\": 0.0,"]
#[doc = "                              \"type\": \"number\","]
#[doc = "                              \"format\": \"double\","]
#[doc = "                              \"maximum\": 1.0,"]
#[doc = "                              \"minimum\": 0.0,"]
#[doc = "                              \"x-python-type\": \"float\","]
#[doc = "                              \"x-rust-type\": \"f64\""]
#[doc = "                            }"]
#[doc = "                          },"]
#[doc = "                          \"additionalProperties\": false"]
#[doc = "                        },"]
#[doc = "                        \"decay_rate\": {"]
#[doc = "                          \"description\": \"The base rate of energy or coherence decay for an entity, before multipliers are applied.\","]
#[doc = "                          \"type\": \"object\","]
#[doc = "                          \"required\": ["]
#[doc = "                            \"value\""]
#[doc = "                          ],"]
#[doc = "                          \"properties\": {"]
#[doc = "                            \"value\": {"]
#[doc = "                              \"default\": 0.01,"]
#[doc = "                              \"type\": \"number\","]
#[doc = "                              \"format\": \"double\","]
#[doc = "                              \"x-python-type\": \"float\","]
#[doc = "                              \"x-rust-type\": \"f64\""]
#[doc = "                            }"]
#[doc = "                          },"]
#[doc = "                          \"additionalProperties\": false"]
#[doc = "                        },"]
#[doc = "                        \"energy\": {"]
#[doc = "                          \"description\": \"The current energy level of an entity.\","]
#[doc = "                          \"default\": 0.1,"]
#[doc = "                          \"type\": \"number\""]
#[doc = "                        },"]
#[doc = "                        \"entanglement_strength\": {"]
#[doc = "                          \"description\": \"The overall entanglement strength of this entity with others. Null for classical entities.\","]
#[doc = "                          \"default\": null,"]
#[doc = "                          \"type\": ["]
#[doc = "                            \"number\","]
#[doc = "                            \"null\""]
#[doc = "                          ],"]
#[doc = "                          \"maximum\": 1.0,"]
#[doc = "                          \"minimum\": 0.0"]
#[doc = "                        },"]
#[doc = "                        \"momentum\": {"]
#[doc = "                          \"$id\": \"https://familiar.dev/schemas/types/physics/Vec6.v1.json\","]
#[doc = "                          \"title\": \"6D Physics Vector\","]
#[doc = "                          \"description\": \"A reusable data type for a vector of six f64 numbers, used for momentum and forces in the 6 spatial dimensions of the manifold.\","]
#[doc = "                          \"type\": \"array\","]
#[doc = "                          \"items\": {"]
#[doc = "                            \"type\": \"number\""]
#[doc = "                          },"]
#[doc = "                          \"maxItems\": 6,"]
#[doc = "                          \"minItems\": 6"]
#[doc = "                        },"]
#[doc = "                        \"quantum_coherence\": {"]
#[doc = "                          \"description\": \"The quantum coherence level of the entity, representing its degree of superposition. Null for classical entities.\","]
#[doc = "                          \"default\": null,"]
#[doc = "                          \"type\": ["]
#[doc = "                            \"number\","]
#[doc = "                            \"null\""]
#[doc = "                          ],"]
#[doc = "                          \"maximum\": 1.0,"]
#[doc = "                          \"minimum\": 0.0"]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"additionalProperties\": false"]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "                  \"schema_version\": \"3.0.0\""]
#[doc = "                }"]
#[doc = "              }"]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/entities/Filament.v1.schema.json\","]
#[doc = "          \"title\": \"Filament Entity\","]
#[doc = "          \"description\": \"A quantum entity representing a high-level, emergent narrative, belief, or worldview, derived from the analysis of Threads and Bonds.\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"required\": ["]
#[doc = "            \"components\","]
#[doc = "            \"entity_type\","]
#[doc = "            \"physics_state\""]
#[doc = "          ],"]
#[doc = "          \"properties\": {"]
#[doc = "            \"components\": {"]
#[doc = "              \"title\": \"FilamentComponents\","]
#[doc = "              \"description\": \"Component references temporarily disabled for pipeline testing\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"consolidation\","]
#[doc = "                \"content\","]
#[doc = "                \"gdpr\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"_comment\": {"]
#[doc = "                  \"description\": \"TODO: Re-enable component references when component schemas are available\","]
#[doc = "                  \"type\": \"string\""]
#[doc = "                },"]
#[doc = "                \"consolidation\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/components/ConsolidationState.v1.schema.json\","]
#[doc = "                  \"title\": \"Consolidation State Component\","]
#[doc = "                  \"description\": \"Tracks the temporal consolidation state of a Motif or Filament.\","]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"fields\": {"]
#[doc = "                      \"title\": \"ConsolidationStateFields\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"required\": ["]
#[doc = "                        \"consolidation_level\","]
#[doc = "                        \"last_consolidated_at\","]
#[doc = "                        \"next_consolidation_due\","]
#[doc = "                        \"source_entity_count\""]
#[doc = "                      ],"]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"consolidation_level\": {"]
#[doc = "                          \"$id\": \"https://familiar.dev/schemas/types/system/ConsolidationLevel.v1.json\","]
#[doc = "                          \"title\": \"Consolidation Level\","]
#[doc = "                          \"description\": \"A canonical enum for the temporal consolidation level of a Motif or Filament.\","]
#[doc = "                          \"type\": \"string\","]
#[doc = "                          \"enum\": ["]
#[doc = "                            \"Daily\","]
#[doc = "                            \"Weekly\","]
#[doc = "                            \"Monthly\","]
#[doc = "                            \"Yearly\","]
#[doc = "                            \"Archived\""]
#[doc = "                          ]"]
#[doc = "                        },"]
#[doc = "                        \"last_consolidated_at\": {"]
#[doc = "                          \"$id\": \"https://familiar.dev/schemas/types/primitives/NullableTimestamp.v1.json\","]
#[doc = "                          \"title\": \"Nullable Timestamp\","]
#[doc = "                          \"description\": \"A canonical definition for an optional ISO 8601 timestamp with timezone.\","]
#[doc = "                          \"type\": ["]
#[doc = "                            \"string\","]
#[doc = "                            \"null\""]
#[doc = "                          ]"]
#[doc = "                        },"]
#[doc = "                        \"next_consolidation_due\": {"]
#[doc = "                          \"$id\": \"https://familiar.dev/schemas/types/primitives/NullableTimestamp.v1.json\","]
#[doc = "                          \"title\": \"Nullable Timestamp\","]
#[doc = "                          \"description\": \"A canonical definition for an optional ISO 8601 timestamp with timezone.\","]
#[doc = "                          \"type\": ["]
#[doc = "                            \"string\","]
#[doc = "                            \"null\""]
#[doc = "                          ]"]
#[doc = "                        },"]
#[doc = "                        \"source_entity_count\": {"]
#[doc = "                          \"type\": \"integer\","]
#[doc = "                          \"minimum\": 1.0"]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"additionalProperties\": false"]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "                  \"physics_properties\": {"]
#[doc = "                    \"engine\": \"classical\","]
#[doc = "                    \"is_quantum\": false"]
#[doc = "                  },"]
#[doc = "                  \"schema_version\": \"1.2.0\""]
#[doc = "                },"]
#[doc = "                \"content\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/components/FilamentContent.v1.schema.json\","]
#[doc = "                  \"title\": \"Filament Content Component\","]
#[doc = "                  \"description\": \"Defines the high-level narrative or belief content of a Filament entity. This is a quantum component.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"fields\","]
#[doc = "                    \"physics_properties\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"fields\": {"]
#[doc = "                      \"title\": \"FilamentContentFields\","]
#[doc = "                      \"description\": \"A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"required\": ["]
#[doc = "                        \"abstraction_level\","]
#[doc = "                        \"filament_type\","]
#[doc = "                        \"narrative_description\","]
#[doc = "                        \"source_threads_and_bonds\""]
#[doc = "                      ],"]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"abstraction_level\": {"]
#[doc = "                          \"$id\": \"https://familiar.dev/schemas/types/physics/AbstractionLevel.v1.json\","]
#[doc = "                          \"title\": \"Abstraction Level\","]
#[doc = "                          \"description\": \"A canonical enum for the level of abstraction of a cognitive entity.\","]
#[doc = "                          \"type\": \"string\","]
#[doc = "                          \"enum\": ["]
#[doc = "                            \"Low\","]
#[doc = "                            \"Medium\","]
#[doc = "                            \"High\""]
#[doc = "                          ]"]
#[doc = "                        },"]
#[doc = "                        \"filament_type\": {"]
#[doc = "                          \"$id\": \"https://familiar.dev/schemas/types/physics/FilamentType.v1.json\","]
#[doc = "                          \"title\": \"Filament Type\","]
#[doc = "                          \"description\": \"A canonical enum of the types of high-level narratives a Filament can represent.\","]
#[doc = "                          \"type\": \"string\","]
#[doc = "                          \"enum\": ["]
#[doc = "                            \"PersonalityTrait\","]
#[doc = "                            \"Worldview\","]
#[doc = "                            \"Relationship_Pattern\","]
#[doc = "                            \"Life_Theme\""]
#[doc = "                          ]"]
#[doc = "                        },"]
#[doc = "                        \"narrative_description\": {"]
#[doc = "                          \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "                          \"title\": \"Description Field\","]
#[doc = "                          \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "                          \"default\": \"\","]
#[doc = "                          \"type\": \"string\""]
#[doc = "                        },"]
#[doc = "                        \"source_threads_and_bonds\": {"]
#[doc = "                          \"$id\": \"https://familiar.dev/schemas/fields/SourceThreadsAndBonds.v1.json\","]
#[doc = "                          \"title\": \"Source Threads and Bonds Field\","]
#[doc = "                          \"description\": \"A list of Thread and Bond entity IDs that are the source for a derived cognitive entity like a Filament.\","]
#[doc = "                          \"type\": \"array\","]
#[doc = "                          \"items\": {"]
#[doc = "                            \"$id\": \"https://familiar.dev/schemas/fields/EntityId.v1.json\","]
#[doc = "                            \"title\": \"Entity ID Field\","]
#[doc = "                            \"description\": \"A reusable definition for a unique entity identifier.\","]
#[doc = "                            \"type\": \"string\""]
#[doc = "                          }"]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"patternProperties\": {"]
#[doc = "                        \"^[a-z_][a-z0-9_]*$\": {"]
#[doc = "                          \"oneOf\": ["]
#[doc = "                            {"]
#[doc = "                              \"description\": \"A direct reference to a shared definition in SharedDefinitions.schema.json.\","]
#[doc = "                              \"type\": \"object\","]
#[doc = "                              \"required\": ["]
#[doc = "                                \"$ref\""]
#[doc = "                              ],"]
#[doc = "                              \"properties\": {"]
#[doc = "                                \"$ref\": {"]
#[doc = "                                  \"type\": \"string\""]
#[doc = "                                }"]
#[doc = "                              },"]
#[doc = "                              \"additionalProperties\": false"]
#[doc = "                            },"]
#[doc = "                            {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/base/Field.v1.schema.json\","]
#[doc = "                              \"title\": \"Base Field\","]
#[doc = "                              \"description\": \"Defines the structure for a single, inline field definition within a component.\","]
#[doc = "                              \"type\": \"object\","]
#[doc = "                              \"required\": ["]
#[doc = "                                \"description\","]
#[doc = "                                \"type\""]
#[doc = "                              ],"]
#[doc = "                              \"properties\": {"]
#[doc = "                                \"constraints\": {"]
#[doc = "                                  \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "                                  \"title\": \"Constraint Definition\","]
#[doc = "                                  \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "                                  \"type\": \"object\","]
#[doc = "                                  \"properties\": {"]
#[doc = "                                    \"enum\": {"]
#[doc = "                                      \"type\": \"array\","]
#[doc = "                                      \"items\": {"]
#[doc = "                                        \"type\": \"string\""]
#[doc = "                                      }"]
#[doc = "                                    },"]
#[doc = "                                    \"maxLength\": {"]
#[doc = "                                      \"type\": \"integer\""]
#[doc = "                                    },"]
#[doc = "                                    \"maximum\": {"]
#[doc = "                                      \"type\": \"number\""]
#[doc = "                                    },"]
#[doc = "                                    \"minLength\": {"]
#[doc = "                                      \"type\": \"integer\""]
#[doc = "                                    },"]
#[doc = "                                    \"minimum\": {"]
#[doc = "                                      \"type\": \"number\""]
#[doc = "                                    },"]
#[doc = "                                    \"pattern\": {"]
#[doc = "                                      \"type\": \"string\""]
#[doc = "                                    }"]
#[doc = "                                  },"]
#[doc = "                                  \"additionalProperties\": false"]
#[doc = "                                },"]
#[doc = "                                \"default_value\": {"]
#[doc = "                                  \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "                                  \"title\": \"Any Value\","]
#[doc = "                                  \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "                                  \"type\": ["]
#[doc = "                                    \"string\","]
#[doc = "                                    \"number\","]
#[doc = "                                    \"integer\","]
#[doc = "                                    \"boolean\","]
#[doc = "                                    \"object\","]
#[doc = "                                    \"array\","]
#[doc = "                                    \"null\""]
#[doc = "                                  ]"]
#[doc = "                                },"]
#[doc = "                                \"description\": {"]
#[doc = "                                  \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "                                  \"title\": \"Description Field\","]
#[doc = "                                  \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "                                  \"default\": \"\","]
#[doc = "                                  \"type\": \"string\""]
#[doc = "                                },"]
#[doc = "                                \"type\": {"]
#[doc = "                                  \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "                                  \"title\": \"Base Type System\","]
#[doc = "                                  \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "                                  \"oneOf\": ["]
#[doc = "                                    {"]
#[doc = "                                      \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "                                      \"type\": \"string\","]
#[doc = "                                      \"enum\": ["]
#[doc = "                                        \"string\","]
#[doc = "                                        \"boolean\","]
#[doc = "                                        \"integer\","]
#[doc = "                                        \"number\","]
#[doc = "                                        \"f32\","]
#[doc = "                                        \"f64\","]
#[doc = "                                        \"i32\","]
#[doc = "                                        \"i64\","]
#[doc = "                                        \"u32\","]
#[doc = "                                        \"u64\","]
#[doc = "                                        \"uuid\","]
#[doc = "                                        \"date-time\","]
#[doc = "                                        \"duration\","]
#[doc = "                                        \"object\","]
#[doc = "                                        \"array\""]
#[doc = "                                      ]"]
#[doc = "                                    },"]
#[doc = "                                    {"]
#[doc = "                                      \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "                                      \"type\": \"object\","]
#[doc = "                                      \"required\": ["]
#[doc = "                                        \"$ref\""]
#[doc = "                                      ],"]
#[doc = "                                      \"properties\": {"]
#[doc = "                                        \"$ref\": {"]
#[doc = "                                          \"type\": \"string\""]
#[doc = "                                        }"]
#[doc = "                                      },"]
#[doc = "                                      \"additionalProperties\": false"]
#[doc = "                                    }"]
#[doc = "                                  ],"]
#[doc = "                                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                                },"]
#[doc = "                                \"ui_label\": {"]
#[doc = "                                  \"type\": \"string\""]
#[doc = "                                }"]
#[doc = "                              },"]
#[doc = "                              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                            }"]
#[doc = "                          ]"]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"additionalProperties\": false"]
#[doc = "                    },"]
#[doc = "                    \"physics_properties\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/base/PhysicsProperties.v1.schema.json\","]
#[doc = "                      \"title\": \"Base Physics Properties\","]
#[doc = "                      \"description\": \"Defines the common physics-related properties for components and laws.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"required\": ["]
#[doc = "                        \"engine\","]
#[doc = "                        \"is_quantum\""]
#[doc = "                      ],"]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"collapse_sensitive\": {"]
#[doc = "                          \"description\": \"Indicates if the object is affected by or triggers quantum collapse.\","]
#[doc = "                          \"type\": \"boolean\""]
#[doc = "                        },"]
#[doc = "                        \"engine\": {"]
#[doc = "                          \"description\": \"The physics engine responsible for this object.\","]
#[doc = "                          \"enum\": ["]
#[doc = "                            \"quantum\","]
#[doc = "                            \"classical\","]
#[doc = "                            \"hybrid\""]
#[doc = "                          ]"]
#[doc = "                        },"]
#[doc = "                        \"is_quantum\": {"]
#[doc = "                          \"description\": \"Indicates if the object has quantum properties.\","]
#[doc = "                          \"type\": \"boolean\""]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "                  \"physics_properties\": {"]
#[doc = "                    \"engine\": \"quantum\","]
#[doc = "                    \"is_quantum\": true"]
#[doc = "                  },"]
#[doc = "                  \"schema_version\": \"1.2.0\""]
#[doc = "                },"]
#[doc = "                \"gdpr\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/components/GDPRDependency.v1.schema.json\","]
#[doc = "                  \"title\": \"GDPR Dependency Component\","]
#[doc = "                  \"description\": \"Tracks data provenance to enable compliant cascading deletions for GDPR's Right to Erasure.\","]
#[doc = "                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "                  \"fields\": {"]
#[doc = "                    \"contributing_users\": {"]
#[doc = "                      \"description\": \"A set of User IDs whose data contributed to this entity's existence or state.\","]
#[doc = "                      \"items\": {"]
#[doc = "                        \"type\": \"uuid\""]
#[doc = "                      },"]
#[doc = "                      \"type\": \"array\","]
#[doc = "                      \"uniqueItems\": true"]
#[doc = "                    },"]
#[doc = "                    \"upstream_dependencies\": {"]
#[doc = "                      \"description\": \"A list of source entity IDs (e.g., Moments) that this entity (e.g., a Motif) depends on.\","]
#[doc = "                      \"items\": {"]
#[doc = "                        \"type\": \"uuid\""]
#[doc = "                      },"]
#[doc = "                      \"type\": \"array\""]
#[doc = "                    },"]
#[doc = "                    \"user_evidence_weights\": {"]
#[doc = "                      \"additionalProperties\": {"]
#[doc = "                        \"maximum\": 1.0,"]
#[doc = "                        \"minimum\": 0.0,"]
#[doc = "                        \"type\": \"number\""]
#[doc = "                      },"]
#[doc = "                      \"type\": \"object\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"physics_properties\": {"]
#[doc = "                    \"engine\": \"classical\","]
#[doc = "                    \"is_quantum\": false"]
#[doc = "                  },"]
#[doc = "                  \"schema_version\": \"1.0.0\""]
#[doc = "                }"]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"entity_type\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/types/classification/EntityType.v1.json\","]
#[doc = "              \"title\": \"Entity Type\","]
#[doc = "              \"description\": \"A canonical enum of all 7 cognitive entity types.\","]
#[doc = "              \"type\": \"string\","]
#[doc = "              \"enum\": ["]
#[doc = "                \"Focus\","]
#[doc = "                \"Filament\","]
#[doc = "                \"Motif\","]
#[doc = "                \"Intent\","]
#[doc = "                \"Moment\","]
#[doc = "                \"Bond\","]
#[doc = "                \"Thread\""]
#[doc = "              ]"]
#[doc = "            },"]
#[doc = "            \"physics_state\": {"]
#[doc = "              \"title\": \"FilamentPhysicsState\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"quantum\","]
#[doc = "                \"universal\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"quantum\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/components/QuantumState.v1.schema.json\","]
#[doc = "                  \"title\": \"Quantum State Component\","]
#[doc = "                  \"description\": \"Manages the quantum properties of an entity, including its superposition and entanglement.\","]
#[doc = "                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "                  \"fields\": {"]
#[doc = "                    \"coherence_score\": {"]
#[doc = "                      \"description\": \"The purity of the quantum state (0.0 = maximally mixed, 1.0 = pure).\","]
#[doc = "                      \"maximum\": 1.0,"]
#[doc = "                      \"minimum\": 0.0,"]
#[doc = "                      \"type\": \"number\""]
#[doc = "                    },"]
#[doc = "                    \"density_matrix\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/types/physics/DensityMatrix.v1.json\","]
#[doc = "                      \"description\": \"A 2x2 matrix of complex numbers representing a quantum state.\","]
#[doc = "                      \"items\": {"]
#[doc = "                        \"items\": {"]
#[doc = "                          \"$id\": \"https://familiar.dev/schemas/types/physics/ComplexNumber.v1.json\","]
#[doc = "                          \"description\": \"Represents a complex number with real and imaginary parts.\","]
#[doc = "                          \"properties\": {"]
#[doc = "                            \"imaginary\": {"]
#[doc = "                              \"type\": \"number\""]
#[doc = "                            },"]
#[doc = "                            \"real\": {"]
#[doc = "                              \"type\": \"number\""]
#[doc = "                            }"]
#[doc = "                          },"]
#[doc = "                          \"required\": ["]
#[doc = "                            \"real\","]
#[doc = "                            \"imaginary\""]
#[doc = "                          ],"]
#[doc = "                          \"title\": \"Complex Number\","]
#[doc = "                          \"type\": \"object\""]
#[doc = "                        },"]
#[doc = "                        \"maxItems\": 2,"]
#[doc = "                        \"minItems\": 2,"]
#[doc = "                        \"type\": \"array\""]
#[doc = "                      },"]
#[doc = "                      \"maxItems\": 2,"]
#[doc = "                      \"minItems\": 2,"]
#[doc = "                      \"title\": \"Density Matrix\","]
#[doc = "                      \"type\": \"array\""]
#[doc = "                    },"]
#[doc = "                    \"entanglement_network\": {"]
#[doc = "                      \"additionalProperties\": {"]
#[doc = "                        \"maximum\": 1.0,"]
#[doc = "                        \"minimum\": 0.0,"]
#[doc = "                        \"type\": \"number\""]
#[doc = "                      },"]
#[doc = "                      \"type\": \"object\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"physics_properties\": {"]
#[doc = "                    \"engine\": \"quantum\","]
#[doc = "                    \"is_quantum\": true"]
#[doc = "                  },"]
#[doc = "                  \"schema_version\": \"1.0.0\""]
#[doc = "                },"]
#[doc = "                \"universal\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/components/UniversalPhysicsState.v1.schema.json\","]
#[doc = "                  \"title\": \"Universal Physics State Component\","]
#[doc = "                  \"description\": \"The transient, mutable physics state of an entity.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"fields\": {"]
#[doc = "                      \"title\": \"UniversalPhysicsStateFields\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"required\": ["]
#[doc = "                        \"cognitive_perspective\","]
#[doc = "                        \"consolidation_rate\","]
#[doc = "                        \"decay_rate\","]
#[doc = "                        \"energy\","]
#[doc = "                        \"entanglement_strength\","]
#[doc = "                        \"momentum\","]
#[doc = "                        \"quantum_coherence\""]
#[doc = "                      ],"]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"cognitive_perspective\": {"]
#[doc = "                          \"$id\": \"https://familiar.dev/schemas/fields/CognitivePerspective.v1.schema.json\","]
#[doc = "                          \"title\": \"Cognitive Perspective Field\","]
#[doc = "                          \"description\": \"The intrinsic 'spin' or 'flavor' of the entity, which generates cognitive dissonance (torsion).\","]
#[doc = "                          \"ui_label\": \"Cognitive Perspective\""]
#[doc = "                        },"]
#[doc = "                        \"consolidation_rate\": {"]
#[doc = "                          \"$id\": \"https://familiar.dev/schemas/snippets/fields/ConsolidationRate.v1.json\","]
#[doc = "                          \"title\": \"Consolidation Rate Field\","]
#[doc = "                          \"description\": \"The base rate of memory consolidation for an entity, before multipliers are applied. Represents how quickly an unstable memory becomes stable.\","]
#[doc = "                          \"type\": \"object\","]
#[doc = "                          \"required\": ["]
#[doc = "                            \"value\""]
#[doc = "                          ],"]
#[doc = "                          \"properties\": {"]
#[doc = "                            \"value\": {"]
#[doc = "                              \"default\": 0.0,"]
#[doc = "                              \"type\": \"number\","]
#[doc = "                              \"format\": \"double\","]
#[doc = "                              \"maximum\": 1.0,"]
#[doc = "                              \"minimum\": 0.0,"]
#[doc = "                              \"x-python-type\": \"float\","]
#[doc = "                              \"x-rust-type\": \"f64\""]
#[doc = "                            }"]
#[doc = "                          },"]
#[doc = "                          \"additionalProperties\": false"]
#[doc = "                        },"]
#[doc = "                        \"decay_rate\": {"]
#[doc = "                          \"description\": \"The base rate of energy or coherence decay for an entity, before multipliers are applied.\","]
#[doc = "                          \"type\": \"object\","]
#[doc = "                          \"required\": ["]
#[doc = "                            \"value\""]
#[doc = "                          ],"]
#[doc = "                          \"properties\": {"]
#[doc = "                            \"value\": {"]
#[doc = "                              \"default\": 0.01,"]
#[doc = "                              \"type\": \"number\","]
#[doc = "                              \"format\": \"double\","]
#[doc = "                              \"x-python-type\": \"float\","]
#[doc = "                              \"x-rust-type\": \"f64\""]
#[doc = "                            }"]
#[doc = "                          },"]
#[doc = "                          \"additionalProperties\": false"]
#[doc = "                        },"]
#[doc = "                        \"energy\": {"]
#[doc = "                          \"description\": \"The current energy level of an entity.\","]
#[doc = "                          \"default\": 0.1,"]
#[doc = "                          \"type\": \"number\""]
#[doc = "                        },"]
#[doc = "                        \"entanglement_strength\": {"]
#[doc = "                          \"description\": \"The overall entanglement strength of this entity with others. Null for classical entities.\","]
#[doc = "                          \"default\": null,"]
#[doc = "                          \"type\": ["]
#[doc = "                            \"number\","]
#[doc = "                            \"null\""]
#[doc = "                          ],"]
#[doc = "                          \"maximum\": 1.0,"]
#[doc = "                          \"minimum\": 0.0"]
#[doc = "                        },"]
#[doc = "                        \"momentum\": {"]
#[doc = "                          \"$id\": \"https://familiar.dev/schemas/types/physics/Vec6.v1.json\","]
#[doc = "                          \"title\": \"6D Physics Vector\","]
#[doc = "                          \"description\": \"A reusable data type for a vector of six f64 numbers, used for momentum and forces in the 6 spatial dimensions of the manifold.\","]
#[doc = "                          \"type\": \"array\","]
#[doc = "                          \"items\": {"]
#[doc = "                            \"type\": \"number\""]
#[doc = "                          },"]
#[doc = "                          \"maxItems\": 6,"]
#[doc = "                          \"minItems\": 6"]
#[doc = "                        },"]
#[doc = "                        \"quantum_coherence\": {"]
#[doc = "                          \"description\": \"The quantum coherence level of the entity, representing its degree of superposition. Null for classical entities.\","]
#[doc = "                          \"default\": null,"]
#[doc = "                          \"type\": ["]
#[doc = "                            \"number\","]
#[doc = "                            \"null\""]
#[doc = "                          ],"]
#[doc = "                          \"maximum\": 1.0,"]
#[doc = "                          \"minimum\": 0.0"]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"additionalProperties\": false"]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "                  \"schema_version\": \"3.0.0\""]
#[doc = "                }"]
#[doc = "              }"]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/entities/Intent.v1.schema.json\","]
#[doc = "          \"title\": \"Intent Entity\","]
#[doc = "          \"description\": \"A classical entity representing a specific, user-declared future action or task.\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"required\": ["]
#[doc = "            \"components\","]
#[doc = "            \"entity_type\","]
#[doc = "            \"physics_state\""]
#[doc = "          ],"]
#[doc = "          \"properties\": {"]
#[doc = "            \"components\": {"]
#[doc = "              \"title\": \"IntentComponents\","]
#[doc = "              \"description\": \"Component references temporarily disabled for pipeline testing\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"content\","]
#[doc = "                \"status\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"_comment\": {"]
#[doc = "                  \"description\": \"TODO: Re-enable component references when component schemas are available\","]
#[doc = "                  \"type\": \"string\""]
#[doc = "                },"]
#[doc = "                \"content\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/components/IntentContent.v1.schema.json\","]
#[doc = "                  \"title\": \"Intent Content Component\","]
#[doc = "                  \"description\": \"Defines the content of a specific task or intention.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"fields\","]
#[doc = "                    \"physics_properties\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"fields\": {"]
#[doc = "                      \"title\": \"BaseFields\","]
#[doc = "                      \"description\": \"A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"patternProperties\": {"]
#[doc = "                        \"^[a-z_][a-z0-9_]*$\": {"]
#[doc = "                          \"oneOf\": ["]
#[doc = "                            {"]
#[doc = "                              \"description\": \"A direct reference to a shared definition in SharedDefinitions.schema.json.\","]
#[doc = "                              \"type\": \"object\","]
#[doc = "                              \"required\": ["]
#[doc = "                                \"$ref\""]
#[doc = "                              ],"]
#[doc = "                              \"properties\": {"]
#[doc = "                                \"$ref\": {"]
#[doc = "                                  \"type\": \"string\""]
#[doc = "                                }"]
#[doc = "                              },"]
#[doc = "                              \"additionalProperties\": false"]
#[doc = "                            },"]
#[doc = "                            {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/base/Field.v1.schema.json\","]
#[doc = "                              \"title\": \"Base Field\","]
#[doc = "                              \"description\": \"Defines the structure for a single, inline field definition within a component.\","]
#[doc = "                              \"type\": \"object\","]
#[doc = "                              \"required\": ["]
#[doc = "                                \"description\","]
#[doc = "                                \"type\""]
#[doc = "                              ],"]
#[doc = "                              \"properties\": {"]
#[doc = "                                \"constraints\": {"]
#[doc = "                                  \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "                                  \"title\": \"Constraint Definition\","]
#[doc = "                                  \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "                                  \"type\": \"object\","]
#[doc = "                                  \"properties\": {"]
#[doc = "                                    \"enum\": {"]
#[doc = "                                      \"type\": \"array\","]
#[doc = "                                      \"items\": {"]
#[doc = "                                        \"type\": \"string\""]
#[doc = "                                      }"]
#[doc = "                                    },"]
#[doc = "                                    \"maxLength\": {"]
#[doc = "                                      \"type\": \"integer\""]
#[doc = "                                    },"]
#[doc = "                                    \"maximum\": {"]
#[doc = "                                      \"type\": \"number\""]
#[doc = "                                    },"]
#[doc = "                                    \"minLength\": {"]
#[doc = "                                      \"type\": \"integer\""]
#[doc = "                                    },"]
#[doc = "                                    \"minimum\": {"]
#[doc = "                                      \"type\": \"number\""]
#[doc = "                                    },"]
#[doc = "                                    \"pattern\": {"]
#[doc = "                                      \"type\": \"string\""]
#[doc = "                                    }"]
#[doc = "                                  },"]
#[doc = "                                  \"additionalProperties\": false"]
#[doc = "                                },"]
#[doc = "                                \"default_value\": {"]
#[doc = "                                  \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "                                  \"title\": \"Any Value\","]
#[doc = "                                  \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "                                  \"type\": ["]
#[doc = "                                    \"string\","]
#[doc = "                                    \"number\","]
#[doc = "                                    \"integer\","]
#[doc = "                                    \"boolean\","]
#[doc = "                                    \"object\","]
#[doc = "                                    \"array\","]
#[doc = "                                    \"null\""]
#[doc = "                                  ]"]
#[doc = "                                },"]
#[doc = "                                \"description\": {"]
#[doc = "                                  \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "                                  \"title\": \"Description Field\","]
#[doc = "                                  \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "                                  \"default\": \"\","]
#[doc = "                                  \"type\": \"string\""]
#[doc = "                                },"]
#[doc = "                                \"type\": {"]
#[doc = "                                  \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "                                  \"title\": \"Base Type System\","]
#[doc = "                                  \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "                                  \"oneOf\": ["]
#[doc = "                                    {"]
#[doc = "                                      \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "                                      \"type\": \"string\","]
#[doc = "                                      \"enum\": ["]
#[doc = "                                        \"string\","]
#[doc = "                                        \"boolean\","]
#[doc = "                                        \"integer\","]
#[doc = "                                        \"number\","]
#[doc = "                                        \"f32\","]
#[doc = "                                        \"f64\","]
#[doc = "                                        \"i32\","]
#[doc = "                                        \"i64\","]
#[doc = "                                        \"u32\","]
#[doc = "                                        \"u64\","]
#[doc = "                                        \"uuid\","]
#[doc = "                                        \"date-time\","]
#[doc = "                                        \"duration\","]
#[doc = "                                        \"object\","]
#[doc = "                                        \"array\""]
#[doc = "                                      ]"]
#[doc = "                                    },"]
#[doc = "                                    {"]
#[doc = "                                      \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "                                      \"type\": \"object\","]
#[doc = "                                      \"required\": ["]
#[doc = "                                        \"$ref\""]
#[doc = "                                      ],"]
#[doc = "                                      \"properties\": {"]
#[doc = "                                        \"$ref\": {"]
#[doc = "                                          \"type\": \"string\""]
#[doc = "                                        }"]
#[doc = "                                      },"]
#[doc = "                                      \"additionalProperties\": false"]
#[doc = "                                    }"]
#[doc = "                                  ],"]
#[doc = "                                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                                },"]
#[doc = "                                \"ui_label\": {"]
#[doc = "                                  \"type\": \"string\""]
#[doc = "                                }"]
#[doc = "                              },"]
#[doc = "                              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                            }"]
#[doc = "                          ]"]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"additionalProperties\": false"]
#[doc = "                    },"]
#[doc = "                    \"physics_properties\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/base/PhysicsProperties.v1.schema.json\","]
#[doc = "                      \"title\": \"Base Physics Properties\","]
#[doc = "                      \"description\": \"Defines the common physics-related properties for components and laws.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"required\": ["]
#[doc = "                        \"engine\","]
#[doc = "                        \"is_quantum\""]
#[doc = "                      ],"]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"collapse_sensitive\": {"]
#[doc = "                          \"description\": \"Indicates if the object is affected by or triggers quantum collapse.\","]
#[doc = "                          \"type\": \"boolean\""]
#[doc = "                        },"]
#[doc = "                        \"engine\": {"]
#[doc = "                          \"description\": \"The physics engine responsible for this object.\","]
#[doc = "                          \"enum\": ["]
#[doc = "                            \"quantum\","]
#[doc = "                            \"classical\","]
#[doc = "                            \"hybrid\""]
#[doc = "                          ]"]
#[doc = "                        },"]
#[doc = "                        \"is_quantum\": {"]
#[doc = "                          \"description\": \"Indicates if the object has quantum properties.\","]
#[doc = "                          \"type\": \"boolean\""]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "                  \"fields\": {"]
#[doc = "                    \"description\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "                      \"default\": \"\","]
#[doc = "                      \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "                      \"title\": \"Description Field\","]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    },"]
#[doc = "                    \"due_date\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/types/primitives/NullableTimestamp.v1.json\","]
#[doc = "                      \"description\": \"A canonical definition for an optional ISO 8601 timestamp with timezone.\","]
#[doc = "                      \"title\": \"Nullable Timestamp\","]
#[doc = "                      \"type\": ["]
#[doc = "                        \"string\","]
#[doc = "                        \"null\""]
#[doc = "                      ]"]
#[doc = "                    },"]
#[doc = "                    \"priority\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/fields/Priority.v1.json\","]
#[doc = "                      \"default\": \"Medium\","]
#[doc = "                      \"description\": \"The user-assigned priority level.\","]
#[doc = "                      \"enum\": ["]
#[doc = "                        \"Low\","]
#[doc = "                        \"Medium\","]
#[doc = "                        \"High\","]
#[doc = "                        \"Urgent\""]
#[doc = "                      ],"]
#[doc = "                      \"title\": \"Priority Field\","]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"physics_properties\": {"]
#[doc = "                    \"engine\": \"classical\","]
#[doc = "                    \"is_quantum\": false"]
#[doc = "                  },"]
#[doc = "                  \"schema_version\": \"1.1.0\""]
#[doc = "                },"]
#[doc = "                \"status\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/components/TaskStatus.v1.schema.json\","]
#[doc = "                  \"title\": \"Task Status Component\","]
#[doc = "                  \"description\": \"Tracks the completion status of an Intent.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"fields\","]
#[doc = "                    \"physics_properties\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"fields\": {"]
#[doc = "                      \"title\": \"BaseFields\","]
#[doc = "                      \"description\": \"A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"patternProperties\": {"]
#[doc = "                        \"^[a-z_][a-z0-9_]*$\": {"]
#[doc = "                          \"oneOf\": ["]
#[doc = "                            {"]
#[doc = "                              \"description\": \"A direct reference to a shared definition in SharedDefinitions.schema.json.\","]
#[doc = "                              \"type\": \"object\","]
#[doc = "                              \"required\": ["]
#[doc = "                                \"$ref\""]
#[doc = "                              ],"]
#[doc = "                              \"properties\": {"]
#[doc = "                                \"$ref\": {"]
#[doc = "                                  \"type\": \"string\""]
#[doc = "                                }"]
#[doc = "                              },"]
#[doc = "                              \"additionalProperties\": false"]
#[doc = "                            },"]
#[doc = "                            {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/base/Field.v1.schema.json\","]
#[doc = "                              \"title\": \"Base Field\","]
#[doc = "                              \"description\": \"Defines the structure for a single, inline field definition within a component.\","]
#[doc = "                              \"type\": \"object\","]
#[doc = "                              \"required\": ["]
#[doc = "                                \"description\","]
#[doc = "                                \"type\""]
#[doc = "                              ],"]
#[doc = "                              \"properties\": {"]
#[doc = "                                \"constraints\": {"]
#[doc = "                                  \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "                                  \"title\": \"Constraint Definition\","]
#[doc = "                                  \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "                                  \"type\": \"object\","]
#[doc = "                                  \"properties\": {"]
#[doc = "                                    \"enum\": {"]
#[doc = "                                      \"type\": \"array\","]
#[doc = "                                      \"items\": {"]
#[doc = "                                        \"type\": \"string\""]
#[doc = "                                      }"]
#[doc = "                                    },"]
#[doc = "                                    \"maxLength\": {"]
#[doc = "                                      \"type\": \"integer\""]
#[doc = "                                    },"]
#[doc = "                                    \"maximum\": {"]
#[doc = "                                      \"type\": \"number\""]
#[doc = "                                    },"]
#[doc = "                                    \"minLength\": {"]
#[doc = "                                      \"type\": \"integer\""]
#[doc = "                                    },"]
#[doc = "                                    \"minimum\": {"]
#[doc = "                                      \"type\": \"number\""]
#[doc = "                                    },"]
#[doc = "                                    \"pattern\": {"]
#[doc = "                                      \"type\": \"string\""]
#[doc = "                                    }"]
#[doc = "                                  },"]
#[doc = "                                  \"additionalProperties\": false"]
#[doc = "                                },"]
#[doc = "                                \"default_value\": {"]
#[doc = "                                  \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "                                  \"title\": \"Any Value\","]
#[doc = "                                  \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "                                  \"type\": ["]
#[doc = "                                    \"string\","]
#[doc = "                                    \"number\","]
#[doc = "                                    \"integer\","]
#[doc = "                                    \"boolean\","]
#[doc = "                                    \"object\","]
#[doc = "                                    \"array\","]
#[doc = "                                    \"null\""]
#[doc = "                                  ]"]
#[doc = "                                },"]
#[doc = "                                \"description\": {"]
#[doc = "                                  \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "                                  \"title\": \"Description Field\","]
#[doc = "                                  \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "                                  \"default\": \"\","]
#[doc = "                                  \"type\": \"string\""]
#[doc = "                                },"]
#[doc = "                                \"type\": {"]
#[doc = "                                  \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "                                  \"title\": \"Base Type System\","]
#[doc = "                                  \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "                                  \"oneOf\": ["]
#[doc = "                                    {"]
#[doc = "                                      \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "                                      \"type\": \"string\","]
#[doc = "                                      \"enum\": ["]
#[doc = "                                        \"string\","]
#[doc = "                                        \"boolean\","]
#[doc = "                                        \"integer\","]
#[doc = "                                        \"number\","]
#[doc = "                                        \"f32\","]
#[doc = "                                        \"f64\","]
#[doc = "                                        \"i32\","]
#[doc = "                                        \"i64\","]
#[doc = "                                        \"u32\","]
#[doc = "                                        \"u64\","]
#[doc = "                                        \"uuid\","]
#[doc = "                                        \"date-time\","]
#[doc = "                                        \"duration\","]
#[doc = "                                        \"object\","]
#[doc = "                                        \"array\""]
#[doc = "                                      ]"]
#[doc = "                                    },"]
#[doc = "                                    {"]
#[doc = "                                      \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "                                      \"type\": \"object\","]
#[doc = "                                      \"required\": ["]
#[doc = "                                        \"$ref\""]
#[doc = "                                      ],"]
#[doc = "                                      \"properties\": {"]
#[doc = "                                        \"$ref\": {"]
#[doc = "                                          \"type\": \"string\""]
#[doc = "                                        }"]
#[doc = "                                      },"]
#[doc = "                                      \"additionalProperties\": false"]
#[doc = "                                    }"]
#[doc = "                                  ],"]
#[doc = "                                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                                },"]
#[doc = "                                \"ui_label\": {"]
#[doc = "                                  \"type\": \"string\""]
#[doc = "                                }"]
#[doc = "                              },"]
#[doc = "                              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                            }"]
#[doc = "                          ]"]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"additionalProperties\": false"]
#[doc = "                    },"]
#[doc = "                    \"physics_properties\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/base/PhysicsProperties.v1.schema.json\","]
#[doc = "                      \"title\": \"Base Physics Properties\","]
#[doc = "                      \"description\": \"Defines the common physics-related properties for components and laws.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"required\": ["]
#[doc = "                        \"engine\","]
#[doc = "                        \"is_quantum\""]
#[doc = "                      ],"]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"collapse_sensitive\": {"]
#[doc = "                          \"description\": \"Indicates if the object is affected by or triggers quantum collapse.\","]
#[doc = "                          \"type\": \"boolean\""]
#[doc = "                        },"]
#[doc = "                        \"engine\": {"]
#[doc = "                          \"description\": \"The physics engine responsible for this object.\","]
#[doc = "                          \"enum\": ["]
#[doc = "                            \"quantum\","]
#[doc = "                            \"classical\","]
#[doc = "                            \"hybrid\""]
#[doc = "                          ]"]
#[doc = "                        },"]
#[doc = "                        \"is_quantum\": {"]
#[doc = "                          \"description\": \"Indicates if the object has quantum properties.\","]
#[doc = "                          \"type\": \"boolean\""]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "                  \"fields\": {"]
#[doc = "                    \"completed_at\": {"]
#[doc = "                      \"description\": \"The timestamp when the task was marked as completed. This triggers its consumption into a Moment.\","]
#[doc = "                      \"nullable\": true,"]
#[doc = "                      \"type\": \"date-time\""]
#[doc = "                    },"]
#[doc = "                    \"status\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/fields/Status.v1.json\","]
#[doc = "                      \"default\": \"Pending\","]
#[doc = "                      \"description\": \"The current status of a task or process.\","]
#[doc = "                      \"enum\": ["]
#[doc = "                        \"Pending\","]
#[doc = "                        \"InProgress\","]
#[doc = "                        \"Completed\","]
#[doc = "                        \"Cancelled\""]
#[doc = "                      ],"]
#[doc = "                      \"title\": \"Status Field\","]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"physics_properties\": {"]
#[doc = "                    \"engine\": \"classical\","]
#[doc = "                    \"is_quantum\": false"]
#[doc = "                  },"]
#[doc = "                  \"schema_version\": \"1.1.0\""]
#[doc = "                }"]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"entity_type\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/types/classification/EntityType.v1.json\","]
#[doc = "              \"title\": \"Entity Type\","]
#[doc = "              \"description\": \"A canonical enum of all 7 cognitive entity types.\","]
#[doc = "              \"type\": \"string\","]
#[doc = "              \"enum\": ["]
#[doc = "                \"Focus\","]
#[doc = "                \"Filament\","]
#[doc = "                \"Motif\","]
#[doc = "                \"Intent\","]
#[doc = "                \"Moment\","]
#[doc = "                \"Bond\","]
#[doc = "                \"Thread\""]
#[doc = "              ]"]
#[doc = "            },"]
#[doc = "            \"physics_state\": {"]
#[doc = "              \"title\": \"IntentPhysicsState\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"manifold_position\","]
#[doc = "                \"universal\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"manifold_position\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/components/MemoryManifoldPosition.v1.schema.json\","]
#[doc = "                  \"title\": \"Memory Manifold Position Component\","]
#[doc = "                  \"description\": \"The entity's position in the 7D cognitive manifold, enforcing quantized spatial coordinates (Rule 8).\","]
#[doc = "                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "                  \"fields\": {"]
#[doc = "                    \"autobiographical_coordinate\": {"]
#[doc = "                      \"description\": \"Quantized coordinate for External <-> Self-related.\","]
#[doc = "                      \"type\": \"integer\""]
#[doc = "                    },"]
#[doc = "                    \"coherence_coordinate\": {"]
#[doc = "                      \"description\": \"Quantized coordinate for Fragmented <-> Unified.\","]
#[doc = "                      \"type\": \"integer\""]
#[doc = "                    },"]
#[doc = "                    \"emotional_coordinate\": {"]
#[doc = "                      \"description\": \"Quantized coordinate for Negative <-> Positive.\","]
#[doc = "                      \"type\": \"integer\""]
#[doc = "                    },"]
#[doc = "                    \"episodic_coordinate\": {"]
#[doc = "                      \"description\": \"Quantized coordinate for General <-> Specific.\","]
#[doc = "                      \"type\": \"integer\""]
#[doc = "                    },"]
#[doc = "                    \"salience_coordinate\": {"]
#[doc = "                      \"description\": \"Quantized coordinate for Background <-> Foreground.\","]
#[doc = "                      \"type\": \"integer\""]
#[doc = "                    },"]
#[doc = "                    \"semantic_coordinate\": {"]
#[doc = "                      \"description\": \"Quantized coordinate for Abstract <-> Concrete.\","]
#[doc = "                      \"type\": \"integer\""]
#[doc = "                    },"]
#[doc = "                    \"temporal_coordinate\": {"]
#[doc = "                      \"description\": \"Continuous time coordinate (t <= 0).\","]
#[doc = "                      \"maximum\": 0,"]
#[doc = "                      \"type\": \"number\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"physics_properties\": {"]
#[doc = "                    \"engine\": \"classical\","]
#[doc = "                    \"is_quantum\": false"]
#[doc = "                  },"]
#[doc = "                  \"schema_version\": \"1.0.0\""]
#[doc = "                },"]
#[doc = "                \"universal\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/components/UniversalPhysicsState.v1.schema.json\","]
#[doc = "                  \"title\": \"Universal Physics State Component\","]
#[doc = "                  \"description\": \"The transient, mutable physics state of an entity.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"fields\": {"]
#[doc = "                      \"title\": \"UniversalPhysicsStateFields\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"required\": ["]
#[doc = "                        \"cognitive_perspective\","]
#[doc = "                        \"consolidation_rate\","]
#[doc = "                        \"decay_rate\","]
#[doc = "                        \"energy\","]
#[doc = "                        \"entanglement_strength\","]
#[doc = "                        \"momentum\","]
#[doc = "                        \"quantum_coherence\""]
#[doc = "                      ],"]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"cognitive_perspective\": {"]
#[doc = "                          \"$id\": \"https://familiar.dev/schemas/fields/CognitivePerspective.v1.schema.json\","]
#[doc = "                          \"title\": \"Cognitive Perspective Field\","]
#[doc = "                          \"description\": \"The intrinsic 'spin' or 'flavor' of the entity, which generates cognitive dissonance (torsion).\","]
#[doc = "                          \"ui_label\": \"Cognitive Perspective\""]
#[doc = "                        },"]
#[doc = "                        \"consolidation_rate\": {"]
#[doc = "                          \"$id\": \"https://familiar.dev/schemas/snippets/fields/ConsolidationRate.v1.json\","]
#[doc = "                          \"title\": \"Consolidation Rate Field\","]
#[doc = "                          \"description\": \"The base rate of memory consolidation for an entity, before multipliers are applied. Represents how quickly an unstable memory becomes stable.\","]
#[doc = "                          \"type\": \"object\","]
#[doc = "                          \"required\": ["]
#[doc = "                            \"value\""]
#[doc = "                          ],"]
#[doc = "                          \"properties\": {"]
#[doc = "                            \"value\": {"]
#[doc = "                              \"default\": 0.0,"]
#[doc = "                              \"type\": \"number\","]
#[doc = "                              \"format\": \"double\","]
#[doc = "                              \"maximum\": 1.0,"]
#[doc = "                              \"minimum\": 0.0,"]
#[doc = "                              \"x-python-type\": \"float\","]
#[doc = "                              \"x-rust-type\": \"f64\""]
#[doc = "                            }"]
#[doc = "                          },"]
#[doc = "                          \"additionalProperties\": false"]
#[doc = "                        },"]
#[doc = "                        \"decay_rate\": {"]
#[doc = "                          \"description\": \"The base rate of energy or coherence decay for an entity, before multipliers are applied.\","]
#[doc = "                          \"type\": \"object\","]
#[doc = "                          \"required\": ["]
#[doc = "                            \"value\""]
#[doc = "                          ],"]
#[doc = "                          \"properties\": {"]
#[doc = "                            \"value\": {"]
#[doc = "                              \"default\": 0.01,"]
#[doc = "                              \"type\": \"number\","]
#[doc = "                              \"format\": \"double\","]
#[doc = "                              \"x-python-type\": \"float\","]
#[doc = "                              \"x-rust-type\": \"f64\""]
#[doc = "                            }"]
#[doc = "                          },"]
#[doc = "                          \"additionalProperties\": false"]
#[doc = "                        },"]
#[doc = "                        \"energy\": {"]
#[doc = "                          \"description\": \"The current energy level of an entity.\","]
#[doc = "                          \"default\": 0.1,"]
#[doc = "                          \"type\": \"number\""]
#[doc = "                        },"]
#[doc = "                        \"entanglement_strength\": {"]
#[doc = "                          \"description\": \"The overall entanglement strength of this entity with others. Null for classical entities.\","]
#[doc = "                          \"default\": null,"]
#[doc = "                          \"type\": ["]
#[doc = "                            \"number\","]
#[doc = "                            \"null\""]
#[doc = "                          ],"]
#[doc = "                          \"maximum\": 1.0,"]
#[doc = "                          \"minimum\": 0.0"]
#[doc = "                        },"]
#[doc = "                        \"momentum\": {"]
#[doc = "                          \"$id\": \"https://familiar.dev/schemas/types/physics/Vec6.v1.json\","]
#[doc = "                          \"title\": \"6D Physics Vector\","]
#[doc = "                          \"description\": \"A reusable data type for a vector of six f64 numbers, used for momentum and forces in the 6 spatial dimensions of the manifold.\","]
#[doc = "                          \"type\": \"array\","]
#[doc = "                          \"items\": {"]
#[doc = "                            \"type\": \"number\""]
#[doc = "                          },"]
#[doc = "                          \"maxItems\": 6,"]
#[doc = "                          \"minItems\": 6"]
#[doc = "                        },"]
#[doc = "                        \"quantum_coherence\": {"]
#[doc = "                          \"description\": \"The quantum coherence level of the entity, representing its degree of superposition. Null for classical entities.\","]
#[doc = "                          \"default\": null,"]
#[doc = "                          \"type\": ["]
#[doc = "                            \"number\","]
#[doc = "                            \"null\""]
#[doc = "                          ],"]
#[doc = "                          \"maximum\": 1.0,"]
#[doc = "                          \"minimum\": 0.0"]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"additionalProperties\": false"]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "                  \"schema_version\": \"3.0.0\""]
#[doc = "                }"]
#[doc = "              }"]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/entities/Focus.v1.schema.json\","]
#[doc = "          \"title\": \"Focus Entity\","]
#[doc = "          \"description\": \"A quantum entity representing a high-level, user-declared thematic goal or life chapter.\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"required\": ["]
#[doc = "            \"components\","]
#[doc = "            \"entity_type\","]
#[doc = "            \"physics_state\""]
#[doc = "          ],"]
#[doc = "          \"properties\": {"]
#[doc = "            \"components\": {"]
#[doc = "              \"title\": \"FocusComponents\","]
#[doc = "              \"description\": \"Component references temporarily disabled for pipeline testing\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"content\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"_comment\": {"]
#[doc = "                  \"description\": \"TODO: Re-enable component references when component schemas are available\","]
#[doc = "                  \"type\": \"string\""]
#[doc = "                },"]
#[doc = "                \"content\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/components/FocusContent.v1.schema.json\","]
#[doc = "                  \"title\": \"Focus Content Component\","]
#[doc = "                  \"description\": \"Defines the content and scope of a thematic goal or focus.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"fields\","]
#[doc = "                    \"physics_properties\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"fields\": {"]
#[doc = "                      \"title\": \"BaseFields\","]
#[doc = "                      \"description\": \"A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"patternProperties\": {"]
#[doc = "                        \"^[a-z_][a-z0-9_]*$\": {"]
#[doc = "                          \"oneOf\": ["]
#[doc = "                            {"]
#[doc = "                              \"description\": \"A direct reference to a shared definition in SharedDefinitions.schema.json.\","]
#[doc = "                              \"type\": \"object\","]
#[doc = "                              \"required\": ["]
#[doc = "                                \"$ref\""]
#[doc = "                              ],"]
#[doc = "                              \"properties\": {"]
#[doc = "                                \"$ref\": {"]
#[doc = "                                  \"type\": \"string\""]
#[doc = "                                }"]
#[doc = "                              },"]
#[doc = "                              \"additionalProperties\": false"]
#[doc = "                            },"]
#[doc = "                            {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/base/Field.v1.schema.json\","]
#[doc = "                              \"title\": \"Base Field\","]
#[doc = "                              \"description\": \"Defines the structure for a single, inline field definition within a component.\","]
#[doc = "                              \"type\": \"object\","]
#[doc = "                              \"required\": ["]
#[doc = "                                \"description\","]
#[doc = "                                \"type\""]
#[doc = "                              ],"]
#[doc = "                              \"properties\": {"]
#[doc = "                                \"constraints\": {"]
#[doc = "                                  \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "                                  \"title\": \"Constraint Definition\","]
#[doc = "                                  \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "                                  \"type\": \"object\","]
#[doc = "                                  \"properties\": {"]
#[doc = "                                    \"enum\": {"]
#[doc = "                                      \"type\": \"array\","]
#[doc = "                                      \"items\": {"]
#[doc = "                                        \"type\": \"string\""]
#[doc = "                                      }"]
#[doc = "                                    },"]
#[doc = "                                    \"maxLength\": {"]
#[doc = "                                      \"type\": \"integer\""]
#[doc = "                                    },"]
#[doc = "                                    \"maximum\": {"]
#[doc = "                                      \"type\": \"number\""]
#[doc = "                                    },"]
#[doc = "                                    \"minLength\": {"]
#[doc = "                                      \"type\": \"integer\""]
#[doc = "                                    },"]
#[doc = "                                    \"minimum\": {"]
#[doc = "                                      \"type\": \"number\""]
#[doc = "                                    },"]
#[doc = "                                    \"pattern\": {"]
#[doc = "                                      \"type\": \"string\""]
#[doc = "                                    }"]
#[doc = "                                  },"]
#[doc = "                                  \"additionalProperties\": false"]
#[doc = "                                },"]
#[doc = "                                \"default_value\": {"]
#[doc = "                                  \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "                                  \"title\": \"Any Value\","]
#[doc = "                                  \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "                                  \"type\": ["]
#[doc = "                                    \"string\","]
#[doc = "                                    \"number\","]
#[doc = "                                    \"integer\","]
#[doc = "                                    \"boolean\","]
#[doc = "                                    \"object\","]
#[doc = "                                    \"array\","]
#[doc = "                                    \"null\""]
#[doc = "                                  ]"]
#[doc = "                                },"]
#[doc = "                                \"description\": {"]
#[doc = "                                  \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "                                  \"title\": \"Description Field\","]
#[doc = "                                  \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "                                  \"default\": \"\","]
#[doc = "                                  \"type\": \"string\""]
#[doc = "                                },"]
#[doc = "                                \"type\": {"]
#[doc = "                                  \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "                                  \"title\": \"Base Type System\","]
#[doc = "                                  \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "                                  \"oneOf\": ["]
#[doc = "                                    {"]
#[doc = "                                      \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "                                      \"type\": \"string\","]
#[doc = "                                      \"enum\": ["]
#[doc = "                                        \"string\","]
#[doc = "                                        \"boolean\","]
#[doc = "                                        \"integer\","]
#[doc = "                                        \"number\","]
#[doc = "                                        \"f32\","]
#[doc = "                                        \"f64\","]
#[doc = "                                        \"i32\","]
#[doc = "                                        \"i64\","]
#[doc = "                                        \"u32\","]
#[doc = "                                        \"u64\","]
#[doc = "                                        \"uuid\","]
#[doc = "                                        \"date-time\","]
#[doc = "                                        \"duration\","]
#[doc = "                                        \"object\","]
#[doc = "                                        \"array\""]
#[doc = "                                      ]"]
#[doc = "                                    },"]
#[doc = "                                    {"]
#[doc = "                                      \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "                                      \"type\": \"object\","]
#[doc = "                                      \"required\": ["]
#[doc = "                                        \"$ref\""]
#[doc = "                                      ],"]
#[doc = "                                      \"properties\": {"]
#[doc = "                                        \"$ref\": {"]
#[doc = "                                          \"type\": \"string\""]
#[doc = "                                        }"]
#[doc = "                                      },"]
#[doc = "                                      \"additionalProperties\": false"]
#[doc = "                                    }"]
#[doc = "                                  ],"]
#[doc = "                                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                                },"]
#[doc = "                                \"ui_label\": {"]
#[doc = "                                  \"type\": \"string\""]
#[doc = "                                }"]
#[doc = "                              },"]
#[doc = "                              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                            }"]
#[doc = "                          ]"]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"additionalProperties\": false"]
#[doc = "                    },"]
#[doc = "                    \"physics_properties\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/base/PhysicsProperties.v1.schema.json\","]
#[doc = "                      \"title\": \"Base Physics Properties\","]
#[doc = "                      \"description\": \"Defines the common physics-related properties for components and laws.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"required\": ["]
#[doc = "                        \"engine\","]
#[doc = "                        \"is_quantum\""]
#[doc = "                      ],"]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"collapse_sensitive\": {"]
#[doc = "                          \"description\": \"Indicates if the object is affected by or triggers quantum collapse.\","]
#[doc = "                          \"type\": \"boolean\""]
#[doc = "                        },"]
#[doc = "                        \"engine\": {"]
#[doc = "                          \"description\": \"The physics engine responsible for this object.\","]
#[doc = "                          \"enum\": ["]
#[doc = "                            \"quantum\","]
#[doc = "                            \"classical\","]
#[doc = "                            \"hybrid\""]
#[doc = "                          ]"]
#[doc = "                        },"]
#[doc = "                        \"is_quantum\": {"]
#[doc = "                          \"description\": \"Indicates if the object has quantum properties.\","]
#[doc = "                          \"type\": \"boolean\""]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "                  \"fields\": {"]
#[doc = "                    \"end_date\": {"]
#[doc = "                      \"description\": \"When this focus is scheduled to end or be reviewed.\","]
#[doc = "                      \"nullable\": true,"]
#[doc = "                      \"type\": \"date-time\""]
#[doc = "                    },"]
#[doc = "                    \"scope\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/fields/TemporalScope.v1.json\","]
#[doc = "                      \"description\": \"The temporal scope or duration of an entity or process.\","]
#[doc = "                      \"enum\": ["]
#[doc = "                        \"Daily\","]
#[doc = "                        \"Weekly\","]
#[doc = "                        \"Monthly\","]
#[doc = "                        \"Quarterly\","]
#[doc = "                        \"Yearly\","]
#[doc = "                        \"Ongoing\""]
#[doc = "                      ],"]
#[doc = "                      \"title\": \"Temporal Scope Field\","]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    },"]
#[doc = "                    \"start_date\": {"]
#[doc = "                      \"description\": \"When this focus becomes active.\","]
#[doc = "                      \"type\": \"date-time\""]
#[doc = "                    },"]
#[doc = "                    \"theme\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/fields/Theme.v1.json\","]
#[doc = "                      \"description\": \"A concise statement of a focus, goal, or pattern.\","]
#[doc = "                      \"title\": \"Theme Field\","]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"physics_properties\": {"]
#[doc = "                    \"engine\": \"quantum\","]
#[doc = "                    \"is_quantum\": true"]
#[doc = "                  },"]
#[doc = "                  \"schema_version\": \"1.1.0\""]
#[doc = "                }"]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"entity_type\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/types/classification/EntityType.v1.json\","]
#[doc = "              \"title\": \"Entity Type\","]
#[doc = "              \"description\": \"A canonical enum of all 7 cognitive entity types.\","]
#[doc = "              \"type\": \"string\","]
#[doc = "              \"enum\": ["]
#[doc = "                \"Focus\","]
#[doc = "                \"Filament\","]
#[doc = "                \"Motif\","]
#[doc = "                \"Intent\","]
#[doc = "                \"Moment\","]
#[doc = "                \"Bond\","]
#[doc = "                \"Thread\""]
#[doc = "              ]"]
#[doc = "            },"]
#[doc = "            \"physics_state\": {"]
#[doc = "              \"title\": \"FocusPhysicsState\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"quantum\","]
#[doc = "                \"universal\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"quantum\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/components/QuantumState.v1.schema.json\","]
#[doc = "                  \"title\": \"Quantum State Component\","]
#[doc = "                  \"description\": \"Manages the quantum properties of an entity, including its superposition and entanglement.\","]
#[doc = "                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "                  \"fields\": {"]
#[doc = "                    \"coherence_score\": {"]
#[doc = "                      \"description\": \"The purity of the quantum state (0.0 = maximally mixed, 1.0 = pure).\","]
#[doc = "                      \"maximum\": 1.0,"]
#[doc = "                      \"minimum\": 0.0,"]
#[doc = "                      \"type\": \"number\""]
#[doc = "                    },"]
#[doc = "                    \"density_matrix\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/types/physics/DensityMatrix.v1.json\","]
#[doc = "                      \"description\": \"A 2x2 matrix of complex numbers representing a quantum state.\","]
#[doc = "                      \"items\": {"]
#[doc = "                        \"items\": {"]
#[doc = "                          \"$id\": \"https://familiar.dev/schemas/types/physics/ComplexNumber.v1.json\","]
#[doc = "                          \"description\": \"Represents a complex number with real and imaginary parts.\","]
#[doc = "                          \"properties\": {"]
#[doc = "                            \"imaginary\": {"]
#[doc = "                              \"type\": \"number\""]
#[doc = "                            },"]
#[doc = "                            \"real\": {"]
#[doc = "                              \"type\": \"number\""]
#[doc = "                            }"]
#[doc = "                          },"]
#[doc = "                          \"required\": ["]
#[doc = "                            \"real\","]
#[doc = "                            \"imaginary\""]
#[doc = "                          ],"]
#[doc = "                          \"title\": \"Complex Number\","]
#[doc = "                          \"type\": \"object\""]
#[doc = "                        },"]
#[doc = "                        \"maxItems\": 2,"]
#[doc = "                        \"minItems\": 2,"]
#[doc = "                        \"type\": \"array\""]
#[doc = "                      },"]
#[doc = "                      \"maxItems\": 2,"]
#[doc = "                      \"minItems\": 2,"]
#[doc = "                      \"title\": \"Density Matrix\","]
#[doc = "                      \"type\": \"array\""]
#[doc = "                    },"]
#[doc = "                    \"entanglement_network\": {"]
#[doc = "                      \"additionalProperties\": {"]
#[doc = "                        \"maximum\": 1.0,"]
#[doc = "                        \"minimum\": 0.0,"]
#[doc = "                        \"type\": \"number\""]
#[doc = "                      },"]
#[doc = "                      \"type\": \"object\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"physics_properties\": {"]
#[doc = "                    \"engine\": \"quantum\","]
#[doc = "                    \"is_quantum\": true"]
#[doc = "                  },"]
#[doc = "                  \"schema_version\": \"1.0.0\""]
#[doc = "                },"]
#[doc = "                \"universal\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/components/UniversalPhysicsState.v1.schema.json\","]
#[doc = "                  \"title\": \"Universal Physics State Component\","]
#[doc = "                  \"description\": \"The transient, mutable physics state of an entity.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"fields\": {"]
#[doc = "                      \"title\": \"UniversalPhysicsStateFields\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"required\": ["]
#[doc = "                        \"cognitive_perspective\","]
#[doc = "                        \"consolidation_rate\","]
#[doc = "                        \"decay_rate\","]
#[doc = "                        \"energy\","]
#[doc = "                        \"entanglement_strength\","]
#[doc = "                        \"momentum\","]
#[doc = "                        \"quantum_coherence\""]
#[doc = "                      ],"]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"cognitive_perspective\": {"]
#[doc = "                          \"$id\": \"https://familiar.dev/schemas/fields/CognitivePerspective.v1.schema.json\","]
#[doc = "                          \"title\": \"Cognitive Perspective Field\","]
#[doc = "                          \"description\": \"The intrinsic 'spin' or 'flavor' of the entity, which generates cognitive dissonance (torsion).\","]
#[doc = "                          \"ui_label\": \"Cognitive Perspective\""]
#[doc = "                        },"]
#[doc = "                        \"consolidation_rate\": {"]
#[doc = "                          \"$id\": \"https://familiar.dev/schemas/snippets/fields/ConsolidationRate.v1.json\","]
#[doc = "                          \"title\": \"Consolidation Rate Field\","]
#[doc = "                          \"description\": \"The base rate of memory consolidation for an entity, before multipliers are applied. Represents how quickly an unstable memory becomes stable.\","]
#[doc = "                          \"type\": \"object\","]
#[doc = "                          \"required\": ["]
#[doc = "                            \"value\""]
#[doc = "                          ],"]
#[doc = "                          \"properties\": {"]
#[doc = "                            \"value\": {"]
#[doc = "                              \"default\": 0.0,"]
#[doc = "                              \"type\": \"number\","]
#[doc = "                              \"format\": \"double\","]
#[doc = "                              \"maximum\": 1.0,"]
#[doc = "                              \"minimum\": 0.0,"]
#[doc = "                              \"x-python-type\": \"float\","]
#[doc = "                              \"x-rust-type\": \"f64\""]
#[doc = "                            }"]
#[doc = "                          },"]
#[doc = "                          \"additionalProperties\": false"]
#[doc = "                        },"]
#[doc = "                        \"decay_rate\": {"]
#[doc = "                          \"description\": \"The base rate of energy or coherence decay for an entity, before multipliers are applied.\","]
#[doc = "                          \"type\": \"object\","]
#[doc = "                          \"required\": ["]
#[doc = "                            \"value\""]
#[doc = "                          ],"]
#[doc = "                          \"properties\": {"]
#[doc = "                            \"value\": {"]
#[doc = "                              \"default\": 0.01,"]
#[doc = "                              \"type\": \"number\","]
#[doc = "                              \"format\": \"double\","]
#[doc = "                              \"x-python-type\": \"float\","]
#[doc = "                              \"x-rust-type\": \"f64\""]
#[doc = "                            }"]
#[doc = "                          },"]
#[doc = "                          \"additionalProperties\": false"]
#[doc = "                        },"]
#[doc = "                        \"energy\": {"]
#[doc = "                          \"description\": \"The current energy level of an entity.\","]
#[doc = "                          \"default\": 0.1,"]
#[doc = "                          \"type\": \"number\""]
#[doc = "                        },"]
#[doc = "                        \"entanglement_strength\": {"]
#[doc = "                          \"description\": \"The overall entanglement strength of this entity with others. Null for classical entities.\","]
#[doc = "                          \"default\": null,"]
#[doc = "                          \"type\": ["]
#[doc = "                            \"number\","]
#[doc = "                            \"null\""]
#[doc = "                          ],"]
#[doc = "                          \"maximum\": 1.0,"]
#[doc = "                          \"minimum\": 0.0"]
#[doc = "                        },"]
#[doc = "                        \"momentum\": {"]
#[doc = "                          \"$id\": \"https://familiar.dev/schemas/types/physics/Vec6.v1.json\","]
#[doc = "                          \"title\": \"6D Physics Vector\","]
#[doc = "                          \"description\": \"A reusable data type for a vector of six f64 numbers, used for momentum and forces in the 6 spatial dimensions of the manifold.\","]
#[doc = "                          \"type\": \"array\","]
#[doc = "                          \"items\": {"]
#[doc = "                            \"type\": \"number\""]
#[doc = "                          },"]
#[doc = "                          \"maxItems\": 6,"]
#[doc = "                          \"minItems\": 6"]
#[doc = "                        },"]
#[doc = "                        \"quantum_coherence\": {"]
#[doc = "                          \"description\": \"The quantum coherence level of the entity, representing its degree of superposition. Null for classical entities.\","]
#[doc = "                          \"default\": null,"]
#[doc = "                          \"type\": ["]
#[doc = "                            \"number\","]
#[doc = "                            \"null\""]
#[doc = "                          ],"]
#[doc = "                          \"maximum\": 1.0,"]
#[doc = "                          \"minimum\": 0.0"]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"additionalProperties\": false"]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "                  \"schema_version\": \"3.0.0\""]
#[doc = "                }"]
#[doc = "              }"]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"description\": {"]
#[doc = "      \"description\": \"A clear, complete sentence explaining the object's purpose and function within the system.\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"schema_version\": {"]
#[doc = "      \"description\": \"The semantic version of this schema definition (e.g., '1.0.0').\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"title\": {"]
#[doc = "      \"description\": \"The human-readable, PascalCase name of the object (e.g., 'UniversalPhysicsState').\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"user_context\": {"]
#[doc = "      \"title\": \"BaseUserContext\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"user_id\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"session_id\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/fields/EntityId.v1.json\","]
#[doc = "          \"title\": \"Entity ID Field\","]
#[doc = "          \"description\": \"A reusable definition for a unique entity identifier.\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"user_id\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/types/primitives/UUID.v1.json\","]
#[doc = "          \"title\": \"UUID\","]
#[doc = "          \"description\": \"A canonical definition for a Universally Unique Identifier (UUID).\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"category\": \"payloads\","]
#[doc = "  \"schema_version\": \"1.0.0\","]
#[doc = "  \"source_file\": \"payloads/DraftPayload.schema.json\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct EntityDraftPayload {
    #[doc = "This payload's data is a valid, complete entity schema."]
    pub data: EntityDraftPayloadData,
    #[doc = "A clear, complete sentence explaining the object's purpose and function within the system."]
    pub description: ::std::string::String,
    #[doc = "The semantic version of this schema definition (e.g., '1.0.0')."]
    pub schema_version: ::std::string::String,
    #[doc = "The human-readable, PascalCase name of the object (e.g., 'UniversalPhysicsState')."]
    pub title: ::std::string::String,
    pub user_context: BaseUserContext,
}
impl ::std::convert::From<&EntityDraftPayload> for EntityDraftPayload {
    fn from(value: &EntityDraftPayload) -> Self {
        value.clone()
    }
}
impl EntityDraftPayload {
    pub fn builder() -> builder::EntityDraftPayload {
        Default::default()
    }
}
#[doc = "This payload's data is a valid, complete entity schema."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"This payload's data is a valid, complete entity schema.\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/entities/Moment.v1.schema.json\","]
#[doc = "      \"title\": \"Moment Entity\","]
#[doc = "      \"description\": \"A classical entity representing a specific, objective event in the past. This is the atomic unit of episodic memory.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"components\","]
#[doc = "        \"created_at\","]
#[doc = "        \"description\","]
#[doc = "        \"entity_id\","]
#[doc = "        \"entity_type\","]
#[doc = "        \"physics_state\","]
#[doc = "        \"schema_version\","]
#[doc = "        \"tenant_id\","]
#[doc = "        \"title\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"components\": {"]
#[doc = "          \"title\": \"MomentComponents\","]
#[doc = "          \"description\": \"Component references temporarily disabled for pipeline testing\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"required\": ["]
#[doc = "            \"content\""]
#[doc = "          ],"]
#[doc = "          \"properties\": {"]
#[doc = "            \"_comment\": {"]
#[doc = "              \"description\": \"TODO: Re-enable component references when component schemas are available\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"content\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/components/MomentContent.v1.schema.json\","]
#[doc = "              \"title\": \"Moment Content Component\","]
#[doc = "              \"description\": \"Defines the objective, factual content of a Moment entity, representing a specific event in time.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"description\","]
#[doc = "                \"fields\","]
#[doc = "                \"physics_properties\","]
#[doc = "                \"schema_version\","]
#[doc = "                \"title\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"description\": {"]
#[doc = "                  \"description\": \"A clear, complete sentence explaining the object's purpose and function within the system.\","]
#[doc = "                  \"type\": \"string\""]
#[doc = "                },"]
#[doc = "                \"fields\": {"]
#[doc = "                  \"title\": \"MomentContentFields\","]
#[doc = "                  \"description\": \"A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"description\","]
#[doc = "                    \"moment_type\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"description\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "                      \"title\": \"Description Field\","]
#[doc = "                      \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "                      \"default\": \"\","]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    },"]
#[doc = "                    \"moment_type\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/types/classification/MomentType.v1.json\","]
#[doc = "                      \"title\": \"Moment Type\","]
#[doc = "                      \"description\": \"A canonical enum for the classification of a Moment entity's content.\","]
#[doc = "                      \"type\": \"string\","]
#[doc = "                      \"enum\": ["]
#[doc = "                        \"Event\","]
#[doc = "                        \"Experience\","]
#[doc = "                        \"Observation\","]
#[doc = "                        \"Interaction\""]
#[doc = "                      ]"]
#[doc = "                    },"]
#[doc = "                    \"objective_facts\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/types/StringValueMap.v1.json\","]
#[doc = "                      \"title\": \"String Value Map\","]
#[doc = "                      \"description\": \"A generic key-value map where keys are strings and values can be any JSON type. Used for flexible data structures like parameters or metadata.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"patternProperties\": {"]
#[doc = "                        \"^[a-zA-Z0-9_]+$\": {"]
#[doc = "                          \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "                          \"title\": \"Any Value\","]
#[doc = "                          \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "                          \"type\": ["]
#[doc = "                            \"string\","]
#[doc = "                            \"number\","]
#[doc = "                            \"integer\","]
#[doc = "                            \"boolean\","]
#[doc = "                            \"object\","]
#[doc = "                            \"array\","]
#[doc = "                            \"null\""]
#[doc = "                          ]"]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"additionalProperties\": false"]
#[doc = "                    },"]
#[doc = "                    \"participants\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/types/primitives/EntityIdList.v1.json\","]
#[doc = "                      \"title\": \"Entity ID List\","]
#[doc = "                      \"description\": \"A canonical definition for a list of unique entity identifiers (UUIDs).\","]
#[doc = "                      \"type\": \"array\","]
#[doc = "                      \"items\": {"]
#[doc = "                        \"type\": \"string\""]
#[doc = "                      },"]
#[doc = "                      \"uniqueItems\": true"]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"patternProperties\": {"]
#[doc = "                    \"^[a-z_][a-z0-9_]*$\": {"]
#[doc = "                      \"oneOf\": ["]
#[doc = "                        {"]
#[doc = "                          \"description\": \"A direct reference to a shared definition in SharedDefinitions.schema.json.\","]
#[doc = "                          \"type\": \"object\","]
#[doc = "                          \"required\": ["]
#[doc = "                            \"$ref\""]
#[doc = "                          ],"]
#[doc = "                          \"properties\": {"]
#[doc = "                            \"$ref\": {"]
#[doc = "                              \"type\": \"string\""]
#[doc = "                            }"]
#[doc = "                          },"]
#[doc = "                          \"additionalProperties\": false"]
#[doc = "                        },"]
#[doc = "                        {"]
#[doc = "                          \"$id\": \"https://familiar.dev/schemas/base/Field.v1.schema.json\","]
#[doc = "                          \"title\": \"Base Field\","]
#[doc = "                          \"description\": \"Defines the structure for a single, inline field definition within a component.\","]
#[doc = "                          \"type\": \"object\","]
#[doc = "                          \"required\": ["]
#[doc = "                            \"description\","]
#[doc = "                            \"type\""]
#[doc = "                          ],"]
#[doc = "                          \"properties\": {"]
#[doc = "                            \"constraints\": {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "                              \"title\": \"Constraint Definition\","]
#[doc = "                              \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "                              \"type\": \"object\","]
#[doc = "                              \"properties\": {"]
#[doc = "                                \"enum\": {"]
#[doc = "                                  \"type\": \"array\","]
#[doc = "                                  \"items\": {"]
#[doc = "                                    \"type\": \"string\""]
#[doc = "                                  }"]
#[doc = "                                },"]
#[doc = "                                \"maxLength\": {"]
#[doc = "                                  \"type\": \"integer\""]
#[doc = "                                },"]
#[doc = "                                \"maximum\": {"]
#[doc = "                                  \"type\": \"number\""]
#[doc = "                                },"]
#[doc = "                                \"minLength\": {"]
#[doc = "                                  \"type\": \"integer\""]
#[doc = "                                },"]
#[doc = "                                \"minimum\": {"]
#[doc = "                                  \"type\": \"number\""]
#[doc = "                                },"]
#[doc = "                                \"pattern\": {"]
#[doc = "                                  \"type\": \"string\""]
#[doc = "                                }"]
#[doc = "                              },"]
#[doc = "                              \"additionalProperties\": false"]
#[doc = "                            },"]
#[doc = "                            \"default_value\": {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "                              \"title\": \"Any Value\","]
#[doc = "                              \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "                              \"type\": ["]
#[doc = "                                \"string\","]
#[doc = "                                \"number\","]
#[doc = "                                \"integer\","]
#[doc = "                                \"boolean\","]
#[doc = "                                \"object\","]
#[doc = "                                \"array\","]
#[doc = "                                \"null\""]
#[doc = "                              ]"]
#[doc = "                            },"]
#[doc = "                            \"description\": {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "                              \"title\": \"Description Field\","]
#[doc = "                              \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "                              \"default\": \"\","]
#[doc = "                              \"type\": \"string\""]
#[doc = "                            },"]
#[doc = "                            \"type\": {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "                              \"title\": \"Base Type System\","]
#[doc = "                              \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "                              \"oneOf\": ["]
#[doc = "                                {"]
#[doc = "                                  \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "                                  \"type\": \"string\","]
#[doc = "                                  \"enum\": ["]
#[doc = "                                    \"string\","]
#[doc = "                                    \"boolean\","]
#[doc = "                                    \"integer\","]
#[doc = "                                    \"number\","]
#[doc = "                                    \"f32\","]
#[doc = "                                    \"f64\","]
#[doc = "                                    \"i32\","]
#[doc = "                                    \"i64\","]
#[doc = "                                    \"u32\","]
#[doc = "                                    \"u64\","]
#[doc = "                                    \"uuid\","]
#[doc = "                                    \"date-time\","]
#[doc = "                                    \"duration\","]
#[doc = "                                    \"object\","]
#[doc = "                                    \"array\""]
#[doc = "                                  ]"]
#[doc = "                                },"]
#[doc = "                                {"]
#[doc = "                                  \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "                                  \"type\": \"object\","]
#[doc = "                                  \"required\": ["]
#[doc = "                                    \"$ref\""]
#[doc = "                                  ],"]
#[doc = "                                  \"properties\": {"]
#[doc = "                                    \"$ref\": {"]
#[doc = "                                      \"type\": \"string\""]
#[doc = "                                    }"]
#[doc = "                                  },"]
#[doc = "                                  \"additionalProperties\": false"]
#[doc = "                                }"]
#[doc = "                              ],"]
#[doc = "                              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                            },"]
#[doc = "                            \"ui_label\": {"]
#[doc = "                              \"type\": \"string\""]
#[doc = "                            }"]
#[doc = "                          },"]
#[doc = "                          \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                        }"]
#[doc = "                      ]"]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"additionalProperties\": false"]
#[doc = "                },"]
#[doc = "                \"physics_properties\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/base/PhysicsProperties.v1.schema.json\","]
#[doc = "                  \"title\": \"Base Physics Properties\","]
#[doc = "                  \"description\": \"Defines the common physics-related properties for components and laws.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"engine\","]
#[doc = "                    \"is_quantum\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"collapse_sensitive\": {"]
#[doc = "                      \"description\": \"Indicates if the object is affected by or triggers quantum collapse.\","]
#[doc = "                      \"type\": \"boolean\""]
#[doc = "                    },"]
#[doc = "                    \"engine\": {"]
#[doc = "                      \"description\": \"The physics engine responsible for this object.\","]
#[doc = "                      \"enum\": ["]
#[doc = "                        \"quantum\","]
#[doc = "                        \"classical\","]
#[doc = "                        \"hybrid\""]
#[doc = "                      ]"]
#[doc = "                    },"]
#[doc = "                    \"is_quantum\": {"]
#[doc = "                      \"description\": \"Indicates if the object has quantum properties.\","]
#[doc = "                      \"type\": \"boolean\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                },"]
#[doc = "                \"schema_version\": {"]
#[doc = "                  \"description\": \"The semantic version of this schema definition (e.g., '1.0.0').\","]
#[doc = "                  \"type\": \"string\""]
#[doc = "                },"]
#[doc = "                \"title\": {"]
#[doc = "                  \"description\": \"The human-readable, PascalCase name of the object (e.g., 'UniversalPhysicsState').\","]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "              \"physics_properties\": {"]
#[doc = "                \"engine\": \"classical\","]
#[doc = "                \"is_quantum\": false"]
#[doc = "              },"]
#[doc = "              \"schema_version\": \"1.3.0\""]
#[doc = "            }"]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"created_at\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/types/primitives/Timestamp.v1.json\","]
#[doc = "          \"title\": \"Timestamp\","]
#[doc = "          \"description\": \"A canonical definition for an ISO 8601 timestamp with timezone.\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"description\": {"]
#[doc = "          \"description\": \"A clear, complete sentence explaining the object's purpose and function within the system.\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"entity_id\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/fields/EntityId.v1.json\","]
#[doc = "          \"title\": \"Entity ID Field\","]
#[doc = "          \"description\": \"A reusable definition for a unique entity identifier.\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"entity_type\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/types/classification/EntityType.v1.json\","]
#[doc = "          \"title\": \"Entity Type\","]
#[doc = "          \"description\": \"A canonical enum of all 7 cognitive entity types.\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"enum\": ["]
#[doc = "            \"Focus\","]
#[doc = "            \"Filament\","]
#[doc = "            \"Motif\","]
#[doc = "            \"Intent\","]
#[doc = "            \"Moment\","]
#[doc = "            \"Bond\","]
#[doc = "            \"Thread\""]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        \"physics_state\": {"]
#[doc = "          \"title\": \"MomentPhysicsState\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"required\": ["]
#[doc = "            \"manifold_position\","]
#[doc = "            \"universal\""]
#[doc = "          ],"]
#[doc = "          \"properties\": {"]
#[doc = "            \"manifold_position\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/components/MemoryManifoldPosition.v1.schema.json\","]
#[doc = "              \"title\": \"Memory Manifold Position Component\","]
#[doc = "              \"description\": \"The entity's position in the 7D cognitive manifold, enforcing quantized spatial coordinates (Rule 8).\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"fields\","]
#[doc = "                \"physics_properties\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"fields\": {"]
#[doc = "                  \"title\": \"BaseFields\","]
#[doc = "                  \"description\": \"A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"patternProperties\": {"]
#[doc = "                    \"^[a-z_][a-z0-9_]*$\": {"]
#[doc = "                      \"oneOf\": ["]
#[doc = "                        {"]
#[doc = "                          \"description\": \"A direct reference to a shared definition in SharedDefinitions.schema.json.\","]
#[doc = "                          \"type\": \"object\","]
#[doc = "                          \"required\": ["]
#[doc = "                            \"$ref\""]
#[doc = "                          ],"]
#[doc = "                          \"properties\": {"]
#[doc = "                            \"$ref\": {"]
#[doc = "                              \"type\": \"string\""]
#[doc = "                            }"]
#[doc = "                          },"]
#[doc = "                          \"additionalProperties\": false"]
#[doc = "                        },"]
#[doc = "                        {"]
#[doc = "                          \"$id\": \"https://familiar.dev/schemas/base/Field.v1.schema.json\","]
#[doc = "                          \"title\": \"Base Field\","]
#[doc = "                          \"description\": \"Defines the structure for a single, inline field definition within a component.\","]
#[doc = "                          \"type\": \"object\","]
#[doc = "                          \"required\": ["]
#[doc = "                            \"description\","]
#[doc = "                            \"type\""]
#[doc = "                          ],"]
#[doc = "                          \"properties\": {"]
#[doc = "                            \"constraints\": {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "                              \"title\": \"Constraint Definition\","]
#[doc = "                              \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "                              \"type\": \"object\","]
#[doc = "                              \"properties\": {"]
#[doc = "                                \"enum\": {"]
#[doc = "                                  \"type\": \"array\","]
#[doc = "                                  \"items\": {"]
#[doc = "                                    \"type\": \"string\""]
#[doc = "                                  }"]
#[doc = "                                },"]
#[doc = "                                \"maxLength\": {"]
#[doc = "                                  \"type\": \"integer\""]
#[doc = "                                },"]
#[doc = "                                \"maximum\": {"]
#[doc = "                                  \"type\": \"number\""]
#[doc = "                                },"]
#[doc = "                                \"minLength\": {"]
#[doc = "                                  \"type\": \"integer\""]
#[doc = "                                },"]
#[doc = "                                \"minimum\": {"]
#[doc = "                                  \"type\": \"number\""]
#[doc = "                                },"]
#[doc = "                                \"pattern\": {"]
#[doc = "                                  \"type\": \"string\""]
#[doc = "                                }"]
#[doc = "                              },"]
#[doc = "                              \"additionalProperties\": false"]
#[doc = "                            },"]
#[doc = "                            \"default_value\": {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "                              \"title\": \"Any Value\","]
#[doc = "                              \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "                              \"type\": ["]
#[doc = "                                \"string\","]
#[doc = "                                \"number\","]
#[doc = "                                \"integer\","]
#[doc = "                                \"boolean\","]
#[doc = "                                \"object\","]
#[doc = "                                \"array\","]
#[doc = "                                \"null\""]
#[doc = "                              ]"]
#[doc = "                            },"]
#[doc = "                            \"description\": {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "                              \"title\": \"Description Field\","]
#[doc = "                              \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "                              \"default\": \"\","]
#[doc = "                              \"type\": \"string\""]
#[doc = "                            },"]
#[doc = "                            \"type\": {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "                              \"title\": \"Base Type System\","]
#[doc = "                              \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "                              \"oneOf\": ["]
#[doc = "                                {"]
#[doc = "                                  \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "                                  \"type\": \"string\","]
#[doc = "                                  \"enum\": ["]
#[doc = "                                    \"string\","]
#[doc = "                                    \"boolean\","]
#[doc = "                                    \"integer\","]
#[doc = "                                    \"number\","]
#[doc = "                                    \"f32\","]
#[doc = "                                    \"f64\","]
#[doc = "                                    \"i32\","]
#[doc = "                                    \"i64\","]
#[doc = "                                    \"u32\","]
#[doc = "                                    \"u64\","]
#[doc = "                                    \"uuid\","]
#[doc = "                                    \"date-time\","]
#[doc = "                                    \"duration\","]
#[doc = "                                    \"object\","]
#[doc = "                                    \"array\""]
#[doc = "                                  ]"]
#[doc = "                                },"]
#[doc = "                                {"]
#[doc = "                                  \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "                                  \"type\": \"object\","]
#[doc = "                                  \"required\": ["]
#[doc = "                                    \"$ref\""]
#[doc = "                                  ],"]
#[doc = "                                  \"properties\": {"]
#[doc = "                                    \"$ref\": {"]
#[doc = "                                      \"type\": \"string\""]
#[doc = "                                    }"]
#[doc = "                                  },"]
#[doc = "                                  \"additionalProperties\": false"]
#[doc = "                                }"]
#[doc = "                              ],"]
#[doc = "                              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                            },"]
#[doc = "                            \"ui_label\": {"]
#[doc = "                              \"type\": \"string\""]
#[doc = "                            }"]
#[doc = "                          },"]
#[doc = "                          \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                        }"]
#[doc = "                      ]"]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"additionalProperties\": false"]
#[doc = "                },"]
#[doc = "                \"physics_properties\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/base/PhysicsProperties.v1.schema.json\","]
#[doc = "                  \"title\": \"Base Physics Properties\","]
#[doc = "                  \"description\": \"Defines the common physics-related properties for components and laws.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"engine\","]
#[doc = "                    \"is_quantum\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"collapse_sensitive\": {"]
#[doc = "                      \"description\": \"Indicates if the object is affected by or triggers quantum collapse.\","]
#[doc = "                      \"type\": \"boolean\""]
#[doc = "                    },"]
#[doc = "                    \"engine\": {"]
#[doc = "                      \"description\": \"The physics engine responsible for this object.\","]
#[doc = "                      \"enum\": ["]
#[doc = "                        \"quantum\","]
#[doc = "                        \"classical\","]
#[doc = "                        \"hybrid\""]
#[doc = "                      ]"]
#[doc = "                    },"]
#[doc = "                    \"is_quantum\": {"]
#[doc = "                      \"description\": \"Indicates if the object has quantum properties.\","]
#[doc = "                      \"type\": \"boolean\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "              \"fields\": {"]
#[doc = "                \"autobiographical_coordinate\": {"]
#[doc = "                  \"description\": \"Quantized coordinate for External <-> Self-related.\","]
#[doc = "                  \"type\": \"integer\""]
#[doc = "                },"]
#[doc = "                \"coherence_coordinate\": {"]
#[doc = "                  \"description\": \"Quantized coordinate for Fragmented <-> Unified.\","]
#[doc = "                  \"type\": \"integer\""]
#[doc = "                },"]
#[doc = "                \"emotional_coordinate\": {"]
#[doc = "                  \"description\": \"Quantized coordinate for Negative <-> Positive.\","]
#[doc = "                  \"type\": \"integer\""]
#[doc = "                },"]
#[doc = "                \"episodic_coordinate\": {"]
#[doc = "                  \"description\": \"Quantized coordinate for General <-> Specific.\","]
#[doc = "                  \"type\": \"integer\""]
#[doc = "                },"]
#[doc = "                \"salience_coordinate\": {"]
#[doc = "                  \"description\": \"Quantized coordinate for Background <-> Foreground.\","]
#[doc = "                  \"type\": \"integer\""]
#[doc = "                },"]
#[doc = "                \"semantic_coordinate\": {"]
#[doc = "                  \"description\": \"Quantized coordinate for Abstract <-> Concrete.\","]
#[doc = "                  \"type\": \"integer\""]
#[doc = "                },"]
#[doc = "                \"temporal_coordinate\": {"]
#[doc = "                  \"description\": \"Continuous time coordinate (t <= 0).\","]
#[doc = "                  \"maximum\": 0,"]
#[doc = "                  \"type\": \"number\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"physics_properties\": {"]
#[doc = "                \"engine\": \"classical\","]
#[doc = "                \"is_quantum\": false"]
#[doc = "              },"]
#[doc = "              \"schema_version\": \"1.0.0\""]
#[doc = "            },"]
#[doc = "            \"universal\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/components/UniversalPhysicsState.v1.schema.json\","]
#[doc = "              \"title\": \"Universal Physics State Component\","]
#[doc = "              \"description\": \"The transient, mutable physics state of an entity.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"fields\","]
#[doc = "                \"physics_properties\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"fields\": {"]
#[doc = "                  \"title\": \"UniversalPhysicsStateFields\","]
#[doc = "                  \"description\": \"A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"cognitive_perspective\","]
#[doc = "                    \"consolidation_rate\","]
#[doc = "                    \"decay_rate\","]
#[doc = "                    \"energy\","]
#[doc = "                    \"entanglement_strength\","]
#[doc = "                    \"momentum\","]
#[doc = "                    \"quantum_coherence\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"cognitive_perspective\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/fields/CognitivePerspective.v1.schema.json\","]
#[doc = "                      \"title\": \"Cognitive Perspective Field\","]
#[doc = "                      \"description\": \"The intrinsic 'spin' or 'flavor' of the entity, which generates cognitive dissonance (torsion).\","]
#[doc = "                      \"type\": \"array\","]
#[doc = "                      \"items\": {"]
#[doc = "                        \"type\": \"number\""]
#[doc = "                      },"]
#[doc = "                      \"maxItems\": 3,"]
#[doc = "                      \"minItems\": 3,"]
#[doc = "                      \"ui_label\": \"Cognitive Perspective\""]
#[doc = "                    },"]
#[doc = "                    \"consolidation_rate\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/snippets/fields/ConsolidationRate.v1.json\","]
#[doc = "                      \"title\": \"Consolidation Rate Field\","]
#[doc = "                      \"description\": \"The base rate of memory consolidation for an entity, before multipliers are applied. Represents how quickly an unstable memory becomes stable.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"required\": ["]
#[doc = "                        \"value\""]
#[doc = "                      ],"]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"value\": {"]
#[doc = "                          \"default\": 0.0,"]
#[doc = "                          \"type\": \"number\","]
#[doc = "                          \"format\": \"double\","]
#[doc = "                          \"maximum\": 1.0,"]
#[doc = "                          \"minimum\": 0.0,"]
#[doc = "                          \"x-python-type\": \"float\","]
#[doc = "                          \"x-rust-type\": \"f64\""]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"additionalProperties\": false"]
#[doc = "                    },"]
#[doc = "                    \"decay_rate\": {"]
#[doc = "                      \"description\": \"The base rate of energy or coherence decay for an entity, before multipliers are applied.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"required\": ["]
#[doc = "                        \"value\""]
#[doc = "                      ],"]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"value\": {"]
#[doc = "                          \"default\": 0.01,"]
#[doc = "                          \"type\": \"number\","]
#[doc = "                          \"format\": \"double\","]
#[doc = "                          \"x-python-type\": \"float\","]
#[doc = "                          \"x-rust-type\": \"f64\""]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"additionalProperties\": false"]
#[doc = "                    },"]
#[doc = "                    \"energy\": {"]
#[doc = "                      \"description\": \"The current energy level of an entity.\","]
#[doc = "                      \"default\": 0.1,"]
#[doc = "                      \"type\": \"number\""]
#[doc = "                    },"]
#[doc = "                    \"entanglement_strength\": {"]
#[doc = "                      \"description\": \"The overall entanglement strength of this entity with others. Null for classical entities.\","]
#[doc = "                      \"default\": null,"]
#[doc = "                      \"type\": ["]
#[doc = "                        \"number\","]
#[doc = "                        \"null\""]
#[doc = "                      ],"]
#[doc = "                      \"maximum\": 1.0,"]
#[doc = "                      \"minimum\": 0.0"]
#[doc = "                    },"]
#[doc = "                    \"momentum\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/types/physics/Vec6.v1.json\","]
#[doc = "                      \"title\": \"6D Physics Vector\","]
#[doc = "                      \"description\": \"A reusable data type for a vector of six f64 numbers, used for momentum and forces in the 6 spatial dimensions of the manifold.\","]
#[doc = "                      \"type\": \"array\","]
#[doc = "                      \"items\": {"]
#[doc = "                        \"type\": \"number\""]
#[doc = "                      },"]
#[doc = "                      \"maxItems\": 6,"]
#[doc = "                      \"minItems\": 6"]
#[doc = "                    },"]
#[doc = "                    \"quantum_coherence\": {"]
#[doc = "                      \"description\": \"The quantum coherence level of the entity, representing its degree of superposition. Null for classical entities.\","]
#[doc = "                      \"default\": null,"]
#[doc = "                      \"type\": ["]
#[doc = "                        \"number\","]
#[doc = "                        \"null\""]
#[doc = "                      ],"]
#[doc = "                      \"maximum\": 1.0,"]
#[doc = "                      \"minimum\": 0.0"]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"patternProperties\": {"]
#[doc = "                    \"^[a-z_][a-z0-9_]*$\": {"]
#[doc = "                      \"oneOf\": ["]
#[doc = "                        {"]
#[doc = "                          \"description\": \"A direct reference to a shared definition in SharedDefinitions.schema.json.\","]
#[doc = "                          \"type\": \"object\","]
#[doc = "                          \"required\": ["]
#[doc = "                            \"$ref\""]
#[doc = "                          ],"]
#[doc = "                          \"properties\": {"]
#[doc = "                            \"$ref\": {"]
#[doc = "                              \"type\": \"string\""]
#[doc = "                            }"]
#[doc = "                          },"]
#[doc = "                          \"additionalProperties\": false"]
#[doc = "                        },"]
#[doc = "                        {"]
#[doc = "                          \"$id\": \"https://familiar.dev/schemas/base/Field.v1.schema.json\","]
#[doc = "                          \"title\": \"Base Field\","]
#[doc = "                          \"description\": \"Defines the structure for a single, inline field definition within a component.\","]
#[doc = "                          \"type\": \"object\","]
#[doc = "                          \"required\": ["]
#[doc = "                            \"description\","]
#[doc = "                            \"type\""]
#[doc = "                          ],"]
#[doc = "                          \"properties\": {"]
#[doc = "                            \"constraints\": {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "                              \"title\": \"Constraint Definition\","]
#[doc = "                              \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "                              \"type\": \"object\","]
#[doc = "                              \"properties\": {"]
#[doc = "                                \"enum\": {"]
#[doc = "                                  \"type\": \"array\","]
#[doc = "                                  \"items\": {"]
#[doc = "                                    \"type\": \"string\""]
#[doc = "                                  }"]
#[doc = "                                },"]
#[doc = "                                \"maxLength\": {"]
#[doc = "                                  \"type\": \"integer\""]
#[doc = "                                },"]
#[doc = "                                \"maximum\": {"]
#[doc = "                                  \"type\": \"number\""]
#[doc = "                                },"]
#[doc = "                                \"minLength\": {"]
#[doc = "                                  \"type\": \"integer\""]
#[doc = "                                },"]
#[doc = "                                \"minimum\": {"]
#[doc = "                                  \"type\": \"number\""]
#[doc = "                                },"]
#[doc = "                                \"pattern\": {"]
#[doc = "                                  \"type\": \"string\""]
#[doc = "                                }"]
#[doc = "                              },"]
#[doc = "                              \"additionalProperties\": false"]
#[doc = "                            },"]
#[doc = "                            \"default_value\": {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "                              \"title\": \"Any Value\","]
#[doc = "                              \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "                              \"type\": ["]
#[doc = "                                \"string\","]
#[doc = "                                \"number\","]
#[doc = "                                \"integer\","]
#[doc = "                                \"boolean\","]
#[doc = "                                \"object\","]
#[doc = "                                \"array\","]
#[doc = "                                \"null\""]
#[doc = "                              ]"]
#[doc = "                            },"]
#[doc = "                            \"description\": {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "                              \"title\": \"Description Field\","]
#[doc = "                              \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "                              \"default\": \"\","]
#[doc = "                              \"type\": \"string\""]
#[doc = "                            },"]
#[doc = "                            \"type\": {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "                              \"title\": \"Base Type System\","]
#[doc = "                              \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "                              \"oneOf\": ["]
#[doc = "                                {"]
#[doc = "                                  \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "                                  \"type\": \"string\","]
#[doc = "                                  \"enum\": ["]
#[doc = "                                    \"string\","]
#[doc = "                                    \"boolean\","]
#[doc = "                                    \"integer\","]
#[doc = "                                    \"number\","]
#[doc = "                                    \"f32\","]
#[doc = "                                    \"f64\","]
#[doc = "                                    \"i32\","]
#[doc = "                                    \"i64\","]
#[doc = "                                    \"u32\","]
#[doc = "                                    \"u64\","]
#[doc = "                                    \"uuid\","]
#[doc = "                                    \"date-time\","]
#[doc = "                                    \"duration\","]
#[doc = "                                    \"object\","]
#[doc = "                                    \"array\""]
#[doc = "                                  ]"]
#[doc = "                                },"]
#[doc = "                                {"]
#[doc = "                                  \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "                                  \"type\": \"object\","]
#[doc = "                                  \"required\": ["]
#[doc = "                                    \"$ref\""]
#[doc = "                                  ],"]
#[doc = "                                  \"properties\": {"]
#[doc = "                                    \"$ref\": {"]
#[doc = "                                      \"type\": \"string\""]
#[doc = "                                    }"]
#[doc = "                                  },"]
#[doc = "                                  \"additionalProperties\": false"]
#[doc = "                                }"]
#[doc = "                              ],"]
#[doc = "                              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                            },"]
#[doc = "                            \"ui_label\": {"]
#[doc = "                              \"type\": \"string\""]
#[doc = "                            }"]
#[doc = "                          },"]
#[doc = "                          \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                        }"]
#[doc = "                      ]"]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"additionalProperties\": false"]
#[doc = "                },"]
#[doc = "                \"physics_properties\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/base/PhysicsProperties.v1.schema.json\","]
#[doc = "                  \"title\": \"Base Physics Properties\","]
#[doc = "                  \"description\": \"Defines the common physics-related properties for components and laws.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"engine\","]
#[doc = "                    \"is_quantum\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"collapse_sensitive\": {"]
#[doc = "                      \"description\": \"Indicates if the object is affected by or triggers quantum collapse.\","]
#[doc = "                      \"type\": \"boolean\""]
#[doc = "                    },"]
#[doc = "                    \"engine\": {"]
#[doc = "                      \"description\": \"The physics engine responsible for this object.\","]
#[doc = "                      \"enum\": ["]
#[doc = "                        \"quantum\","]
#[doc = "                        \"classical\","]
#[doc = "                        \"hybrid\""]
#[doc = "                      ]"]
#[doc = "                    },"]
#[doc = "                    \"is_quantum\": {"]
#[doc = "                      \"description\": \"Indicates if the object has quantum properties.\","]
#[doc = "                      \"type\": \"boolean\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "              \"schema_version\": \"3.0.0\""]
#[doc = "            }"]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"schema_version\": {"]
#[doc = "          \"description\": \"The semantic version of this schema definition (e.g., '1.0.0').\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"tenant_id\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/types/primitives/UUID.v1.json\","]
#[doc = "          \"title\": \"UUID\","]
#[doc = "          \"description\": \"A canonical definition for a Universally Unique Identifier (UUID).\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"title\": {"]
#[doc = "          \"description\": \"The human-readable, PascalCase name of the object (e.g., 'UniversalPhysicsState').\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "      \"schema_version\": \"1.1.0\""]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/entities/Bond.v1.schema.json\","]
#[doc = "      \"title\": \"Bond Entity\","]
#[doc = "      \"description\": \"A classical entity representing a persistent relationship between two Thread entities.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"components\","]
#[doc = "        \"entity_type\","]
#[doc = "        \"physics_state\","]
#[doc = "        \"thread_a_id\","]
#[doc = "        \"thread_b_id\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"components\": {"]
#[doc = "          \"title\": \"BondComponents\","]
#[doc = "          \"description\": \"Component references temporarily disabled for pipeline testing\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"required\": ["]
#[doc = "            \"content\","]
#[doc = "            \"permissions\","]
#[doc = "            \"physics_config\""]
#[doc = "          ],"]
#[doc = "          \"properties\": {"]
#[doc = "            \"_comment\": {"]
#[doc = "              \"description\": \"TODO: Re-enable component references when component schemas are available\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"content\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/components/BondContent.v1.schema.json\","]
#[doc = "              \"title\": \"Bond Content Component\","]
#[doc = "              \"description\": \"Defines the descriptive content and history of a relationship Bond.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"fields\","]
#[doc = "                \"physics_properties\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"fields\": {"]
#[doc = "                  \"title\": \"BondContentFields\","]
#[doc = "                  \"description\": \"A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"relationship_type\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"description\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "                      \"title\": \"Description Field\","]
#[doc = "                      \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "                      \"default\": \"\","]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    },"]
#[doc = "                    \"history\": {"]
#[doc = "                      \"type\": \"array\","]
#[doc = "                      \"items\": {"]
#[doc = "                        \"$id\": \"https://familiar.dev/schemas/types/social/BondEvent.v1.json\","]
#[doc = "                        \"title\": \"Bond Event Type\","]
#[doc = "                        \"description\": \"Represents a significant event that impacted a bond's strength or state.\","]
#[doc = "                        \"type\": \"object\","]
#[doc = "                        \"required\": ["]
#[doc = "                          \"impact\","]
#[doc = "                          \"moment_id\","]
#[doc = "                          \"timestamp\""]
#[doc = "                        ],"]
#[doc = "                        \"properties\": {"]
#[doc = "                          \"impact\": {"]
#[doc = "                            \"description\": \"How much this event affected the bond, from -1.0 (negative) to 1.0 (positive).\","]
#[doc = "                            \"type\": \"number\","]
#[doc = "                            \"maximum\": 1.0,"]
#[doc = "                            \"minimum\": -1.0"]
#[doc = "                          },"]
#[doc = "                          \"moment_id\": {"]
#[doc = "                            \"type\": \"string\""]
#[doc = "                          },"]
#[doc = "                          \"timestamp\": {"]
#[doc = "                            \"$id\": \"https://familiar.dev/schemas/types/primitives/Timestamp.v1.json\","]
#[doc = "                            \"title\": \"Timestamp\","]
#[doc = "                            \"description\": \"A canonical definition for an ISO 8601 timestamp with timezone.\","]
#[doc = "                            \"type\": \"string\""]
#[doc = "                          }"]
#[doc = "                        }"]
#[doc = "                      }"]
#[doc = "                    },"]
#[doc = "                    \"relationship_type\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/types/social/RelationshipType.v1.json\","]
#[doc = "                      \"title\": \"Relationship Type\","]
#[doc = "                      \"description\": \"A canonical enum of all possible relationship types between Threads.\","]
#[doc = "                      \"type\": \"string\","]
#[doc = "                      \"enum\": ["]
#[doc = "                        \"Family\","]
#[doc = "                        \"Friend\","]
#[doc = "                        \"Romantic\","]
#[doc = "                        \"Professional\","]
#[doc = "                        \"Acquaintance\","]
#[doc = "                        \"Adversarial\""]
#[doc = "                      ]"]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"patternProperties\": {"]
#[doc = "                    \"^[a-z_][a-z0-9_]*$\": {"]
#[doc = "                      \"oneOf\": ["]
#[doc = "                        {"]
#[doc = "                          \"description\": \"A direct reference to a shared definition in SharedDefinitions.schema.json.\","]
#[doc = "                          \"type\": \"object\","]
#[doc = "                          \"required\": ["]
#[doc = "                            \"$ref\""]
#[doc = "                          ],"]
#[doc = "                          \"properties\": {"]
#[doc = "                            \"$ref\": {"]
#[doc = "                              \"type\": \"string\""]
#[doc = "                            }"]
#[doc = "                          },"]
#[doc = "                          \"additionalProperties\": false"]
#[doc = "                        },"]
#[doc = "                        {"]
#[doc = "                          \"$id\": \"https://familiar.dev/schemas/base/Field.v1.schema.json\","]
#[doc = "                          \"title\": \"Base Field\","]
#[doc = "                          \"description\": \"Defines the structure for a single, inline field definition within a component.\","]
#[doc = "                          \"type\": \"object\","]
#[doc = "                          \"required\": ["]
#[doc = "                            \"description\","]
#[doc = "                            \"type\""]
#[doc = "                          ],"]
#[doc = "                          \"properties\": {"]
#[doc = "                            \"constraints\": {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "                              \"title\": \"Constraint Definition\","]
#[doc = "                              \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "                              \"type\": \"object\","]
#[doc = "                              \"properties\": {"]
#[doc = "                                \"enum\": {"]
#[doc = "                                  \"type\": \"array\","]
#[doc = "                                  \"items\": {"]
#[doc = "                                    \"type\": \"string\""]
#[doc = "                                  }"]
#[doc = "                                },"]
#[doc = "                                \"maxLength\": {"]
#[doc = "                                  \"type\": \"integer\""]
#[doc = "                                },"]
#[doc = "                                \"maximum\": {"]
#[doc = "                                  \"type\": \"number\""]
#[doc = "                                },"]
#[doc = "                                \"minLength\": {"]
#[doc = "                                  \"type\": \"integer\""]
#[doc = "                                },"]
#[doc = "                                \"minimum\": {"]
#[doc = "                                  \"type\": \"number\""]
#[doc = "                                },"]
#[doc = "                                \"pattern\": {"]
#[doc = "                                  \"type\": \"string\""]
#[doc = "                                }"]
#[doc = "                              },"]
#[doc = "                              \"additionalProperties\": false"]
#[doc = "                            },"]
#[doc = "                            \"default_value\": {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "                              \"title\": \"Any Value\","]
#[doc = "                              \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "                              \"type\": ["]
#[doc = "                                \"string\","]
#[doc = "                                \"number\","]
#[doc = "                                \"integer\","]
#[doc = "                                \"boolean\","]
#[doc = "                                \"object\","]
#[doc = "                                \"array\","]
#[doc = "                                \"null\""]
#[doc = "                              ]"]
#[doc = "                            },"]
#[doc = "                            \"description\": {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "                              \"title\": \"Description Field\","]
#[doc = "                              \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "                              \"default\": \"\","]
#[doc = "                              \"type\": \"string\""]
#[doc = "                            },"]
#[doc = "                            \"type\": {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "                              \"title\": \"Base Type System\","]
#[doc = "                              \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "                              \"oneOf\": ["]
#[doc = "                                {"]
#[doc = "                                  \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "                                  \"type\": \"string\","]
#[doc = "                                  \"enum\": ["]
#[doc = "                                    \"string\","]
#[doc = "                                    \"boolean\","]
#[doc = "                                    \"integer\","]
#[doc = "                                    \"number\","]
#[doc = "                                    \"f32\","]
#[doc = "                                    \"f64\","]
#[doc = "                                    \"i32\","]
#[doc = "                                    \"i64\","]
#[doc = "                                    \"u32\","]
#[doc = "                                    \"u64\","]
#[doc = "                                    \"uuid\","]
#[doc = "                                    \"date-time\","]
#[doc = "                                    \"duration\","]
#[doc = "                                    \"object\","]
#[doc = "                                    \"array\""]
#[doc = "                                  ]"]
#[doc = "                                },"]
#[doc = "                                {"]
#[doc = "                                  \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "                                  \"type\": \"object\","]
#[doc = "                                  \"required\": ["]
#[doc = "                                    \"$ref\""]
#[doc = "                                  ],"]
#[doc = "                                  \"properties\": {"]
#[doc = "                                    \"$ref\": {"]
#[doc = "                                      \"type\": \"string\""]
#[doc = "                                    }"]
#[doc = "                                  },"]
#[doc = "                                  \"additionalProperties\": false"]
#[doc = "                                }"]
#[doc = "                              ],"]
#[doc = "                              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                            },"]
#[doc = "                            \"ui_label\": {"]
#[doc = "                              \"type\": \"string\""]
#[doc = "                            }"]
#[doc = "                          },"]
#[doc = "                          \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                        }"]
#[doc = "                      ]"]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"additionalProperties\": false"]
#[doc = "                },"]
#[doc = "                \"physics_properties\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/base/PhysicsProperties.v1.schema.json\","]
#[doc = "                  \"title\": \"Base Physics Properties\","]
#[doc = "                  \"description\": \"Defines the common physics-related properties for components and laws.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"engine\","]
#[doc = "                    \"is_quantum\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"collapse_sensitive\": {"]
#[doc = "                      \"description\": \"Indicates if the object is affected by or triggers quantum collapse.\","]
#[doc = "                      \"type\": \"boolean\""]
#[doc = "                    },"]
#[doc = "                    \"engine\": {"]
#[doc = "                      \"description\": \"The physics engine responsible for this object.\","]
#[doc = "                      \"enum\": ["]
#[doc = "                        \"quantum\","]
#[doc = "                        \"classical\","]
#[doc = "                        \"hybrid\""]
#[doc = "                      ]"]
#[doc = "                    },"]
#[doc = "                    \"is_quantum\": {"]
#[doc = "                      \"description\": \"Indicates if the object has quantum properties.\","]
#[doc = "                      \"type\": \"boolean\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "              \"physics_properties\": {"]
#[doc = "                \"engine\": \"classical\","]
#[doc = "                \"is_quantum\": false"]
#[doc = "              },"]
#[doc = "              \"schema_version\": \"1.1.0\""]
#[doc = "            },"]
#[doc = "            \"permissions\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/components/BondPermissions.v1.schema.json\","]
#[doc = "              \"title\": \"Bond Permissions Component\","]
#[doc = "              \"description\": \"Defines the access control and privacy rules for a Bond and its associated Moments.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"fields\","]
#[doc = "                \"physics_properties\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"fields\": {"]
#[doc = "                  \"title\": \"BaseFields\","]
#[doc = "                  \"description\": \"A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"patternProperties\": {"]
#[doc = "                    \"^[a-z_][a-z0-9_]*$\": {"]
#[doc = "                      \"oneOf\": ["]
#[doc = "                        {"]
#[doc = "                          \"description\": \"A direct reference to a shared definition in SharedDefinitions.schema.json.\","]
#[doc = "                          \"type\": \"object\","]
#[doc = "                          \"required\": ["]
#[doc = "                            \"$ref\""]
#[doc = "                          ],"]
#[doc = "                          \"properties\": {"]
#[doc = "                            \"$ref\": {"]
#[doc = "                              \"type\": \"string\""]
#[doc = "                            }"]
#[doc = "                          },"]
#[doc = "                          \"additionalProperties\": false"]
#[doc = "                        },"]
#[doc = "                        {"]
#[doc = "                          \"$id\": \"https://familiar.dev/schemas/base/Field.v1.schema.json\","]
#[doc = "                          \"title\": \"Base Field\","]
#[doc = "                          \"description\": \"Defines the structure for a single, inline field definition within a component.\","]
#[doc = "                          \"type\": \"object\","]
#[doc = "                          \"required\": ["]
#[doc = "                            \"description\","]
#[doc = "                            \"type\""]
#[doc = "                          ],"]
#[doc = "                          \"properties\": {"]
#[doc = "                            \"constraints\": {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "                              \"title\": \"Constraint Definition\","]
#[doc = "                              \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "                              \"type\": \"object\","]
#[doc = "                              \"properties\": {"]
#[doc = "                                \"enum\": {"]
#[doc = "                                  \"type\": \"array\","]
#[doc = "                                  \"items\": {"]
#[doc = "                                    \"type\": \"string\""]
#[doc = "                                  }"]
#[doc = "                                },"]
#[doc = "                                \"maxLength\": {"]
#[doc = "                                  \"type\": \"integer\""]
#[doc = "                                },"]
#[doc = "                                \"maximum\": {"]
#[doc = "                                  \"type\": \"number\""]
#[doc = "                                },"]
#[doc = "                                \"minLength\": {"]
#[doc = "                                  \"type\": \"integer\""]
#[doc = "                                },"]
#[doc = "                                \"minimum\": {"]
#[doc = "                                  \"type\": \"number\""]
#[doc = "                                },"]
#[doc = "                                \"pattern\": {"]
#[doc = "                                  \"type\": \"string\""]
#[doc = "                                }"]
#[doc = "                              },"]
#[doc = "                              \"additionalProperties\": false"]
#[doc = "                            },"]
#[doc = "                            \"default_value\": {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "                              \"title\": \"Any Value\","]
#[doc = "                              \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "                              \"type\": ["]
#[doc = "                                \"string\","]
#[doc = "                                \"number\","]
#[doc = "                                \"integer\","]
#[doc = "                                \"boolean\","]
#[doc = "                                \"object\","]
#[doc = "                                \"array\","]
#[doc = "                                \"null\""]
#[doc = "                              ]"]
#[doc = "                            },"]
#[doc = "                            \"description\": {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "                              \"title\": \"Description Field\","]
#[doc = "                              \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "                              \"default\": \"\","]
#[doc = "                              \"type\": \"string\""]
#[doc = "                            },"]
#[doc = "                            \"type\": {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "                              \"title\": \"Base Type System\","]
#[doc = "                              \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "                              \"oneOf\": ["]
#[doc = "                                {"]
#[doc = "                                  \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "                                  \"type\": \"string\","]
#[doc = "                                  \"enum\": ["]
#[doc = "                                    \"string\","]
#[doc = "                                    \"boolean\","]
#[doc = "                                    \"integer\","]
#[doc = "                                    \"number\","]
#[doc = "                                    \"f32\","]
#[doc = "                                    \"f64\","]
#[doc = "                                    \"i32\","]
#[doc = "                                    \"i64\","]
#[doc = "                                    \"u32\","]
#[doc = "                                    \"u64\","]
#[doc = "                                    \"uuid\","]
#[doc = "                                    \"date-time\","]
#[doc = "                                    \"duration\","]
#[doc = "                                    \"object\","]
#[doc = "                                    \"array\""]
#[doc = "                                  ]"]
#[doc = "                                },"]
#[doc = "                                {"]
#[doc = "                                  \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "                                  \"type\": \"object\","]
#[doc = "                                  \"required\": ["]
#[doc = "                                    \"$ref\""]
#[doc = "                                  ],"]
#[doc = "                                  \"properties\": {"]
#[doc = "                                    \"$ref\": {"]
#[doc = "                                      \"type\": \"string\""]
#[doc = "                                    }"]
#[doc = "                                  },"]
#[doc = "                                  \"additionalProperties\": false"]
#[doc = "                                }"]
#[doc = "                              ],"]
#[doc = "                              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                            },"]
#[doc = "                            \"ui_label\": {"]
#[doc = "                              \"type\": \"string\""]
#[doc = "                            }"]
#[doc = "                          },"]
#[doc = "                          \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                        }"]
#[doc = "                      ]"]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"additionalProperties\": false"]
#[doc = "                },"]
#[doc = "                \"physics_properties\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/base/PhysicsProperties.v1.schema.json\","]
#[doc = "                  \"title\": \"Base Physics Properties\","]
#[doc = "                  \"description\": \"Defines the common physics-related properties for components and laws.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"engine\","]
#[doc = "                    \"is_quantum\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"collapse_sensitive\": {"]
#[doc = "                      \"description\": \"Indicates if the object is affected by or triggers quantum collapse.\","]
#[doc = "                      \"type\": \"boolean\""]
#[doc = "                    },"]
#[doc = "                    \"engine\": {"]
#[doc = "                      \"description\": \"The physics engine responsible for this object.\","]
#[doc = "                      \"enum\": ["]
#[doc = "                        \"quantum\","]
#[doc = "                        \"classical\","]
#[doc = "                        \"hybrid\""]
#[doc = "                      ]"]
#[doc = "                    },"]
#[doc = "                    \"is_quantum\": {"]
#[doc = "                      \"description\": \"Indicates if the object has quantum properties.\","]
#[doc = "                      \"type\": \"boolean\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "              \"fields\": {"]
#[doc = "                \"allow_cross_tenant_view\": {"]
#[doc = "                  \"default\": false,"]
#[doc = "                  \"description\": \"If true, allows linked users from other tenants to view data according to their permissions.\","]
#[doc = "                  \"type\": \"boolean\""]
#[doc = "                },"]
#[doc = "                \"min_age_for_viewing\": {"]
#[doc = "                  \"default\": 13,"]
#[doc = "                  \"description\": \"The minimum age a child Thread must be for this bond's moments to be visible to them. Supports age-aware privacy.\","]
#[doc = "                  \"minimum\": 0,"]
#[doc = "                  \"type\": \"integer\""]
#[doc = "                },"]
#[doc = "                \"owner_permissions\": {"]
#[doc = "                  \"default\": ["]
#[doc = "                    \"Read\","]
#[doc = "                    \"Write\","]
#[doc = "                    \"Delete\","]
#[doc = "                    \"Share\""]
#[doc = "                  ],"]
#[doc = "                  \"description\": \"Permissions for the owner of the bond (the user in the current tenant).\","]
#[doc = "                  \"items\": {"]
#[doc = "                    \"$id\": \"https://familiar.dev/schemas/types/security/BondPermission.v1.json\","]
#[doc = "                    \"description\": \"A canonical enum of permissions related to a Bond.\","]
#[doc = "                    \"enum\": ["]
#[doc = "                      \"Read\","]
#[doc = "                      \"Write\","]
#[doc = "                      \"Delete\","]
#[doc = "                      \"Share\""]
#[doc = "                    ],"]
#[doc = "                    \"title\": \"Bond Permission\","]
#[doc = "                    \"type\": \"string\""]
#[doc = "                  },"]
#[doc = "                  \"type\": \"array\""]
#[doc = "                },"]
#[doc = "                \"subject_permissions\": {"]
#[doc = "                  \"default\": ["]
#[doc = "                    \"Read\","]
#[doc = "                    \"Contribute\""]
#[doc = "                  ],"]
#[doc = "                  \"description\": \"Permissions for the other person in the bond.\","]
#[doc = "                  \"items\": {"]
#[doc = "                    \"enum\": ["]
#[doc = "                      \"Read\","]
#[doc = "                      \"Write\","]
#[doc = "                      \"Contribute\""]
#[doc = "                    ],"]
#[doc = "                    \"type\": \"string\""]
#[doc = "                  },"]
#[doc = "                  \"type\": \"array\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"physics_properties\": {"]
#[doc = "                \"engine\": \"classical\","]
#[doc = "                \"is_quantum\": false"]
#[doc = "              },"]
#[doc = "              \"schema_version\": \"1.0.0\""]
#[doc = "            },"]
#[doc = "            \"physics_config\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/components/BondPhysicsConfig.v1.schema.json\","]
#[doc = "              \"title\": \"Bond Physics Config Component\","]
#[doc = "              \"description\": \"Configuration that defines the physics model for a Bond (Dynamic or Static).\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"fields\","]
#[doc = "                \"physics_properties\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"fields\": {"]
#[doc = "                  \"title\": \"BaseFields\","]
#[doc = "                  \"description\": \"A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"patternProperties\": {"]
#[doc = "                    \"^[a-z_][a-z0-9_]*$\": {"]
#[doc = "                      \"oneOf\": ["]
#[doc = "                        {"]
#[doc = "                          \"description\": \"A direct reference to a shared definition in SharedDefinitions.schema.json.\","]
#[doc = "                          \"type\": \"object\","]
#[doc = "                          \"required\": ["]
#[doc = "                            \"$ref\""]
#[doc = "                          ],"]
#[doc = "                          \"properties\": {"]
#[doc = "                            \"$ref\": {"]
#[doc = "                              \"type\": \"string\""]
#[doc = "                            }"]
#[doc = "                          },"]
#[doc = "                          \"additionalProperties\": false"]
#[doc = "                        },"]
#[doc = "                        {"]
#[doc = "                          \"$id\": \"https://familiar.dev/schemas/base/Field.v1.schema.json\","]
#[doc = "                          \"title\": \"Base Field\","]
#[doc = "                          \"description\": \"Defines the structure for a single, inline field definition within a component.\","]
#[doc = "                          \"type\": \"object\","]
#[doc = "                          \"required\": ["]
#[doc = "                            \"description\","]
#[doc = "                            \"type\""]
#[doc = "                          ],"]
#[doc = "                          \"properties\": {"]
#[doc = "                            \"constraints\": {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "                              \"title\": \"Constraint Definition\","]
#[doc = "                              \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "                              \"type\": \"object\","]
#[doc = "                              \"properties\": {"]
#[doc = "                                \"enum\": {"]
#[doc = "                                  \"type\": \"array\","]
#[doc = "                                  \"items\": {"]
#[doc = "                                    \"type\": \"string\""]
#[doc = "                                  }"]
#[doc = "                                },"]
#[doc = "                                \"maxLength\": {"]
#[doc = "                                  \"type\": \"integer\""]
#[doc = "                                },"]
#[doc = "                                \"maximum\": {"]
#[doc = "                                  \"type\": \"number\""]
#[doc = "                                },"]
#[doc = "                                \"minLength\": {"]
#[doc = "                                  \"type\": \"integer\""]
#[doc = "                                },"]
#[doc = "                                \"minimum\": {"]
#[doc = "                                  \"type\": \"number\""]
#[doc = "                                },"]
#[doc = "                                \"pattern\": {"]
#[doc = "                                  \"type\": \"string\""]
#[doc = "                                }"]
#[doc = "                              },"]
#[doc = "                              \"additionalProperties\": false"]
#[doc = "                            },"]
#[doc = "                            \"default_value\": {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "                              \"title\": \"Any Value\","]
#[doc = "                              \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "                              \"type\": ["]
#[doc = "                                \"string\","]
#[doc = "                                \"number\","]
#[doc = "                                \"integer\","]
#[doc = "                                \"boolean\","]
#[doc = "                                \"object\","]
#[doc = "                                \"array\","]
#[doc = "                                \"null\""]
#[doc = "                              ]"]
#[doc = "                            },"]
#[doc = "                            \"description\": {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "                              \"title\": \"Description Field\","]
#[doc = "                              \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "                              \"default\": \"\","]
#[doc = "                              \"type\": \"string\""]
#[doc = "                            },"]
#[doc = "                            \"type\": {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "                              \"title\": \"Base Type System\","]
#[doc = "                              \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "                              \"oneOf\": ["]
#[doc = "                                {"]
#[doc = "                                  \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "                                  \"type\": \"string\","]
#[doc = "                                  \"enum\": ["]
#[doc = "                                    \"string\","]
#[doc = "                                    \"boolean\","]
#[doc = "                                    \"integer\","]
#[doc = "                                    \"number\","]
#[doc = "                                    \"f32\","]
#[doc = "                                    \"f64\","]
#[doc = "                                    \"i32\","]
#[doc = "                                    \"i64\","]
#[doc = "                                    \"u32\","]
#[doc = "                                    \"u64\","]
#[doc = "                                    \"uuid\","]
#[doc = "                                    \"date-time\","]
#[doc = "                                    \"duration\","]
#[doc = "                                    \"object\","]
#[doc = "                                    \"array\""]
#[doc = "                                  ]"]
#[doc = "                                },"]
#[doc = "                                {"]
#[doc = "                                  \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "                                  \"type\": \"object\","]
#[doc = "                                  \"required\": ["]
#[doc = "                                    \"$ref\""]
#[doc = "                                  ],"]
#[doc = "                                  \"properties\": {"]
#[doc = "                                    \"$ref\": {"]
#[doc = "                                      \"type\": \"string\""]
#[doc = "                                    }"]
#[doc = "                                  },"]
#[doc = "                                  \"additionalProperties\": false"]
#[doc = "                                }"]
#[doc = "                              ],"]
#[doc = "                              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                            },"]
#[doc = "                            \"ui_label\": {"]
#[doc = "                              \"type\": \"string\""]
#[doc = "                            }"]
#[doc = "                          },"]
#[doc = "                          \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                        }"]
#[doc = "                      ]"]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"additionalProperties\": false"]
#[doc = "                },"]
#[doc = "                \"physics_properties\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/base/PhysicsProperties.v1.schema.json\","]
#[doc = "                  \"title\": \"Base Physics Properties\","]
#[doc = "                  \"description\": \"Defines the common physics-related properties for components and laws.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"engine\","]
#[doc = "                    \"is_quantum\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"collapse_sensitive\": {"]
#[doc = "                      \"description\": \"Indicates if the object is affected by or triggers quantum collapse.\","]
#[doc = "                      \"type\": \"boolean\""]
#[doc = "                    },"]
#[doc = "                    \"engine\": {"]
#[doc = "                      \"description\": \"The physics engine responsible for this object.\","]
#[doc = "                      \"enum\": ["]
#[doc = "                        \"quantum\","]
#[doc = "                        \"classical\","]
#[doc = "                        \"hybrid\""]
#[doc = "                      ]"]
#[doc = "                    },"]
#[doc = "                    \"is_quantum\": {"]
#[doc = "                      \"description\": \"Indicates if the object has quantum properties.\","]
#[doc = "                      \"type\": \"boolean\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "              \"fields\": {"]
#[doc = "                \"bond_model\": {"]
#[doc = "                  \"description\": \"The physics model to apply to this bond.\","]
#[doc = "                  \"enum\": ["]
#[doc = "                    \"Dynamic\","]
#[doc = "                    \"Static\""]
#[doc = "                  ],"]
#[doc = "                  \"type\": \"string\""]
#[doc = "                },"]
#[doc = "                \"dynamic_params\": {"]
#[doc = "                  \"description\": \"Parameters for the spring-damper model, used only if bond_model is 'Dynamic'.\","]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"base_damping_coefficient\": {"]
#[doc = "                      \"type\": \"number\""]
#[doc = "                    },"]
#[doc = "                    \"base_spring_constant\": {"]
#[doc = "                      \"type\": \"number\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"required\": ["]
#[doc = "                    \"base_spring_constant\","]
#[doc = "                    \"base_damping_coefficient\""]
#[doc = "                  ],"]
#[doc = "                  \"title\": \"BondPhysicsConfigDynamicParams\","]
#[doc = "                  \"type\": \"object\""]
#[doc = "                },"]
#[doc = "                \"static_params\": {"]
#[doc = "                  \"description\": \"Parameters for the associative model, used only if bond_model is 'Static'.\","]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"consolidation_boost\": {"]
#[doc = "                      \"type\": \"number\""]
#[doc = "                    },"]
#[doc = "                    \"emotional_anchor_strength\": {"]
#[doc = "                      \"type\": \"number\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"required\": ["]
#[doc = "                    \"consolidation_boost\","]
#[doc = "                    \"emotional_anchor_strength\""]
#[doc = "                  ],"]
#[doc = "                  \"title\": \"BondPhysicsConfigStaticParams\","]
#[doc = "                  \"type\": \"object\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"physics_properties\": {"]
#[doc = "                \"engine\": \"classical\","]
#[doc = "                \"is_quantum\": false"]
#[doc = "              },"]
#[doc = "              \"schema_version\": \"1.0.0\""]
#[doc = "            }"]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"entity_type\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/types/classification/EntityType.v1.json\","]
#[doc = "          \"title\": \"Entity Type\","]
#[doc = "          \"description\": \"A canonical enum of all 7 cognitive entity types.\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"enum\": ["]
#[doc = "            \"Focus\","]
#[doc = "            \"Filament\","]
#[doc = "            \"Motif\","]
#[doc = "            \"Intent\","]
#[doc = "            \"Moment\","]
#[doc = "            \"Bond\","]
#[doc = "            \"Thread\""]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        \"physics_state\": {"]
#[doc = "          \"title\": \"BondPhysicsState\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"required\": ["]
#[doc = "            \"tension\","]
#[doc = "            \"universal\""]
#[doc = "          ],"]
#[doc = "          \"properties\": {"]
#[doc = "            \"tension\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/components/BondTension.v1.schema.json\","]
#[doc = "              \"title\": \"Bond Tension Component\","]
#[doc = "              \"description\": \"Models the classical physics of a relationship Bond, including its strength, tension, and resonance properties. This is managed by the Particular engine.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"fields\","]
#[doc = "                \"physics_properties\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"fields\": {"]
#[doc = "                  \"title\": \"BaseFields\","]
#[doc = "                  \"description\": \"A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"patternProperties\": {"]
#[doc = "                    \"^[a-z_][a-z0-9_]*$\": {"]
#[doc = "                      \"oneOf\": ["]
#[doc = "                        {"]
#[doc = "                          \"description\": \"A direct reference to a shared definition in SharedDefinitions.schema.json.\","]
#[doc = "                          \"type\": \"object\","]
#[doc = "                          \"required\": ["]
#[doc = "                            \"$ref\""]
#[doc = "                          ],"]
#[doc = "                          \"properties\": {"]
#[doc = "                            \"$ref\": {"]
#[doc = "                              \"type\": \"string\""]
#[doc = "                            }"]
#[doc = "                          },"]
#[doc = "                          \"additionalProperties\": false"]
#[doc = "                        },"]
#[doc = "                        {"]
#[doc = "                          \"$id\": \"https://familiar.dev/schemas/base/Field.v1.schema.json\","]
#[doc = "                          \"title\": \"Base Field\","]
#[doc = "                          \"description\": \"Defines the structure for a single, inline field definition within a component.\","]
#[doc = "                          \"type\": \"object\","]
#[doc = "                          \"required\": ["]
#[doc = "                            \"description\","]
#[doc = "                            \"type\""]
#[doc = "                          ],"]
#[doc = "                          \"properties\": {"]
#[doc = "                            \"constraints\": {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "                              \"title\": \"Constraint Definition\","]
#[doc = "                              \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "                              \"type\": \"object\","]
#[doc = "                              \"properties\": {"]
#[doc = "                                \"enum\": {"]
#[doc = "                                  \"type\": \"array\","]
#[doc = "                                  \"items\": {"]
#[doc = "                                    \"type\": \"string\""]
#[doc = "                                  }"]
#[doc = "                                },"]
#[doc = "                                \"maxLength\": {"]
#[doc = "                                  \"type\": \"integer\""]
#[doc = "                                },"]
#[doc = "                                \"maximum\": {"]
#[doc = "                                  \"type\": \"number\""]
#[doc = "                                },"]
#[doc = "                                \"minLength\": {"]
#[doc = "                                  \"type\": \"integer\""]
#[doc = "                                },"]
#[doc = "                                \"minimum\": {"]
#[doc = "                                  \"type\": \"number\""]
#[doc = "                                },"]
#[doc = "                                \"pattern\": {"]
#[doc = "                                  \"type\": \"string\""]
#[doc = "                                }"]
#[doc = "                              },"]
#[doc = "                              \"additionalProperties\": false"]
#[doc = "                            },"]
#[doc = "                            \"default_value\": {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "                              \"title\": \"Any Value\","]
#[doc = "                              \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "                              \"type\": ["]
#[doc = "                                \"string\","]
#[doc = "                                \"number\","]
#[doc = "                                \"integer\","]
#[doc = "                                \"boolean\","]
#[doc = "                                \"object\","]
#[doc = "                                \"array\","]
#[doc = "                                \"null\""]
#[doc = "                              ]"]
#[doc = "                            },"]
#[doc = "                            \"description\": {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "                              \"title\": \"Description Field\","]
#[doc = "                              \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "                              \"default\": \"\","]
#[doc = "                              \"type\": \"string\""]
#[doc = "                            },"]
#[doc = "                            \"type\": {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "                              \"title\": \"Base Type System\","]
#[doc = "                              \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "                              \"oneOf\": ["]
#[doc = "                                {"]
#[doc = "                                  \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "                                  \"type\": \"string\","]
#[doc = "                                  \"enum\": ["]
#[doc = "                                    \"string\","]
#[doc = "                                    \"boolean\","]
#[doc = "                                    \"integer\","]
#[doc = "                                    \"number\","]
#[doc = "                                    \"f32\","]
#[doc = "                                    \"f64\","]
#[doc = "                                    \"i32\","]
#[doc = "                                    \"i64\","]
#[doc = "                                    \"u32\","]
#[doc = "                                    \"u64\","]
#[doc = "                                    \"uuid\","]
#[doc = "                                    \"date-time\","]
#[doc = "                                    \"duration\","]
#[doc = "                                    \"object\","]
#[doc = "                                    \"array\""]
#[doc = "                                  ]"]
#[doc = "                                },"]
#[doc = "                                {"]
#[doc = "                                  \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "                                  \"type\": \"object\","]
#[doc = "                                  \"required\": ["]
#[doc = "                                    \"$ref\""]
#[doc = "                                  ],"]
#[doc = "                                  \"properties\": {"]
#[doc = "                                    \"$ref\": {"]
#[doc = "                                      \"type\": \"string\""]
#[doc = "                                    }"]
#[doc = "                                  },"]
#[doc = "                                  \"additionalProperties\": false"]
#[doc = "                                }"]
#[doc = "                              ],"]
#[doc = "                              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                            },"]
#[doc = "                            \"ui_label\": {"]
#[doc = "                              \"type\": \"string\""]
#[doc = "                            }"]
#[doc = "                          },"]
#[doc = "                          \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                        }"]
#[doc = "                      ]"]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"additionalProperties\": false"]
#[doc = "                },"]
#[doc = "                \"physics_properties\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/base/PhysicsProperties.v1.schema.json\","]
#[doc = "                  \"title\": \"Base Physics Properties\","]
#[doc = "                  \"description\": \"Defines the common physics-related properties for components and laws.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"engine\","]
#[doc = "                    \"is_quantum\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"collapse_sensitive\": {"]
#[doc = "                      \"description\": \"Indicates if the object is affected by or triggers quantum collapse.\","]
#[doc = "                      \"type\": \"boolean\""]
#[doc = "                    },"]
#[doc = "                    \"engine\": {"]
#[doc = "                      \"description\": \"The physics engine responsible for this object.\","]
#[doc = "                      \"enum\": ["]
#[doc = "                        \"quantum\","]
#[doc = "                        \"classical\","]
#[doc = "                        \"hybrid\""]
#[doc = "                      ]"]
#[doc = "                    },"]
#[doc = "                    \"is_quantum\": {"]
#[doc = "                      \"description\": \"Indicates if the object has quantum properties.\","]
#[doc = "                      \"type\": \"boolean\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "              \"fields\": {"]
#[doc = "                \"bond_strength\": {"]
#[doc = "                  \"constraints\": {"]
#[doc = "                    \"maximum\": 1.0,"]
#[doc = "                    \"minimum\": 0.0"]
#[doc = "                  },"]
#[doc = "                  \"default\": 0.5,"]
#[doc = "                  \"description\": \"The overall strength or health of the bond.\","]
#[doc = "                  \"format\": \"double\","]
#[doc = "                  \"type\": \"number\","]
#[doc = "                  \"x-python-type\": \"float\","]
#[doc = "                  \"x-rust-type\": \"f64\""]
#[doc = "                },"]
#[doc = "                \"damping_coefficient\": {"]
#[doc = "                  \"default\": 0.5,"]
#[doc = "                  \"description\": \"The 'inertia' of the bond, representing how quickly it returns to equilibrium after a perturbation.\","]
#[doc = "                  \"format\": \"double\","]
#[doc = "                  \"type\": \"number\","]
#[doc = "                  \"x-python-type\": \"float\","]
#[doc = "                  \"x-rust-type\": \"f64\""]
#[doc = "                },"]
#[doc = "                \"resonance_phase\": {"]
#[doc = "                  \"default\": 0.0,"]
#[doc = "                  \"description\": \"The phase angle for resonance calculations with other bonds.\","]
#[doc = "                  \"format\": \"double\","]
#[doc = "                  \"type\": \"number\","]
#[doc = "                  \"x-python-type\": \"float\","]
#[doc = "                  \"x-rust-type\": \"f64\""]
#[doc = "                },"]
#[doc = "                \"spring_constant\": {"]
#[doc = "                  \"default\": 10.0,"]
#[doc = "                  \"description\": \"The 'stiffness' of the bond, representing its resistance to change.\","]
#[doc = "                  \"format\": \"double\","]
#[doc = "                  \"type\": \"number\","]
#[doc = "                  \"x-python-type\": \"float\","]
#[doc = "                  \"x-rust-type\": \"f64\""]
#[doc = "                },"]
#[doc = "                \"torsional_stress\": {"]
#[doc = "                  \"default\": 0.0,"]
#[doc = "                  \"description\": \"The cognitive dissonance or strain on the bond. Can be positive (creative tension) or negative (draining conflict).\","]
#[doc = "                  \"format\": \"double\","]
#[doc = "                  \"type\": \"number\","]
#[doc = "                  \"x-python-type\": \"float\","]
#[doc = "                  \"x-rust-type\": \"f64\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"physics_properties\": {"]
#[doc = "                \"collapse_sensitive\": false,"]
#[doc = "                \"engine\": \"classical\","]
#[doc = "                \"is_quantum\": false"]
#[doc = "              },"]
#[doc = "              \"schema_version\": \"1.0.0\""]
#[doc = "            },"]
#[doc = "            \"universal\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/components/UniversalPhysicsState.v1.schema.json\","]
#[doc = "              \"title\": \"Universal Physics State Component\","]
#[doc = "              \"description\": \"The transient, mutable physics state of an entity.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"properties\": {"]
#[doc = "                \"fields\": {"]
#[doc = "                  \"title\": \"UniversalPhysicsStateFields\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"cognitive_perspective\","]
#[doc = "                    \"consolidation_rate\","]
#[doc = "                    \"decay_rate\","]
#[doc = "                    \"energy\","]
#[doc = "                    \"entanglement_strength\","]
#[doc = "                    \"momentum\","]
#[doc = "                    \"quantum_coherence\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"cognitive_perspective\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/fields/CognitivePerspective.v1.schema.json\","]
#[doc = "                      \"title\": \"Cognitive Perspective Field\","]
#[doc = "                      \"description\": \"The intrinsic 'spin' or 'flavor' of the entity, which generates cognitive dissonance (torsion).\","]
#[doc = "                      \"ui_label\": \"Cognitive Perspective\""]
#[doc = "                    },"]
#[doc = "                    \"consolidation_rate\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/snippets/fields/ConsolidationRate.v1.json\","]
#[doc = "                      \"title\": \"Consolidation Rate Field\","]
#[doc = "                      \"description\": \"The base rate of memory consolidation for an entity, before multipliers are applied. Represents how quickly an unstable memory becomes stable.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"required\": ["]
#[doc = "                        \"value\""]
#[doc = "                      ],"]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"value\": {"]
#[doc = "                          \"default\": 0.0,"]
#[doc = "                          \"type\": \"number\","]
#[doc = "                          \"format\": \"double\","]
#[doc = "                          \"maximum\": 1.0,"]
#[doc = "                          \"minimum\": 0.0,"]
#[doc = "                          \"x-python-type\": \"float\","]
#[doc = "                          \"x-rust-type\": \"f64\""]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"additionalProperties\": false"]
#[doc = "                    },"]
#[doc = "                    \"decay_rate\": {"]
#[doc = "                      \"description\": \"The base rate of energy or coherence decay for an entity, before multipliers are applied.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"required\": ["]
#[doc = "                        \"value\""]
#[doc = "                      ],"]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"value\": {"]
#[doc = "                          \"default\": 0.01,"]
#[doc = "                          \"type\": \"number\","]
#[doc = "                          \"format\": \"double\","]
#[doc = "                          \"x-python-type\": \"float\","]
#[doc = "                          \"x-rust-type\": \"f64\""]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"additionalProperties\": false"]
#[doc = "                    },"]
#[doc = "                    \"energy\": {"]
#[doc = "                      \"description\": \"The current energy level of an entity.\","]
#[doc = "                      \"default\": 0.1,"]
#[doc = "                      \"type\": \"number\""]
#[doc = "                    },"]
#[doc = "                    \"entanglement_strength\": {"]
#[doc = "                      \"description\": \"The overall entanglement strength of this entity with others. Null for classical entities.\","]
#[doc = "                      \"default\": null,"]
#[doc = "                      \"type\": ["]
#[doc = "                        \"number\","]
#[doc = "                        \"null\""]
#[doc = "                      ],"]
#[doc = "                      \"maximum\": 1.0,"]
#[doc = "                      \"minimum\": 0.0"]
#[doc = "                    },"]
#[doc = "                    \"momentum\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/types/physics/Vec6.v1.json\","]
#[doc = "                      \"title\": \"6D Physics Vector\","]
#[doc = "                      \"description\": \"A reusable data type for a vector of six f64 numbers, used for momentum and forces in the 6 spatial dimensions of the manifold.\","]
#[doc = "                      \"type\": \"array\","]
#[doc = "                      \"items\": {"]
#[doc = "                        \"type\": \"number\""]
#[doc = "                      },"]
#[doc = "                      \"maxItems\": 6,"]
#[doc = "                      \"minItems\": 6"]
#[doc = "                    },"]
#[doc = "                    \"quantum_coherence\": {"]
#[doc = "                      \"description\": \"The quantum coherence level of the entity, representing its degree of superposition. Null for classical entities.\","]
#[doc = "                      \"default\": null,"]
#[doc = "                      \"type\": ["]
#[doc = "                        \"number\","]
#[doc = "                        \"null\""]
#[doc = "                      ],"]
#[doc = "                      \"maximum\": 1.0,"]
#[doc = "                      \"minimum\": 0.0"]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"additionalProperties\": false"]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "              \"schema_version\": \"3.0.0\""]
#[doc = "            }"]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"thread_a_id\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/fields/EntityId.v1.json\","]
#[doc = "          \"title\": \"Entity ID Field\","]
#[doc = "          \"description\": \"A reusable definition for a unique entity identifier.\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"thread_b_id\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/fields/EntityId.v1.json\","]
#[doc = "          \"title\": \"Entity ID Field\","]
#[doc = "          \"description\": \"A reusable definition for a unique entity identifier.\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/entities/thread.v3.schema.json\","]
#[doc = "      \"title\": \"Thread\","]
#[doc = "      \"description\": \"A polymorphic Thread entity that can be either a PersonThread or a GenericThread.\","]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/entities/PersonThread.v1.schema.json\","]
#[doc = "          \"title\": \"Person Thread\","]
#[doc = "          \"description\": \"A Thread representing a person, which MUST have a CognitiveBaseline.\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"required\": ["]
#[doc = "            \"components\","]
#[doc = "            \"created_at\","]
#[doc = "            \"entity_id\","]
#[doc = "            \"identity\","]
#[doc = "            \"physics_state\","]
#[doc = "            \"tenant_id\""]
#[doc = "          ],"]
#[doc = "          \"properties\": {"]
#[doc = "            \"components\": {"]
#[doc = "              \"title\": \"PersonThreadComponents\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"cognitive_baseline\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"cognitive_baseline\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/components/CognitiveBaseline.v1.schema.json\","]
#[doc = "                  \"title\": \"Cognitive Baseline Component\","]
#[doc = "                  \"description\": \"Defines the innate 'personality' or temperament of a Thread.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"fields\","]
#[doc = "                    \"physics_properties\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"fields\": {"]
#[doc = "                      \"title\": \"BaseFields\","]
#[doc = "                      \"description\": \"A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"patternProperties\": {"]
#[doc = "                        \"^[a-z_][a-z0-9_]*$\": {"]
#[doc = "                          \"oneOf\": ["]
#[doc = "                            {"]
#[doc = "                              \"description\": \"A direct reference to a shared definition in SharedDefinitions.schema.json.\","]
#[doc = "                              \"type\": \"object\","]
#[doc = "                              \"required\": ["]
#[doc = "                                \"$ref\""]
#[doc = "                              ],"]
#[doc = "                              \"properties\": {"]
#[doc = "                                \"$ref\": {"]
#[doc = "                                  \"type\": \"string\""]
#[doc = "                                }"]
#[doc = "                              },"]
#[doc = "                              \"additionalProperties\": false"]
#[doc = "                            },"]
#[doc = "                            {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/base/Field.v1.schema.json\","]
#[doc = "                              \"title\": \"Base Field\","]
#[doc = "                              \"description\": \"Defines the structure for a single, inline field definition within a component.\","]
#[doc = "                              \"type\": \"object\","]
#[doc = "                              \"required\": ["]
#[doc = "                                \"description\","]
#[doc = "                                \"type\""]
#[doc = "                              ],"]
#[doc = "                              \"properties\": {"]
#[doc = "                                \"constraints\": {"]
#[doc = "                                  \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "                                  \"title\": \"Constraint Definition\","]
#[doc = "                                  \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "                                  \"type\": \"object\","]
#[doc = "                                  \"properties\": {"]
#[doc = "                                    \"enum\": {"]
#[doc = "                                      \"type\": \"array\","]
#[doc = "                                      \"items\": {"]
#[doc = "                                        \"type\": \"string\""]
#[doc = "                                      }"]
#[doc = "                                    },"]
#[doc = "                                    \"maxLength\": {"]
#[doc = "                                      \"type\": \"integer\""]
#[doc = "                                    },"]
#[doc = "                                    \"maximum\": {"]
#[doc = "                                      \"type\": \"number\""]
#[doc = "                                    },"]
#[doc = "                                    \"minLength\": {"]
#[doc = "                                      \"type\": \"integer\""]
#[doc = "                                    },"]
#[doc = "                                    \"minimum\": {"]
#[doc = "                                      \"type\": \"number\""]
#[doc = "                                    },"]
#[doc = "                                    \"pattern\": {"]
#[doc = "                                      \"type\": \"string\""]
#[doc = "                                    }"]
#[doc = "                                  },"]
#[doc = "                                  \"additionalProperties\": false"]
#[doc = "                                },"]
#[doc = "                                \"default_value\": {"]
#[doc = "                                  \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "                                  \"title\": \"Any Value\","]
#[doc = "                                  \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "                                  \"type\": ["]
#[doc = "                                    \"string\","]
#[doc = "                                    \"number\","]
#[doc = "                                    \"integer\","]
#[doc = "                                    \"boolean\","]
#[doc = "                                    \"object\","]
#[doc = "                                    \"array\","]
#[doc = "                                    \"null\""]
#[doc = "                                  ]"]
#[doc = "                                },"]
#[doc = "                                \"description\": {"]
#[doc = "                                  \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "                                  \"title\": \"Description Field\","]
#[doc = "                                  \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "                                  \"default\": \"\","]
#[doc = "                                  \"type\": \"string\""]
#[doc = "                                },"]
#[doc = "                                \"type\": {"]
#[doc = "                                  \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "                                  \"title\": \"Base Type System\","]
#[doc = "                                  \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "                                  \"oneOf\": ["]
#[doc = "                                    {"]
#[doc = "                                      \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "                                      \"type\": \"string\","]
#[doc = "                                      \"enum\": ["]
#[doc = "                                        \"string\","]
#[doc = "                                        \"boolean\","]
#[doc = "                                        \"integer\","]
#[doc = "                                        \"number\","]
#[doc = "                                        \"f32\","]
#[doc = "                                        \"f64\","]
#[doc = "                                        \"i32\","]
#[doc = "                                        \"i64\","]
#[doc = "                                        \"u32\","]
#[doc = "                                        \"u64\","]
#[doc = "                                        \"uuid\","]
#[doc = "                                        \"date-time\","]
#[doc = "                                        \"duration\","]
#[doc = "                                        \"object\","]
#[doc = "                                        \"array\""]
#[doc = "                                      ]"]
#[doc = "                                    },"]
#[doc = "                                    {"]
#[doc = "                                      \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "                                      \"type\": \"object\","]
#[doc = "                                      \"required\": ["]
#[doc = "                                        \"$ref\""]
#[doc = "                                      ],"]
#[doc = "                                      \"properties\": {"]
#[doc = "                                        \"$ref\": {"]
#[doc = "                                          \"type\": \"string\""]
#[doc = "                                        }"]
#[doc = "                                      },"]
#[doc = "                                      \"additionalProperties\": false"]
#[doc = "                                    }"]
#[doc = "                                  ],"]
#[doc = "                                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                                },"]
#[doc = "                                \"ui_label\": {"]
#[doc = "                                  \"type\": \"string\""]
#[doc = "                                }"]
#[doc = "                              },"]
#[doc = "                              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                            }"]
#[doc = "                          ]"]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"additionalProperties\": false"]
#[doc = "                    },"]
#[doc = "                    \"physics_properties\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/base/PhysicsProperties.v1.schema.json\","]
#[doc = "                      \"title\": \"Base Physics Properties\","]
#[doc = "                      \"description\": \"Defines the common physics-related properties for components and laws.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"required\": ["]
#[doc = "                        \"engine\","]
#[doc = "                        \"is_quantum\""]
#[doc = "                      ],"]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"collapse_sensitive\": {"]
#[doc = "                          \"description\": \"Indicates if the object is affected by or triggers quantum collapse.\","]
#[doc = "                          \"type\": \"boolean\""]
#[doc = "                        },"]
#[doc = "                        \"engine\": {"]
#[doc = "                          \"description\": \"The physics engine responsible for this object.\","]
#[doc = "                          \"enum\": ["]
#[doc = "                            \"quantum\","]
#[doc = "                            \"classical\","]
#[doc = "                            \"hybrid\""]
#[doc = "                          ]"]
#[doc = "                        },"]
#[doc = "                        \"is_quantum\": {"]
#[doc = "                          \"description\": \"Indicates if the object has quantum properties.\","]
#[doc = "                          \"type\": \"boolean\""]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "                  \"fields\": {"]
#[doc = "                    \"baseline\": {"]
#[doc = "                      \"description\": \"Defines the innate 'personality' or temperament of a Thread, modulating its physics interactions.\","]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"bond_damping_factor\": {"]
#[doc = "                          \"description\": \"How resistant their bonds are to change. (UI Label: Relationship Stability)\","]
#[doc = "                          \"maximum\": 2.0,"]
#[doc = "                          \"minimum\": 0.5,"]
#[doc = "                          \"type\": \"number\""]
#[doc = "                        },"]
#[doc = "                        \"consolidation_rate_modifier\": {"]
#[doc = "                          \"description\": \"How quickly their memories become stable. (UI Label: Memory Consolidation)\","]
#[doc = "                          \"maximum\": 1.5,"]
#[doc = "                          \"minimum\": 0.8,"]
#[doc = "                          \"type\": \"number\""]
#[doc = "                        },"]
#[doc = "                        \"emotional_volatility\": {"]
#[doc = "                          \"description\": \"How strongly emotional events affect this person. (UI Label: Emotional Reactivity)\","]
#[doc = "                          \"maximum\": 2.0,"]
#[doc = "                          \"minimum\": 0.5,"]
#[doc = "                          \"type\": \"number\""]
#[doc = "                        },"]
#[doc = "                        \"exploration_bias\": {"]
#[doc = "                          \"description\": \"Tendency for creative, associative thinking. (UI Label: Openness to Experience)\","]
#[doc = "                          \"maximum\": 1.3,"]
#[doc = "                          \"minimum\": 0.7,"]
#[doc = "                          \"type\": \"number\""]
#[doc = "                        },"]
#[doc = "                        \"social_energy_factor\": {"]
#[doc = "                          \"description\": \"How energized they are by social interactions. (UI Label: Social Energy)\","]
#[doc = "                          \"maximum\": 1.2,"]
#[doc = "                          \"minimum\": 0.8,"]
#[doc = "                          \"type\": \"number\""]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"required\": ["]
#[doc = "                        \"emotional_volatility\","]
#[doc = "                        \"social_energy_factor\","]
#[doc = "                        \"consolidation_rate_modifier\","]
#[doc = "                        \"bond_damping_factor\","]
#[doc = "                        \"exploration_bias\""]
#[doc = "                      ],"]
#[doc = "                      \"type\": \"object\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"physics_properties\": {"]
#[doc = "                    \"engine\": \"classical\","]
#[doc = "                    \"is_quantum\": false"]
#[doc = "                  },"]
#[doc = "                  \"schema_version\": \"1.0.0\""]
#[doc = "                }"]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"created_at\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/types/primitives/Timestamp.v1.json\","]
#[doc = "              \"title\": \"Timestamp\","]
#[doc = "              \"description\": \"A canonical definition for an ISO 8601 timestamp with timezone.\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"entity_id\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/fields/EntityId.v1.json\","]
#[doc = "              \"title\": \"Entity ID Field\","]
#[doc = "              \"description\": \"A reusable definition for a unique entity identifier.\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"identity\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/components/ThreadContent.v1.schema.json\","]
#[doc = "              \"title\": \"Thread Content Component\","]
#[doc = "              \"description\": \"Defines the core, immutable content of a Thread entity, such as its name and type.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"fields\","]
#[doc = "                \"physics_properties\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"fields\": {"]
#[doc = "                  \"title\": \"BaseFields\","]
#[doc = "                  \"description\": \"A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"patternProperties\": {"]
#[doc = "                    \"^[a-z_][a-z0-9_]*$\": {"]
#[doc = "                      \"oneOf\": ["]
#[doc = "                        {"]
#[doc = "                          \"description\": \"A direct reference to a shared definition in SharedDefinitions.schema.json.\","]
#[doc = "                          \"type\": \"object\","]
#[doc = "                          \"required\": ["]
#[doc = "                            \"$ref\""]
#[doc = "                          ],"]
#[doc = "                          \"properties\": {"]
#[doc = "                            \"$ref\": {"]
#[doc = "                              \"type\": \"string\""]
#[doc = "                            }"]
#[doc = "                          },"]
#[doc = "                          \"additionalProperties\": false"]
#[doc = "                        },"]
#[doc = "                        {"]
#[doc = "                          \"$id\": \"https://familiar.dev/schemas/base/Field.v1.schema.json\","]
#[doc = "                          \"title\": \"Base Field\","]
#[doc = "                          \"description\": \"Defines the structure for a single, inline field definition within a component.\","]
#[doc = "                          \"type\": \"object\","]
#[doc = "                          \"required\": ["]
#[doc = "                            \"description\","]
#[doc = "                            \"type\""]
#[doc = "                          ],"]
#[doc = "                          \"properties\": {"]
#[doc = "                            \"constraints\": {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "                              \"title\": \"Constraint Definition\","]
#[doc = "                              \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "                              \"type\": \"object\","]
#[doc = "                              \"properties\": {"]
#[doc = "                                \"enum\": {"]
#[doc = "                                  \"type\": \"array\","]
#[doc = "                                  \"items\": {"]
#[doc = "                                    \"type\": \"string\""]
#[doc = "                                  }"]
#[doc = "                                },"]
#[doc = "                                \"maxLength\": {"]
#[doc = "                                  \"type\": \"integer\""]
#[doc = "                                },"]
#[doc = "                                \"maximum\": {"]
#[doc = "                                  \"type\": \"number\""]
#[doc = "                                },"]
#[doc = "                                \"minLength\": {"]
#[doc = "                                  \"type\": \"integer\""]
#[doc = "                                },"]
#[doc = "                                \"minimum\": {"]
#[doc = "                                  \"type\": \"number\""]
#[doc = "                                },"]
#[doc = "                                \"pattern\": {"]
#[doc = "                                  \"type\": \"string\""]
#[doc = "                                }"]
#[doc = "                              },"]
#[doc = "                              \"additionalProperties\": false"]
#[doc = "                            },"]
#[doc = "                            \"default_value\": {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "                              \"title\": \"Any Value\","]
#[doc = "                              \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "                              \"type\": ["]
#[doc = "                                \"string\","]
#[doc = "                                \"number\","]
#[doc = "                                \"integer\","]
#[doc = "                                \"boolean\","]
#[doc = "                                \"object\","]
#[doc = "                                \"array\","]
#[doc = "                                \"null\""]
#[doc = "                              ]"]
#[doc = "                            },"]
#[doc = "                            \"description\": {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "                              \"title\": \"Description Field\","]
#[doc = "                              \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "                              \"default\": \"\","]
#[doc = "                              \"type\": \"string\""]
#[doc = "                            },"]
#[doc = "                            \"type\": {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "                              \"title\": \"Base Type System\","]
#[doc = "                              \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "                              \"oneOf\": ["]
#[doc = "                                {"]
#[doc = "                                  \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "                                  \"type\": \"string\","]
#[doc = "                                  \"enum\": ["]
#[doc = "                                    \"string\","]
#[doc = "                                    \"boolean\","]
#[doc = "                                    \"integer\","]
#[doc = "                                    \"number\","]
#[doc = "                                    \"f32\","]
#[doc = "                                    \"f64\","]
#[doc = "                                    \"i32\","]
#[doc = "                                    \"i64\","]
#[doc = "                                    \"u32\","]
#[doc = "                                    \"u64\","]
#[doc = "                                    \"uuid\","]
#[doc = "                                    \"date-time\","]
#[doc = "                                    \"duration\","]
#[doc = "                                    \"object\","]
#[doc = "                                    \"array\""]
#[doc = "                                  ]"]
#[doc = "                                },"]
#[doc = "                                {"]
#[doc = "                                  \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "                                  \"type\": \"object\","]
#[doc = "                                  \"required\": ["]
#[doc = "                                    \"$ref\""]
#[doc = "                                  ],"]
#[doc = "                                  \"properties\": {"]
#[doc = "                                    \"$ref\": {"]
#[doc = "                                      \"type\": \"string\""]
#[doc = "                                    }"]
#[doc = "                                  },"]
#[doc = "                                  \"additionalProperties\": false"]
#[doc = "                                }"]
#[doc = "                              ],"]
#[doc = "                              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                            },"]
#[doc = "                            \"ui_label\": {"]
#[doc = "                              \"type\": \"string\""]
#[doc = "                            }"]
#[doc = "                          },"]
#[doc = "                          \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                        }"]
#[doc = "                      ]"]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"additionalProperties\": false"]
#[doc = "                },"]
#[doc = "                \"physics_properties\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/base/PhysicsProperties.v1.schema.json\","]
#[doc = "                  \"title\": \"Base Physics Properties\","]
#[doc = "                  \"description\": \"Defines the common physics-related properties for components and laws.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"engine\","]
#[doc = "                    \"is_quantum\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"collapse_sensitive\": {"]
#[doc = "                      \"description\": \"Indicates if the object is affected by or triggers quantum collapse.\","]
#[doc = "                      \"type\": \"boolean\""]
#[doc = "                    },"]
#[doc = "                    \"engine\": {"]
#[doc = "                      \"description\": \"The physics engine responsible for this object.\","]
#[doc = "                      \"enum\": ["]
#[doc = "                        \"quantum\","]
#[doc = "                        \"classical\","]
#[doc = "                        \"hybrid\""]
#[doc = "                      ]"]
#[doc = "                    },"]
#[doc = "                    \"is_quantum\": {"]
#[doc = "                      \"description\": \"Indicates if the object has quantum properties.\","]
#[doc = "                      \"type\": \"boolean\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "              \"fields\": {"]
#[doc = "                \"aliases\": {"]
#[doc = "                  \"description\": \"A list of alternative names for this Thread (e.g., nicknames).\","]
#[doc = "                  \"items\": {"]
#[doc = "                    \"type\": \"string\""]
#[doc = "                  },"]
#[doc = "                  \"type\": \"array\""]
#[doc = "                },"]
#[doc = "                \"description\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "                  \"default\": \"\","]
#[doc = "                  \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "                  \"title\": \"Description Field\","]
#[doc = "                  \"type\": \"string\""]
#[doc = "                },"]
#[doc = "                \"name\": {"]
#[doc = "                  \"description\": \"The primary, human-readable name of an entity.\","]
#[doc = "                  \"title\": \"Name Field\","]
#[doc = "                  \"type\": \"string\""]
#[doc = "                },"]
#[doc = "                \"thread_type\": {"]
#[doc = "                  \"description\": \"The Platonic Form of the Thread, enforcing abstract relationships.\","]
#[doc = "                  \"enum\": ["]
#[doc = "                    \"Person\","]
#[doc = "                    \"Place\","]
#[doc = "                    \"Concept\","]
#[doc = "                    \"GenericObject\""]
#[doc = "                  ],"]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"physics_properties\": {"]
#[doc = "                \"engine\": \"classical\","]
#[doc = "                \"is_quantum\": false"]
#[doc = "              },"]
#[doc = "              \"schema_version\": \"1.2.0\""]
#[doc = "            },"]
#[doc = "            \"physics_state\": {"]
#[doc = "              \"title\": \"PersonThreadPhysicsState\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"universal\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"universal\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/components/UniversalPhysicsState.v1.schema.json\","]
#[doc = "                  \"title\": \"Universal Physics State Component\","]
#[doc = "                  \"description\": \"The transient, mutable physics state of an entity.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"fields\": {"]
#[doc = "                      \"title\": \"UniversalPhysicsStateFields\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"required\": ["]
#[doc = "                        \"cognitive_perspective\","]
#[doc = "                        \"consolidation_rate\","]
#[doc = "                        \"decay_rate\","]
#[doc = "                        \"energy\","]
#[doc = "                        \"entanglement_strength\","]
#[doc = "                        \"momentum\","]
#[doc = "                        \"quantum_coherence\""]
#[doc = "                      ],"]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"cognitive_perspective\": {"]
#[doc = "                          \"$id\": \"https://familiar.dev/schemas/fields/CognitivePerspective.v1.schema.json\","]
#[doc = "                          \"title\": \"Cognitive Perspective Field\","]
#[doc = "                          \"description\": \"The intrinsic 'spin' or 'flavor' of the entity, which generates cognitive dissonance (torsion).\","]
#[doc = "                          \"ui_label\": \"Cognitive Perspective\""]
#[doc = "                        },"]
#[doc = "                        \"consolidation_rate\": {"]
#[doc = "                          \"$id\": \"https://familiar.dev/schemas/snippets/fields/ConsolidationRate.v1.json\","]
#[doc = "                          \"title\": \"Consolidation Rate Field\","]
#[doc = "                          \"description\": \"The base rate of memory consolidation for an entity, before multipliers are applied. Represents how quickly an unstable memory becomes stable.\","]
#[doc = "                          \"type\": \"object\","]
#[doc = "                          \"required\": ["]
#[doc = "                            \"value\""]
#[doc = "                          ],"]
#[doc = "                          \"properties\": {"]
#[doc = "                            \"value\": {"]
#[doc = "                              \"default\": 0.0,"]
#[doc = "                              \"type\": \"number\","]
#[doc = "                              \"format\": \"double\","]
#[doc = "                              \"maximum\": 1.0,"]
#[doc = "                              \"minimum\": 0.0,"]
#[doc = "                              \"x-python-type\": \"float\","]
#[doc = "                              \"x-rust-type\": \"f64\""]
#[doc = "                            }"]
#[doc = "                          },"]
#[doc = "                          \"additionalProperties\": false"]
#[doc = "                        },"]
#[doc = "                        \"decay_rate\": {"]
#[doc = "                          \"description\": \"The base rate of energy or coherence decay for an entity, before multipliers are applied.\","]
#[doc = "                          \"type\": \"object\","]
#[doc = "                          \"required\": ["]
#[doc = "                            \"value\""]
#[doc = "                          ],"]
#[doc = "                          \"properties\": {"]
#[doc = "                            \"value\": {"]
#[doc = "                              \"default\": 0.01,"]
#[doc = "                              \"type\": \"number\","]
#[doc = "                              \"format\": \"double\","]
#[doc = "                              \"x-python-type\": \"float\","]
#[doc = "                              \"x-rust-type\": \"f64\""]
#[doc = "                            }"]
#[doc = "                          },"]
#[doc = "                          \"additionalProperties\": false"]
#[doc = "                        },"]
#[doc = "                        \"energy\": {"]
#[doc = "                          \"description\": \"The current energy level of an entity.\","]
#[doc = "                          \"default\": 0.1,"]
#[doc = "                          \"type\": \"number\""]
#[doc = "                        },"]
#[doc = "                        \"entanglement_strength\": {"]
#[doc = "                          \"description\": \"The overall entanglement strength of this entity with others. Null for classical entities.\","]
#[doc = "                          \"default\": null,"]
#[doc = "                          \"type\": ["]
#[doc = "                            \"number\","]
#[doc = "                            \"null\""]
#[doc = "                          ],"]
#[doc = "                          \"maximum\": 1.0,"]
#[doc = "                          \"minimum\": 0.0"]
#[doc = "                        },"]
#[doc = "                        \"momentum\": {"]
#[doc = "                          \"$id\": \"https://familiar.dev/schemas/types/physics/Vec6.v1.json\","]
#[doc = "                          \"title\": \"6D Physics Vector\","]
#[doc = "                          \"description\": \"A reusable data type for a vector of six f64 numbers, used for momentum and forces in the 6 spatial dimensions of the manifold.\","]
#[doc = "                          \"type\": \"array\","]
#[doc = "                          \"items\": {"]
#[doc = "                            \"type\": \"number\""]
#[doc = "                          },"]
#[doc = "                          \"maxItems\": 6,"]
#[doc = "                          \"minItems\": 6"]
#[doc = "                        },"]
#[doc = "                        \"quantum_coherence\": {"]
#[doc = "                          \"description\": \"The quantum coherence level of the entity, representing its degree of superposition. Null for classical entities.\","]
#[doc = "                          \"default\": null,"]
#[doc = "                          \"type\": ["]
#[doc = "                            \"number\","]
#[doc = "                            \"null\""]
#[doc = "                          ],"]
#[doc = "                          \"maximum\": 1.0,"]
#[doc = "                          \"minimum\": 0.0"]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"additionalProperties\": false"]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "                  \"schema_version\": \"3.0.0\""]
#[doc = "                }"]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"tenant_id\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/types/primitives/UUID.v1.json\","]
#[doc = "              \"title\": \"UUID\","]
#[doc = "              \"description\": \"A canonical definition for a Universally Unique Identifier (UUID).\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "          \"schema_version\": \"1.1.0\""]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/entities/GenericThread.v1.schema.json\","]
#[doc = "          \"title\": \"Generic Thread\","]
#[doc = "          \"description\": \"A Thread representing a Place, Concept, or GenericObject, which MUST NOT have a CognitiveBaseline.\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"required\": ["]
#[doc = "            \"created_at\","]
#[doc = "            \"entity_id\","]
#[doc = "            \"identity\","]
#[doc = "            \"physics_state\","]
#[doc = "            \"tenant_id\""]
#[doc = "          ],"]
#[doc = "          \"properties\": {"]
#[doc = "            \"created_at\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/types/primitives/Timestamp.v1.json\","]
#[doc = "              \"title\": \"Timestamp\","]
#[doc = "              \"description\": \"A canonical definition for an ISO 8601 timestamp with timezone.\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"entity_id\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/fields/EntityId.v1.json\","]
#[doc = "              \"title\": \"Entity ID Field\","]
#[doc = "              \"description\": \"A reusable definition for a unique entity identifier.\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"identity\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/components/ThreadContent.v1.schema.json\","]
#[doc = "              \"title\": \"Thread Content Component\","]
#[doc = "              \"description\": \"Defines the core, immutable content of a Thread entity, such as its name and type.\","]
#[doc = "              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "              \"fields\": {"]
#[doc = "                \"aliases\": {"]
#[doc = "                  \"description\": \"A list of alternative names for this Thread (e.g., nicknames).\","]
#[doc = "                  \"items\": {"]
#[doc = "                    \"type\": \"string\""]
#[doc = "                  },"]
#[doc = "                  \"type\": \"array\""]
#[doc = "                },"]
#[doc = "                \"description\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "                  \"default\": \"\","]
#[doc = "                  \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "                  \"title\": \"Description Field\","]
#[doc = "                  \"type\": \"string\""]
#[doc = "                },"]
#[doc = "                \"name\": {"]
#[doc = "                  \"description\": \"The primary, human-readable name of an entity.\","]
#[doc = "                  \"title\": \"Name Field\","]
#[doc = "                  \"type\": \"string\""]
#[doc = "                },"]
#[doc = "                \"thread_type\": {"]
#[doc = "                  \"description\": \"The Platonic Form of the Thread, enforcing abstract relationships.\","]
#[doc = "                  \"enum\": ["]
#[doc = "                    \"Person\","]
#[doc = "                    \"Place\","]
#[doc = "                    \"Concept\","]
#[doc = "                    \"GenericObject\""]
#[doc = "                  ],"]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"physics_properties\": {"]
#[doc = "                \"engine\": \"classical\","]
#[doc = "                \"is_quantum\": false"]
#[doc = "              },"]
#[doc = "              \"schema_version\": \"1.2.0\""]
#[doc = "            },"]
#[doc = "            \"physics_state\": {"]
#[doc = "              \"title\": \"GenericThreadPhysicsState\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"universal\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"universal\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/components/UniversalPhysicsState.v1.schema.json\","]
#[doc = "                  \"title\": \"Universal Physics State Component\","]
#[doc = "                  \"description\": \"The transient, mutable physics state of an entity.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"fields\": {"]
#[doc = "                      \"title\": \"UniversalPhysicsStateFields\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"required\": ["]
#[doc = "                        \"cognitive_perspective\","]
#[doc = "                        \"consolidation_rate\","]
#[doc = "                        \"decay_rate\","]
#[doc = "                        \"energy\","]
#[doc = "                        \"entanglement_strength\","]
#[doc = "                        \"momentum\","]
#[doc = "                        \"quantum_coherence\""]
#[doc = "                      ],"]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"cognitive_perspective\": {"]
#[doc = "                          \"$id\": \"https://familiar.dev/schemas/fields/CognitivePerspective.v1.schema.json\","]
#[doc = "                          \"title\": \"Cognitive Perspective Field\","]
#[doc = "                          \"description\": \"The intrinsic 'spin' or 'flavor' of the entity, which generates cognitive dissonance (torsion).\","]
#[doc = "                          \"ui_label\": \"Cognitive Perspective\""]
#[doc = "                        },"]
#[doc = "                        \"consolidation_rate\": {"]
#[doc = "                          \"$id\": \"https://familiar.dev/schemas/snippets/fields/ConsolidationRate.v1.json\","]
#[doc = "                          \"title\": \"Consolidation Rate Field\","]
#[doc = "                          \"description\": \"The base rate of memory consolidation for an entity, before multipliers are applied. Represents how quickly an unstable memory becomes stable.\","]
#[doc = "                          \"type\": \"object\","]
#[doc = "                          \"required\": ["]
#[doc = "                            \"value\""]
#[doc = "                          ],"]
#[doc = "                          \"properties\": {"]
#[doc = "                            \"value\": {"]
#[doc = "                              \"default\": 0.0,"]
#[doc = "                              \"type\": \"number\","]
#[doc = "                              \"format\": \"double\","]
#[doc = "                              \"maximum\": 1.0,"]
#[doc = "                              \"minimum\": 0.0,"]
#[doc = "                              \"x-python-type\": \"float\","]
#[doc = "                              \"x-rust-type\": \"f64\""]
#[doc = "                            }"]
#[doc = "                          },"]
#[doc = "                          \"additionalProperties\": false"]
#[doc = "                        },"]
#[doc = "                        \"decay_rate\": {"]
#[doc = "                          \"description\": \"The base rate of energy or coherence decay for an entity, before multipliers are applied.\","]
#[doc = "                          \"type\": \"object\","]
#[doc = "                          \"required\": ["]
#[doc = "                            \"value\""]
#[doc = "                          ],"]
#[doc = "                          \"properties\": {"]
#[doc = "                            \"value\": {"]
#[doc = "                              \"default\": 0.01,"]
#[doc = "                              \"type\": \"number\","]
#[doc = "                              \"format\": \"double\","]
#[doc = "                              \"x-python-type\": \"float\","]
#[doc = "                              \"x-rust-type\": \"f64\""]
#[doc = "                            }"]
#[doc = "                          },"]
#[doc = "                          \"additionalProperties\": false"]
#[doc = "                        },"]
#[doc = "                        \"energy\": {"]
#[doc = "                          \"description\": \"The current energy level of an entity.\","]
#[doc = "                          \"default\": 0.1,"]
#[doc = "                          \"type\": \"number\""]
#[doc = "                        },"]
#[doc = "                        \"entanglement_strength\": {"]
#[doc = "                          \"description\": \"The overall entanglement strength of this entity with others. Null for classical entities.\","]
#[doc = "                          \"default\": null,"]
#[doc = "                          \"type\": ["]
#[doc = "                            \"number\","]
#[doc = "                            \"null\""]
#[doc = "                          ],"]
#[doc = "                          \"maximum\": 1.0,"]
#[doc = "                          \"minimum\": 0.0"]
#[doc = "                        },"]
#[doc = "                        \"momentum\": {"]
#[doc = "                          \"$id\": \"https://familiar.dev/schemas/types/physics/Vec6.v1.json\","]
#[doc = "                          \"title\": \"6D Physics Vector\","]
#[doc = "                          \"description\": \"A reusable data type for a vector of six f64 numbers, used for momentum and forces in the 6 spatial dimensions of the manifold.\","]
#[doc = "                          \"type\": \"array\","]
#[doc = "                          \"items\": {"]
#[doc = "                            \"type\": \"number\""]
#[doc = "                          },"]
#[doc = "                          \"maxItems\": 6,"]
#[doc = "                          \"minItems\": 6"]
#[doc = "                        },"]
#[doc = "                        \"quantum_coherence\": {"]
#[doc = "                          \"description\": \"The quantum coherence level of the entity, representing its degree of superposition. Null for classical entities.\","]
#[doc = "                          \"default\": null,"]
#[doc = "                          \"type\": ["]
#[doc = "                            \"number\","]
#[doc = "                            \"null\""]
#[doc = "                          ],"]
#[doc = "                          \"maximum\": 1.0,"]
#[doc = "                          \"minimum\": 0.0"]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"additionalProperties\": false"]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "                  \"schema_version\": \"3.0.0\""]
#[doc = "                }"]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"tenant_id\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/types/primitives/UUID.v1.json\","]
#[doc = "              \"title\": \"UUID\","]
#[doc = "              \"description\": \"A canonical definition for a Universally Unique Identifier (UUID).\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "          \"schema_version\": \"1.1.0\""]
#[doc = "        }"]
#[doc = "      ],"]
#[doc = "      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/entities/Motif.v1.schema.json\","]
#[doc = "      \"title\": \"Motif Entity\","]
#[doc = "      \"description\": \"A quantum entity representing a recurring pattern of subjective experiences, derived from the consolidation of EntanglementState entities.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"components\","]
#[doc = "        \"entity_type\","]
#[doc = "        \"physics_state\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"components\": {"]
#[doc = "          \"title\": \"MotifComponents\","]
#[doc = "          \"description\": \"Component references temporarily disabled for pipeline testing\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"required\": ["]
#[doc = "            \"consolidation\","]
#[doc = "            \"content\","]
#[doc = "            \"gdpr\""]
#[doc = "          ],"]
#[doc = "          \"properties\": {"]
#[doc = "            \"_comment\": {"]
#[doc = "              \"description\": \"TODO: Re-enable component references when component schemas are available\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"consolidation\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/components/ConsolidationState.v1.schema.json\","]
#[doc = "              \"title\": \"Consolidation State Component\","]
#[doc = "              \"description\": \"Tracks the temporal consolidation state of a Motif or Filament.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"fields\","]
#[doc = "                \"physics_properties\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"fields\": {"]
#[doc = "                  \"title\": \"ConsolidationStateFields\","]
#[doc = "                  \"description\": \"A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"consolidation_level\","]
#[doc = "                    \"last_consolidated_at\","]
#[doc = "                    \"next_consolidation_due\","]
#[doc = "                    \"source_entity_count\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"consolidation_level\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/types/system/ConsolidationLevel.v1.json\","]
#[doc = "                      \"title\": \"Consolidation Level\","]
#[doc = "                      \"description\": \"A canonical enum for the temporal consolidation level of a Motif or Filament.\","]
#[doc = "                      \"type\": \"string\","]
#[doc = "                      \"enum\": ["]
#[doc = "                        \"Daily\","]
#[doc = "                        \"Weekly\","]
#[doc = "                        \"Monthly\","]
#[doc = "                        \"Yearly\","]
#[doc = "                        \"Archived\""]
#[doc = "                      ]"]
#[doc = "                    },"]
#[doc = "                    \"last_consolidated_at\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/types/primitives/NullableTimestamp.v1.json\","]
#[doc = "                      \"title\": \"Nullable Timestamp\","]
#[doc = "                      \"description\": \"A canonical definition for an optional ISO 8601 timestamp with timezone.\","]
#[doc = "                      \"type\": ["]
#[doc = "                        \"string\","]
#[doc = "                        \"null\""]
#[doc = "                      ]"]
#[doc = "                    },"]
#[doc = "                    \"next_consolidation_due\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/types/primitives/NullableTimestamp.v1.json\","]
#[doc = "                      \"title\": \"Nullable Timestamp\","]
#[doc = "                      \"description\": \"A canonical definition for an optional ISO 8601 timestamp with timezone.\","]
#[doc = "                      \"type\": ["]
#[doc = "                        \"string\","]
#[doc = "                        \"null\""]
#[doc = "                      ]"]
#[doc = "                    },"]
#[doc = "                    \"source_entity_count\": {"]
#[doc = "                      \"type\": \"integer\","]
#[doc = "                      \"minimum\": 1.0"]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"patternProperties\": {"]
#[doc = "                    \"^[a-z_][a-z0-9_]*$\": {"]
#[doc = "                      \"oneOf\": ["]
#[doc = "                        {"]
#[doc = "                          \"description\": \"A direct reference to a shared definition in SharedDefinitions.schema.json.\","]
#[doc = "                          \"type\": \"object\","]
#[doc = "                          \"required\": ["]
#[doc = "                            \"$ref\""]
#[doc = "                          ],"]
#[doc = "                          \"properties\": {"]
#[doc = "                            \"$ref\": {"]
#[doc = "                              \"type\": \"string\""]
#[doc = "                            }"]
#[doc = "                          },"]
#[doc = "                          \"additionalProperties\": false"]
#[doc = "                        },"]
#[doc = "                        {"]
#[doc = "                          \"$id\": \"https://familiar.dev/schemas/base/Field.v1.schema.json\","]
#[doc = "                          \"title\": \"Base Field\","]
#[doc = "                          \"description\": \"Defines the structure for a single, inline field definition within a component.\","]
#[doc = "                          \"type\": \"object\","]
#[doc = "                          \"required\": ["]
#[doc = "                            \"description\","]
#[doc = "                            \"type\""]
#[doc = "                          ],"]
#[doc = "                          \"properties\": {"]
#[doc = "                            \"constraints\": {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "                              \"title\": \"Constraint Definition\","]
#[doc = "                              \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "                              \"type\": \"object\","]
#[doc = "                              \"properties\": {"]
#[doc = "                                \"enum\": {"]
#[doc = "                                  \"type\": \"array\","]
#[doc = "                                  \"items\": {"]
#[doc = "                                    \"type\": \"string\""]
#[doc = "                                  }"]
#[doc = "                                },"]
#[doc = "                                \"maxLength\": {"]
#[doc = "                                  \"type\": \"integer\""]
#[doc = "                                },"]
#[doc = "                                \"maximum\": {"]
#[doc = "                                  \"type\": \"number\""]
#[doc = "                                },"]
#[doc = "                                \"minLength\": {"]
#[doc = "                                  \"type\": \"integer\""]
#[doc = "                                },"]
#[doc = "                                \"minimum\": {"]
#[doc = "                                  \"type\": \"number\""]
#[doc = "                                },"]
#[doc = "                                \"pattern\": {"]
#[doc = "                                  \"type\": \"string\""]
#[doc = "                                }"]
#[doc = "                              },"]
#[doc = "                              \"additionalProperties\": false"]
#[doc = "                            },"]
#[doc = "                            \"default_value\": {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "                              \"title\": \"Any Value\","]
#[doc = "                              \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "                              \"type\": ["]
#[doc = "                                \"string\","]
#[doc = "                                \"number\","]
#[doc = "                                \"integer\","]
#[doc = "                                \"boolean\","]
#[doc = "                                \"object\","]
#[doc = "                                \"array\","]
#[doc = "                                \"null\""]
#[doc = "                              ]"]
#[doc = "                            },"]
#[doc = "                            \"description\": {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "                              \"title\": \"Description Field\","]
#[doc = "                              \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "                              \"default\": \"\","]
#[doc = "                              \"type\": \"string\""]
#[doc = "                            },"]
#[doc = "                            \"type\": {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "                              \"title\": \"Base Type System\","]
#[doc = "                              \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "                              \"oneOf\": ["]
#[doc = "                                {"]
#[doc = "                                  \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "                                  \"type\": \"string\","]
#[doc = "                                  \"enum\": ["]
#[doc = "                                    \"string\","]
#[doc = "                                    \"boolean\","]
#[doc = "                                    \"integer\","]
#[doc = "                                    \"number\","]
#[doc = "                                    \"f32\","]
#[doc = "                                    \"f64\","]
#[doc = "                                    \"i32\","]
#[doc = "                                    \"i64\","]
#[doc = "                                    \"u32\","]
#[doc = "                                    \"u64\","]
#[doc = "                                    \"uuid\","]
#[doc = "                                    \"date-time\","]
#[doc = "                                    \"duration\","]
#[doc = "                                    \"object\","]
#[doc = "                                    \"array\""]
#[doc = "                                  ]"]
#[doc = "                                },"]
#[doc = "                                {"]
#[doc = "                                  \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "                                  \"type\": \"object\","]
#[doc = "                                  \"required\": ["]
#[doc = "                                    \"$ref\""]
#[doc = "                                  ],"]
#[doc = "                                  \"properties\": {"]
#[doc = "                                    \"$ref\": {"]
#[doc = "                                      \"type\": \"string\""]
#[doc = "                                    }"]
#[doc = "                                  },"]
#[doc = "                                  \"additionalProperties\": false"]
#[doc = "                                }"]
#[doc = "                              ],"]
#[doc = "                              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                            },"]
#[doc = "                            \"ui_label\": {"]
#[doc = "                              \"type\": \"string\""]
#[doc = "                            }"]
#[doc = "                          },"]
#[doc = "                          \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                        }"]
#[doc = "                      ]"]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"additionalProperties\": false"]
#[doc = "                },"]
#[doc = "                \"physics_properties\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/base/PhysicsProperties.v1.schema.json\","]
#[doc = "                  \"title\": \"Base Physics Properties\","]
#[doc = "                  \"description\": \"Defines the common physics-related properties for components and laws.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"engine\","]
#[doc = "                    \"is_quantum\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"collapse_sensitive\": {"]
#[doc = "                      \"description\": \"Indicates if the object is affected by or triggers quantum collapse.\","]
#[doc = "                      \"type\": \"boolean\""]
#[doc = "                    },"]
#[doc = "                    \"engine\": {"]
#[doc = "                      \"description\": \"The physics engine responsible for this object.\","]
#[doc = "                      \"enum\": ["]
#[doc = "                        \"quantum\","]
#[doc = "                        \"classical\","]
#[doc = "                        \"hybrid\""]
#[doc = "                      ]"]
#[doc = "                    },"]
#[doc = "                    \"is_quantum\": {"]
#[doc = "                      \"description\": \"Indicates if the object has quantum properties.\","]
#[doc = "                      \"type\": \"boolean\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "              \"physics_properties\": {"]
#[doc = "                \"engine\": \"classical\","]
#[doc = "                \"is_quantum\": false"]
#[doc = "              },"]
#[doc = "              \"schema_version\": \"1.2.0\""]
#[doc = "            },"]
#[doc = "            \"content\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/components/MotifContent.v1.schema.json\","]
#[doc = "              \"title\": \"Motif Content Component\","]
#[doc = "              \"description\": \"Defines the emergent pattern content of a Motif entity. This is a quantum component.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"fields\","]
#[doc = "                \"physics_properties\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"fields\": {"]
#[doc = "                  \"title\": \"MotifContentFields\","]
#[doc = "                  \"description\": \"A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"motif_description\","]
#[doc = "                    \"motif_type\","]
#[doc = "                    \"source_entanglements\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"motif_description\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "                      \"title\": \"Description Field\","]
#[doc = "                      \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "                      \"default\": \"\","]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    },"]
#[doc = "                    \"motif_type\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/types/physics/MotifType.v1.json\","]
#[doc = "                      \"title\": \"Motif Type\","]
#[doc = "                      \"description\": \"A canonical enum of the types of recurring themes or motifs in memory.\","]
#[doc = "                      \"type\": \"string\","]
#[doc = "                      \"enum\": ["]
#[doc = "                        \"Behavioral\","]
#[doc = "                        \"Emotional\","]
#[doc = "                        \"Situational\","]
#[doc = "                        \"Temporal\""]
#[doc = "                      ]"]
#[doc = "                    },"]
#[doc = "                    \"source_entanglements\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/types/primitives/EntityIdList.v1.json\","]
#[doc = "                      \"title\": \"Entity ID List\","]
#[doc = "                      \"description\": \"A canonical definition for a list of unique entity identifiers (UUIDs).\","]
#[doc = "                      \"type\": \"array\","]
#[doc = "                      \"items\": {"]
#[doc = "                        \"type\": \"string\""]
#[doc = "                      },"]
#[doc = "                      \"uniqueItems\": true"]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"patternProperties\": {"]
#[doc = "                    \"^[a-z_][a-z0-9_]*$\": {"]
#[doc = "                      \"oneOf\": ["]
#[doc = "                        {"]
#[doc = "                          \"description\": \"A direct reference to a shared definition in SharedDefinitions.schema.json.\","]
#[doc = "                          \"type\": \"object\","]
#[doc = "                          \"required\": ["]
#[doc = "                            \"$ref\""]
#[doc = "                          ],"]
#[doc = "                          \"properties\": {"]
#[doc = "                            \"$ref\": {"]
#[doc = "                              \"type\": \"string\""]
#[doc = "                            }"]
#[doc = "                          },"]
#[doc = "                          \"additionalProperties\": false"]
#[doc = "                        },"]
#[doc = "                        {"]
#[doc = "                          \"$id\": \"https://familiar.dev/schemas/base/Field.v1.schema.json\","]
#[doc = "                          \"title\": \"Base Field\","]
#[doc = "                          \"description\": \"Defines the structure for a single, inline field definition within a component.\","]
#[doc = "                          \"type\": \"object\","]
#[doc = "                          \"required\": ["]
#[doc = "                            \"description\","]
#[doc = "                            \"type\""]
#[doc = "                          ],"]
#[doc = "                          \"properties\": {"]
#[doc = "                            \"constraints\": {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "                              \"title\": \"Constraint Definition\","]
#[doc = "                              \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "                              \"type\": \"object\","]
#[doc = "                              \"properties\": {"]
#[doc = "                                \"enum\": {"]
#[doc = "                                  \"type\": \"array\","]
#[doc = "                                  \"items\": {"]
#[doc = "                                    \"type\": \"string\""]
#[doc = "                                  }"]
#[doc = "                                },"]
#[doc = "                                \"maxLength\": {"]
#[doc = "                                  \"type\": \"integer\""]
#[doc = "                                },"]
#[doc = "                                \"maximum\": {"]
#[doc = "                                  \"type\": \"number\""]
#[doc = "                                },"]
#[doc = "                                \"minLength\": {"]
#[doc = "                                  \"type\": \"integer\""]
#[doc = "                                },"]
#[doc = "                                \"minimum\": {"]
#[doc = "                                  \"type\": \"number\""]
#[doc = "                                },"]
#[doc = "                                \"pattern\": {"]
#[doc = "                                  \"type\": \"string\""]
#[doc = "                                }"]
#[doc = "                              },"]
#[doc = "                              \"additionalProperties\": false"]
#[doc = "                            },"]
#[doc = "                            \"default_value\": {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "                              \"title\": \"Any Value\","]
#[doc = "                              \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "                              \"type\": ["]
#[doc = "                                \"string\","]
#[doc = "                                \"number\","]
#[doc = "                                \"integer\","]
#[doc = "                                \"boolean\","]
#[doc = "                                \"object\","]
#[doc = "                                \"array\","]
#[doc = "                                \"null\""]
#[doc = "                              ]"]
#[doc = "                            },"]
#[doc = "                            \"description\": {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "                              \"title\": \"Description Field\","]
#[doc = "                              \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "                              \"default\": \"\","]
#[doc = "                              \"type\": \"string\""]
#[doc = "                            },"]
#[doc = "                            \"type\": {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "                              \"title\": \"Base Type System\","]
#[doc = "                              \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "                              \"oneOf\": ["]
#[doc = "                                {"]
#[doc = "                                  \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "                                  \"type\": \"string\","]
#[doc = "                                  \"enum\": ["]
#[doc = "                                    \"string\","]
#[doc = "                                    \"boolean\","]
#[doc = "                                    \"integer\","]
#[doc = "                                    \"number\","]
#[doc = "                                    \"f32\","]
#[doc = "                                    \"f64\","]
#[doc = "                                    \"i32\","]
#[doc = "                                    \"i64\","]
#[doc = "                                    \"u32\","]
#[doc = "                                    \"u64\","]
#[doc = "                                    \"uuid\","]
#[doc = "                                    \"date-time\","]
#[doc = "                                    \"duration\","]
#[doc = "                                    \"object\","]
#[doc = "                                    \"array\""]
#[doc = "                                  ]"]
#[doc = "                                },"]
#[doc = "                                {"]
#[doc = "                                  \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "                                  \"type\": \"object\","]
#[doc = "                                  \"required\": ["]
#[doc = "                                    \"$ref\""]
#[doc = "                                  ],"]
#[doc = "                                  \"properties\": {"]
#[doc = "                                    \"$ref\": {"]
#[doc = "                                      \"type\": \"string\""]
#[doc = "                                    }"]
#[doc = "                                  },"]
#[doc = "                                  \"additionalProperties\": false"]
#[doc = "                                }"]
#[doc = "                              ],"]
#[doc = "                              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                            },"]
#[doc = "                            \"ui_label\": {"]
#[doc = "                              \"type\": \"string\""]
#[doc = "                            }"]
#[doc = "                          },"]
#[doc = "                          \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                        }"]
#[doc = "                      ]"]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"additionalProperties\": false"]
#[doc = "                },"]
#[doc = "                \"physics_properties\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/base/PhysicsProperties.v1.schema.json\","]
#[doc = "                  \"title\": \"Base Physics Properties\","]
#[doc = "                  \"description\": \"Defines the common physics-related properties for components and laws.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"engine\","]
#[doc = "                    \"is_quantum\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"collapse_sensitive\": {"]
#[doc = "                      \"description\": \"Indicates if the object is affected by or triggers quantum collapse.\","]
#[doc = "                      \"type\": \"boolean\""]
#[doc = "                    },"]
#[doc = "                    \"engine\": {"]
#[doc = "                      \"description\": \"The physics engine responsible for this object.\","]
#[doc = "                      \"enum\": ["]
#[doc = "                        \"quantum\","]
#[doc = "                        \"classical\","]
#[doc = "                        \"hybrid\""]
#[doc = "                      ]"]
#[doc = "                    },"]
#[doc = "                    \"is_quantum\": {"]
#[doc = "                      \"description\": \"Indicates if the object has quantum properties.\","]
#[doc = "                      \"type\": \"boolean\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "              \"physics_properties\": {"]
#[doc = "                \"engine\": \"quantum\","]
#[doc = "                \"is_quantum\": true"]
#[doc = "              },"]
#[doc = "              \"schema_version\": \"1.4.0\""]
#[doc = "            },"]
#[doc = "            \"gdpr\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/components/GDPRDependency.v1.schema.json\","]
#[doc = "              \"title\": \"GDPR Dependency Component\","]
#[doc = "              \"description\": \"Tracks data provenance to enable compliant cascading deletions for GDPR's Right to Erasure.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"fields\","]
#[doc = "                \"physics_properties\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"fields\": {"]
#[doc = "                  \"title\": \"BaseFields\","]
#[doc = "                  \"description\": \"A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"patternProperties\": {"]
#[doc = "                    \"^[a-z_][a-z0-9_]*$\": {"]
#[doc = "                      \"oneOf\": ["]
#[doc = "                        {"]
#[doc = "                          \"description\": \"A direct reference to a shared definition in SharedDefinitions.schema.json.\","]
#[doc = "                          \"type\": \"object\","]
#[doc = "                          \"required\": ["]
#[doc = "                            \"$ref\""]
#[doc = "                          ],"]
#[doc = "                          \"properties\": {"]
#[doc = "                            \"$ref\": {"]
#[doc = "                              \"type\": \"string\""]
#[doc = "                            }"]
#[doc = "                          },"]
#[doc = "                          \"additionalProperties\": false"]
#[doc = "                        },"]
#[doc = "                        {"]
#[doc = "                          \"$id\": \"https://familiar.dev/schemas/base/Field.v1.schema.json\","]
#[doc = "                          \"title\": \"Base Field\","]
#[doc = "                          \"description\": \"Defines the structure for a single, inline field definition within a component.\","]
#[doc = "                          \"type\": \"object\","]
#[doc = "                          \"required\": ["]
#[doc = "                            \"description\","]
#[doc = "                            \"type\""]
#[doc = "                          ],"]
#[doc = "                          \"properties\": {"]
#[doc = "                            \"constraints\": {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "                              \"title\": \"Constraint Definition\","]
#[doc = "                              \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "                              \"type\": \"object\","]
#[doc = "                              \"properties\": {"]
#[doc = "                                \"enum\": {"]
#[doc = "                                  \"type\": \"array\","]
#[doc = "                                  \"items\": {"]
#[doc = "                                    \"type\": \"string\""]
#[doc = "                                  }"]
#[doc = "                                },"]
#[doc = "                                \"maxLength\": {"]
#[doc = "                                  \"type\": \"integer\""]
#[doc = "                                },"]
#[doc = "                                \"maximum\": {"]
#[doc = "                                  \"type\": \"number\""]
#[doc = "                                },"]
#[doc = "                                \"minLength\": {"]
#[doc = "                                  \"type\": \"integer\""]
#[doc = "                                },"]
#[doc = "                                \"minimum\": {"]
#[doc = "                                  \"type\": \"number\""]
#[doc = "                                },"]
#[doc = "                                \"pattern\": {"]
#[doc = "                                  \"type\": \"string\""]
#[doc = "                                }"]
#[doc = "                              },"]
#[doc = "                              \"additionalProperties\": false"]
#[doc = "                            },"]
#[doc = "                            \"default_value\": {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "                              \"title\": \"Any Value\","]
#[doc = "                              \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "                              \"type\": ["]
#[doc = "                                \"string\","]
#[doc = "                                \"number\","]
#[doc = "                                \"integer\","]
#[doc = "                                \"boolean\","]
#[doc = "                                \"object\","]
#[doc = "                                \"array\","]
#[doc = "                                \"null\""]
#[doc = "                              ]"]
#[doc = "                            },"]
#[doc = "                            \"description\": {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "                              \"title\": \"Description Field\","]
#[doc = "                              \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "                              \"default\": \"\","]
#[doc = "                              \"type\": \"string\""]
#[doc = "                            },"]
#[doc = "                            \"type\": {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "                              \"title\": \"Base Type System\","]
#[doc = "                              \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "                              \"oneOf\": ["]
#[doc = "                                {"]
#[doc = "                                  \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "                                  \"type\": \"string\","]
#[doc = "                                  \"enum\": ["]
#[doc = "                                    \"string\","]
#[doc = "                                    \"boolean\","]
#[doc = "                                    \"integer\","]
#[doc = "                                    \"number\","]
#[doc = "                                    \"f32\","]
#[doc = "                                    \"f64\","]
#[doc = "                                    \"i32\","]
#[doc = "                                    \"i64\","]
#[doc = "                                    \"u32\","]
#[doc = "                                    \"u64\","]
#[doc = "                                    \"uuid\","]
#[doc = "                                    \"date-time\","]
#[doc = "                                    \"duration\","]
#[doc = "                                    \"object\","]
#[doc = "                                    \"array\""]
#[doc = "                                  ]"]
#[doc = "                                },"]
#[doc = "                                {"]
#[doc = "                                  \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "                                  \"type\": \"object\","]
#[doc = "                                  \"required\": ["]
#[doc = "                                    \"$ref\""]
#[doc = "                                  ],"]
#[doc = "                                  \"properties\": {"]
#[doc = "                                    \"$ref\": {"]
#[doc = "                                      \"type\": \"string\""]
#[doc = "                                    }"]
#[doc = "                                  },"]
#[doc = "                                  \"additionalProperties\": false"]
#[doc = "                                }"]
#[doc = "                              ],"]
#[doc = "                              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                            },"]
#[doc = "                            \"ui_label\": {"]
#[doc = "                              \"type\": \"string\""]
#[doc = "                            }"]
#[doc = "                          },"]
#[doc = "                          \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                        }"]
#[doc = "                      ]"]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"additionalProperties\": false"]
#[doc = "                },"]
#[doc = "                \"physics_properties\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/base/PhysicsProperties.v1.schema.json\","]
#[doc = "                  \"title\": \"Base Physics Properties\","]
#[doc = "                  \"description\": \"Defines the common physics-related properties for components and laws.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"engine\","]
#[doc = "                    \"is_quantum\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"collapse_sensitive\": {"]
#[doc = "                      \"description\": \"Indicates if the object is affected by or triggers quantum collapse.\","]
#[doc = "                      \"type\": \"boolean\""]
#[doc = "                    },"]
#[doc = "                    \"engine\": {"]
#[doc = "                      \"description\": \"The physics engine responsible for this object.\","]
#[doc = "                      \"enum\": ["]
#[doc = "                        \"quantum\","]
#[doc = "                        \"classical\","]
#[doc = "                        \"hybrid\""]
#[doc = "                      ]"]
#[doc = "                    },"]
#[doc = "                    \"is_quantum\": {"]
#[doc = "                      \"description\": \"Indicates if the object has quantum properties.\","]
#[doc = "                      \"type\": \"boolean\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "              \"fields\": {"]
#[doc = "                \"contributing_users\": {"]
#[doc = "                  \"description\": \"A set of User IDs whose data contributed to this entity's existence or state.\","]
#[doc = "                  \"items\": {"]
#[doc = "                    \"type\": \"uuid\""]
#[doc = "                  },"]
#[doc = "                  \"type\": \"array\","]
#[doc = "                  \"uniqueItems\": true"]
#[doc = "                },"]
#[doc = "                \"upstream_dependencies\": {"]
#[doc = "                  \"description\": \"A list of source entity IDs (e.g., Moments) that this entity (e.g., a Motif) depends on.\","]
#[doc = "                  \"items\": {"]
#[doc = "                    \"type\": \"uuid\""]
#[doc = "                  },"]
#[doc = "                  \"type\": \"array\""]
#[doc = "                },"]
#[doc = "                \"user_evidence_weights\": {"]
#[doc = "                  \"additionalProperties\": {"]
#[doc = "                    \"maximum\": 1.0,"]
#[doc = "                    \"minimum\": 0.0,"]
#[doc = "                    \"type\": \"number\""]
#[doc = "                  },"]
#[doc = "                  \"type\": \"object\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"physics_properties\": {"]
#[doc = "                \"engine\": \"classical\","]
#[doc = "                \"is_quantum\": false"]
#[doc = "              },"]
#[doc = "              \"schema_version\": \"1.0.0\""]
#[doc = "            }"]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"entity_type\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/types/classification/EntityType.v1.json\","]
#[doc = "          \"title\": \"Entity Type\","]
#[doc = "          \"description\": \"A canonical enum of all 7 cognitive entity types.\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"enum\": ["]
#[doc = "            \"Focus\","]
#[doc = "            \"Filament\","]
#[doc = "            \"Motif\","]
#[doc = "            \"Intent\","]
#[doc = "            \"Moment\","]
#[doc = "            \"Bond\","]
#[doc = "            \"Thread\""]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        \"physics_state\": {"]
#[doc = "          \"title\": \"MotifPhysicsState\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"required\": ["]
#[doc = "            \"quantum\","]
#[doc = "            \"universal\""]
#[doc = "          ],"]
#[doc = "          \"properties\": {"]
#[doc = "            \"quantum\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/components/QuantumState.v1.schema.json\","]
#[doc = "              \"title\": \"Quantum State Component\","]
#[doc = "              \"description\": \"Manages the quantum properties of an entity, including its superposition and entanglement.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"fields\","]
#[doc = "                \"physics_properties\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"fields\": {"]
#[doc = "                  \"title\": \"BaseFields\","]
#[doc = "                  \"description\": \"A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"patternProperties\": {"]
#[doc = "                    \"^[a-z_][a-z0-9_]*$\": {"]
#[doc = "                      \"oneOf\": ["]
#[doc = "                        {"]
#[doc = "                          \"description\": \"A direct reference to a shared definition in SharedDefinitions.schema.json.\","]
#[doc = "                          \"type\": \"object\","]
#[doc = "                          \"required\": ["]
#[doc = "                            \"$ref\""]
#[doc = "                          ],"]
#[doc = "                          \"properties\": {"]
#[doc = "                            \"$ref\": {"]
#[doc = "                              \"type\": \"string\""]
#[doc = "                            }"]
#[doc = "                          },"]
#[doc = "                          \"additionalProperties\": false"]
#[doc = "                        },"]
#[doc = "                        {"]
#[doc = "                          \"$id\": \"https://familiar.dev/schemas/base/Field.v1.schema.json\","]
#[doc = "                          \"title\": \"Base Field\","]
#[doc = "                          \"description\": \"Defines the structure for a single, inline field definition within a component.\","]
#[doc = "                          \"type\": \"object\","]
#[doc = "                          \"required\": ["]
#[doc = "                            \"description\","]
#[doc = "                            \"type\""]
#[doc = "                          ],"]
#[doc = "                          \"properties\": {"]
#[doc = "                            \"constraints\": {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "                              \"title\": \"Constraint Definition\","]
#[doc = "                              \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "                              \"type\": \"object\","]
#[doc = "                              \"properties\": {"]
#[doc = "                                \"enum\": {"]
#[doc = "                                  \"type\": \"array\","]
#[doc = "                                  \"items\": {"]
#[doc = "                                    \"type\": \"string\""]
#[doc = "                                  }"]
#[doc = "                                },"]
#[doc = "                                \"maxLength\": {"]
#[doc = "                                  \"type\": \"integer\""]
#[doc = "                                },"]
#[doc = "                                \"maximum\": {"]
#[doc = "                                  \"type\": \"number\""]
#[doc = "                                },"]
#[doc = "                                \"minLength\": {"]
#[doc = "                                  \"type\": \"integer\""]
#[doc = "                                },"]
#[doc = "                                \"minimum\": {"]
#[doc = "                                  \"type\": \"number\""]
#[doc = "                                },"]
#[doc = "                                \"pattern\": {"]
#[doc = "                                  \"type\": \"string\""]
#[doc = "                                }"]
#[doc = "                              },"]
#[doc = "                              \"additionalProperties\": false"]
#[doc = "                            },"]
#[doc = "                            \"default_value\": {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "                              \"title\": \"Any Value\","]
#[doc = "                              \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "                              \"type\": ["]
#[doc = "                                \"string\","]
#[doc = "                                \"number\","]
#[doc = "                                \"integer\","]
#[doc = "                                \"boolean\","]
#[doc = "                                \"object\","]
#[doc = "                                \"array\","]
#[doc = "                                \"null\""]
#[doc = "                              ]"]
#[doc = "                            },"]
#[doc = "                            \"description\": {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "                              \"title\": \"Description Field\","]
#[doc = "                              \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "                              \"default\": \"\","]
#[doc = "                              \"type\": \"string\""]
#[doc = "                            },"]
#[doc = "                            \"type\": {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "                              \"title\": \"Base Type System\","]
#[doc = "                              \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "                              \"oneOf\": ["]
#[doc = "                                {"]
#[doc = "                                  \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "                                  \"type\": \"string\","]
#[doc = "                                  \"enum\": ["]
#[doc = "                                    \"string\","]
#[doc = "                                    \"boolean\","]
#[doc = "                                    \"integer\","]
#[doc = "                                    \"number\","]
#[doc = "                                    \"f32\","]
#[doc = "                                    \"f64\","]
#[doc = "                                    \"i32\","]
#[doc = "                                    \"i64\","]
#[doc = "                                    \"u32\","]
#[doc = "                                    \"u64\","]
#[doc = "                                    \"uuid\","]
#[doc = "                                    \"date-time\","]
#[doc = "                                    \"duration\","]
#[doc = "                                    \"object\","]
#[doc = "                                    \"array\""]
#[doc = "                                  ]"]
#[doc = "                                },"]
#[doc = "                                {"]
#[doc = "                                  \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "                                  \"type\": \"object\","]
#[doc = "                                  \"required\": ["]
#[doc = "                                    \"$ref\""]
#[doc = "                                  ],"]
#[doc = "                                  \"properties\": {"]
#[doc = "                                    \"$ref\": {"]
#[doc = "                                      \"type\": \"string\""]
#[doc = "                                    }"]
#[doc = "                                  },"]
#[doc = "                                  \"additionalProperties\": false"]
#[doc = "                                }"]
#[doc = "                              ],"]
#[doc = "                              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                            },"]
#[doc = "                            \"ui_label\": {"]
#[doc = "                              \"type\": \"string\""]
#[doc = "                            }"]
#[doc = "                          },"]
#[doc = "                          \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                        }"]
#[doc = "                      ]"]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"additionalProperties\": false"]
#[doc = "                },"]
#[doc = "                \"physics_properties\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/base/PhysicsProperties.v1.schema.json\","]
#[doc = "                  \"title\": \"Base Physics Properties\","]
#[doc = "                  \"description\": \"Defines the common physics-related properties for components and laws.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"engine\","]
#[doc = "                    \"is_quantum\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"collapse_sensitive\": {"]
#[doc = "                      \"description\": \"Indicates if the object is affected by or triggers quantum collapse.\","]
#[doc = "                      \"type\": \"boolean\""]
#[doc = "                    },"]
#[doc = "                    \"engine\": {"]
#[doc = "                      \"description\": \"The physics engine responsible for this object.\","]
#[doc = "                      \"enum\": ["]
#[doc = "                        \"quantum\","]
#[doc = "                        \"classical\","]
#[doc = "                        \"hybrid\""]
#[doc = "                      ]"]
#[doc = "                    },"]
#[doc = "                    \"is_quantum\": {"]
#[doc = "                      \"description\": \"Indicates if the object has quantum properties.\","]
#[doc = "                      \"type\": \"boolean\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "              \"fields\": {"]
#[doc = "                \"coherence_score\": {"]
#[doc = "                  \"description\": \"The purity of the quantum state (0.0 = maximally mixed, 1.0 = pure).\","]
#[doc = "                  \"maximum\": 1.0,"]
#[doc = "                  \"minimum\": 0.0,"]
#[doc = "                  \"type\": \"number\""]
#[doc = "                },"]
#[doc = "                \"density_matrix\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/types/physics/DensityMatrix.v1.json\","]
#[doc = "                  \"description\": \"A 2x2 matrix of complex numbers representing a quantum state.\","]
#[doc = "                  \"items\": {"]
#[doc = "                    \"items\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/types/physics/ComplexNumber.v1.json\","]
#[doc = "                      \"description\": \"Represents a complex number with real and imaginary parts.\","]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"imaginary\": {"]
#[doc = "                          \"type\": \"number\""]
#[doc = "                        },"]
#[doc = "                        \"real\": {"]
#[doc = "                          \"type\": \"number\""]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"required\": ["]
#[doc = "                        \"real\","]
#[doc = "                        \"imaginary\""]
#[doc = "                      ],"]
#[doc = "                      \"title\": \"Complex Number\","]
#[doc = "                      \"type\": \"object\""]
#[doc = "                    },"]
#[doc = "                    \"maxItems\": 2,"]
#[doc = "                    \"minItems\": 2,"]
#[doc = "                    \"type\": \"array\""]
#[doc = "                  },"]
#[doc = "                  \"maxItems\": 2,"]
#[doc = "                  \"minItems\": 2,"]
#[doc = "                  \"title\": \"Density Matrix\","]
#[doc = "                  \"type\": \"array\""]
#[doc = "                },"]
#[doc = "                \"entanglement_network\": {"]
#[doc = "                  \"additionalProperties\": {"]
#[doc = "                    \"maximum\": 1.0,"]
#[doc = "                    \"minimum\": 0.0,"]
#[doc = "                    \"type\": \"number\""]
#[doc = "                  },"]
#[doc = "                  \"type\": \"object\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"physics_properties\": {"]
#[doc = "                \"engine\": \"quantum\","]
#[doc = "                \"is_quantum\": true"]
#[doc = "              },"]
#[doc = "              \"schema_version\": \"1.0.0\""]
#[doc = "            },"]
#[doc = "            \"universal\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/components/UniversalPhysicsState.v1.schema.json\","]
#[doc = "              \"title\": \"Universal Physics State Component\","]
#[doc = "              \"description\": \"The transient, mutable physics state of an entity.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"properties\": {"]
#[doc = "                \"fields\": {"]
#[doc = "                  \"title\": \"UniversalPhysicsStateFields\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"cognitive_perspective\","]
#[doc = "                    \"consolidation_rate\","]
#[doc = "                    \"decay_rate\","]
#[doc = "                    \"energy\","]
#[doc = "                    \"entanglement_strength\","]
#[doc = "                    \"momentum\","]
#[doc = "                    \"quantum_coherence\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"cognitive_perspective\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/fields/CognitivePerspective.v1.schema.json\","]
#[doc = "                      \"title\": \"Cognitive Perspective Field\","]
#[doc = "                      \"description\": \"The intrinsic 'spin' or 'flavor' of the entity, which generates cognitive dissonance (torsion).\","]
#[doc = "                      \"ui_label\": \"Cognitive Perspective\""]
#[doc = "                    },"]
#[doc = "                    \"consolidation_rate\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/snippets/fields/ConsolidationRate.v1.json\","]
#[doc = "                      \"title\": \"Consolidation Rate Field\","]
#[doc = "                      \"description\": \"The base rate of memory consolidation for an entity, before multipliers are applied. Represents how quickly an unstable memory becomes stable.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"required\": ["]
#[doc = "                        \"value\""]
#[doc = "                      ],"]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"value\": {"]
#[doc = "                          \"default\": 0.0,"]
#[doc = "                          \"type\": \"number\","]
#[doc = "                          \"format\": \"double\","]
#[doc = "                          \"maximum\": 1.0,"]
#[doc = "                          \"minimum\": 0.0,"]
#[doc = "                          \"x-python-type\": \"float\","]
#[doc = "                          \"x-rust-type\": \"f64\""]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"additionalProperties\": false"]
#[doc = "                    },"]
#[doc = "                    \"decay_rate\": {"]
#[doc = "                      \"description\": \"The base rate of energy or coherence decay for an entity, before multipliers are applied.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"required\": ["]
#[doc = "                        \"value\""]
#[doc = "                      ],"]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"value\": {"]
#[doc = "                          \"default\": 0.01,"]
#[doc = "                          \"type\": \"number\","]
#[doc = "                          \"format\": \"double\","]
#[doc = "                          \"x-python-type\": \"float\","]
#[doc = "                          \"x-rust-type\": \"f64\""]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"additionalProperties\": false"]
#[doc = "                    },"]
#[doc = "                    \"energy\": {"]
#[doc = "                      \"description\": \"The current energy level of an entity.\","]
#[doc = "                      \"default\": 0.1,"]
#[doc = "                      \"type\": \"number\""]
#[doc = "                    },"]
#[doc = "                    \"entanglement_strength\": {"]
#[doc = "                      \"description\": \"The overall entanglement strength of this entity with others. Null for classical entities.\","]
#[doc = "                      \"default\": null,"]
#[doc = "                      \"type\": ["]
#[doc = "                        \"number\","]
#[doc = "                        \"null\""]
#[doc = "                      ],"]
#[doc = "                      \"maximum\": 1.0,"]
#[doc = "                      \"minimum\": 0.0"]
#[doc = "                    },"]
#[doc = "                    \"momentum\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/types/physics/Vec6.v1.json\","]
#[doc = "                      \"title\": \"6D Physics Vector\","]
#[doc = "                      \"description\": \"A reusable data type for a vector of six f64 numbers, used for momentum and forces in the 6 spatial dimensions of the manifold.\","]
#[doc = "                      \"type\": \"array\","]
#[doc = "                      \"items\": {"]
#[doc = "                        \"type\": \"number\""]
#[doc = "                      },"]
#[doc = "                      \"maxItems\": 6,"]
#[doc = "                      \"minItems\": 6"]
#[doc = "                    },"]
#[doc = "                    \"quantum_coherence\": {"]
#[doc = "                      \"description\": \"The quantum coherence level of the entity, representing its degree of superposition. Null for classical entities.\","]
#[doc = "                      \"default\": null,"]
#[doc = "                      \"type\": ["]
#[doc = "                        \"number\","]
#[doc = "                        \"null\""]
#[doc = "                      ],"]
#[doc = "                      \"maximum\": 1.0,"]
#[doc = "                      \"minimum\": 0.0"]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"additionalProperties\": false"]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "              \"schema_version\": \"3.0.0\""]
#[doc = "            }"]
#[doc = "          }"]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/entities/Filament.v1.schema.json\","]
#[doc = "      \"title\": \"Filament Entity\","]
#[doc = "      \"description\": \"A quantum entity representing a high-level, emergent narrative, belief, or worldview, derived from the analysis of Threads and Bonds.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"components\","]
#[doc = "        \"entity_type\","]
#[doc = "        \"physics_state\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"components\": {"]
#[doc = "          \"title\": \"FilamentComponents\","]
#[doc = "          \"description\": \"Component references temporarily disabled for pipeline testing\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"required\": ["]
#[doc = "            \"consolidation\","]
#[doc = "            \"content\","]
#[doc = "            \"gdpr\""]
#[doc = "          ],"]
#[doc = "          \"properties\": {"]
#[doc = "            \"_comment\": {"]
#[doc = "              \"description\": \"TODO: Re-enable component references when component schemas are available\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"consolidation\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/components/ConsolidationState.v1.schema.json\","]
#[doc = "              \"title\": \"Consolidation State Component\","]
#[doc = "              \"description\": \"Tracks the temporal consolidation state of a Motif or Filament.\","]
#[doc = "              \"properties\": {"]
#[doc = "                \"fields\": {"]
#[doc = "                  \"title\": \"ConsolidationStateFields\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"consolidation_level\","]
#[doc = "                    \"last_consolidated_at\","]
#[doc = "                    \"next_consolidation_due\","]
#[doc = "                    \"source_entity_count\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"consolidation_level\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/types/system/ConsolidationLevel.v1.json\","]
#[doc = "                      \"title\": \"Consolidation Level\","]
#[doc = "                      \"description\": \"A canonical enum for the temporal consolidation level of a Motif or Filament.\","]
#[doc = "                      \"type\": \"string\","]
#[doc = "                      \"enum\": ["]
#[doc = "                        \"Daily\","]
#[doc = "                        \"Weekly\","]
#[doc = "                        \"Monthly\","]
#[doc = "                        \"Yearly\","]
#[doc = "                        \"Archived\""]
#[doc = "                      ]"]
#[doc = "                    },"]
#[doc = "                    \"last_consolidated_at\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/types/primitives/NullableTimestamp.v1.json\","]
#[doc = "                      \"title\": \"Nullable Timestamp\","]
#[doc = "                      \"description\": \"A canonical definition for an optional ISO 8601 timestamp with timezone.\","]
#[doc = "                      \"type\": ["]
#[doc = "                        \"string\","]
#[doc = "                        \"null\""]
#[doc = "                      ]"]
#[doc = "                    },"]
#[doc = "                    \"next_consolidation_due\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/types/primitives/NullableTimestamp.v1.json\","]
#[doc = "                      \"title\": \"Nullable Timestamp\","]
#[doc = "                      \"description\": \"A canonical definition for an optional ISO 8601 timestamp with timezone.\","]
#[doc = "                      \"type\": ["]
#[doc = "                        \"string\","]
#[doc = "                        \"null\""]
#[doc = "                      ]"]
#[doc = "                    },"]
#[doc = "                    \"source_entity_count\": {"]
#[doc = "                      \"type\": \"integer\","]
#[doc = "                      \"minimum\": 1.0"]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"additionalProperties\": false"]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "              \"physics_properties\": {"]
#[doc = "                \"engine\": \"classical\","]
#[doc = "                \"is_quantum\": false"]
#[doc = "              },"]
#[doc = "              \"schema_version\": \"1.2.0\""]
#[doc = "            },"]
#[doc = "            \"content\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/components/FilamentContent.v1.schema.json\","]
#[doc = "              \"title\": \"Filament Content Component\","]
#[doc = "              \"description\": \"Defines the high-level narrative or belief content of a Filament entity. This is a quantum component.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"fields\","]
#[doc = "                \"physics_properties\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"fields\": {"]
#[doc = "                  \"title\": \"FilamentContentFields\","]
#[doc = "                  \"description\": \"A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"abstraction_level\","]
#[doc = "                    \"filament_type\","]
#[doc = "                    \"narrative_description\","]
#[doc = "                    \"source_threads_and_bonds\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"abstraction_level\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/types/physics/AbstractionLevel.v1.json\","]
#[doc = "                      \"title\": \"Abstraction Level\","]
#[doc = "                      \"description\": \"A canonical enum for the level of abstraction of a cognitive entity.\","]
#[doc = "                      \"type\": \"string\","]
#[doc = "                      \"enum\": ["]
#[doc = "                        \"Low\","]
#[doc = "                        \"Medium\","]
#[doc = "                        \"High\""]
#[doc = "                      ]"]
#[doc = "                    },"]
#[doc = "                    \"filament_type\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/types/physics/FilamentType.v1.json\","]
#[doc = "                      \"title\": \"Filament Type\","]
#[doc = "                      \"description\": \"A canonical enum of the types of high-level narratives a Filament can represent.\","]
#[doc = "                      \"type\": \"string\","]
#[doc = "                      \"enum\": ["]
#[doc = "                        \"PersonalityTrait\","]
#[doc = "                        \"Worldview\","]
#[doc = "                        \"Relationship_Pattern\","]
#[doc = "                        \"Life_Theme\""]
#[doc = "                      ]"]
#[doc = "                    },"]
#[doc = "                    \"narrative_description\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "                      \"title\": \"Description Field\","]
#[doc = "                      \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "                      \"default\": \"\","]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    },"]
#[doc = "                    \"source_threads_and_bonds\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/fields/SourceThreadsAndBonds.v1.json\","]
#[doc = "                      \"title\": \"Source Threads and Bonds Field\","]
#[doc = "                      \"description\": \"A list of Thread and Bond entity IDs that are the source for a derived cognitive entity like a Filament.\","]
#[doc = "                      \"type\": \"array\","]
#[doc = "                      \"items\": {"]
#[doc = "                        \"$id\": \"https://familiar.dev/schemas/fields/EntityId.v1.json\","]
#[doc = "                        \"title\": \"Entity ID Field\","]
#[doc = "                        \"description\": \"A reusable definition for a unique entity identifier.\","]
#[doc = "                        \"type\": \"string\""]
#[doc = "                      }"]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"patternProperties\": {"]
#[doc = "                    \"^[a-z_][a-z0-9_]*$\": {"]
#[doc = "                      \"oneOf\": ["]
#[doc = "                        {"]
#[doc = "                          \"description\": \"A direct reference to a shared definition in SharedDefinitions.schema.json.\","]
#[doc = "                          \"type\": \"object\","]
#[doc = "                          \"required\": ["]
#[doc = "                            \"$ref\""]
#[doc = "                          ],"]
#[doc = "                          \"properties\": {"]
#[doc = "                            \"$ref\": {"]
#[doc = "                              \"type\": \"string\""]
#[doc = "                            }"]
#[doc = "                          },"]
#[doc = "                          \"additionalProperties\": false"]
#[doc = "                        },"]
#[doc = "                        {"]
#[doc = "                          \"$id\": \"https://familiar.dev/schemas/base/Field.v1.schema.json\","]
#[doc = "                          \"title\": \"Base Field\","]
#[doc = "                          \"description\": \"Defines the structure for a single, inline field definition within a component.\","]
#[doc = "                          \"type\": \"object\","]
#[doc = "                          \"required\": ["]
#[doc = "                            \"description\","]
#[doc = "                            \"type\""]
#[doc = "                          ],"]
#[doc = "                          \"properties\": {"]
#[doc = "                            \"constraints\": {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "                              \"title\": \"Constraint Definition\","]
#[doc = "                              \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "                              \"type\": \"object\","]
#[doc = "                              \"properties\": {"]
#[doc = "                                \"enum\": {"]
#[doc = "                                  \"type\": \"array\","]
#[doc = "                                  \"items\": {"]
#[doc = "                                    \"type\": \"string\""]
#[doc = "                                  }"]
#[doc = "                                },"]
#[doc = "                                \"maxLength\": {"]
#[doc = "                                  \"type\": \"integer\""]
#[doc = "                                },"]
#[doc = "                                \"maximum\": {"]
#[doc = "                                  \"type\": \"number\""]
#[doc = "                                },"]
#[doc = "                                \"minLength\": {"]
#[doc = "                                  \"type\": \"integer\""]
#[doc = "                                },"]
#[doc = "                                \"minimum\": {"]
#[doc = "                                  \"type\": \"number\""]
#[doc = "                                },"]
#[doc = "                                \"pattern\": {"]
#[doc = "                                  \"type\": \"string\""]
#[doc = "                                }"]
#[doc = "                              },"]
#[doc = "                              \"additionalProperties\": false"]
#[doc = "                            },"]
#[doc = "                            \"default_value\": {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "                              \"title\": \"Any Value\","]
#[doc = "                              \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "                              \"type\": ["]
#[doc = "                                \"string\","]
#[doc = "                                \"number\","]
#[doc = "                                \"integer\","]
#[doc = "                                \"boolean\","]
#[doc = "                                \"object\","]
#[doc = "                                \"array\","]
#[doc = "                                \"null\""]
#[doc = "                              ]"]
#[doc = "                            },"]
#[doc = "                            \"description\": {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "                              \"title\": \"Description Field\","]
#[doc = "                              \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "                              \"default\": \"\","]
#[doc = "                              \"type\": \"string\""]
#[doc = "                            },"]
#[doc = "                            \"type\": {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "                              \"title\": \"Base Type System\","]
#[doc = "                              \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "                              \"oneOf\": ["]
#[doc = "                                {"]
#[doc = "                                  \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "                                  \"type\": \"string\","]
#[doc = "                                  \"enum\": ["]
#[doc = "                                    \"string\","]
#[doc = "                                    \"boolean\","]
#[doc = "                                    \"integer\","]
#[doc = "                                    \"number\","]
#[doc = "                                    \"f32\","]
#[doc = "                                    \"f64\","]
#[doc = "                                    \"i32\","]
#[doc = "                                    \"i64\","]
#[doc = "                                    \"u32\","]
#[doc = "                                    \"u64\","]
#[doc = "                                    \"uuid\","]
#[doc = "                                    \"date-time\","]
#[doc = "                                    \"duration\","]
#[doc = "                                    \"object\","]
#[doc = "                                    \"array\""]
#[doc = "                                  ]"]
#[doc = "                                },"]
#[doc = "                                {"]
#[doc = "                                  \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "                                  \"type\": \"object\","]
#[doc = "                                  \"required\": ["]
#[doc = "                                    \"$ref\""]
#[doc = "                                  ],"]
#[doc = "                                  \"properties\": {"]
#[doc = "                                    \"$ref\": {"]
#[doc = "                                      \"type\": \"string\""]
#[doc = "                                    }"]
#[doc = "                                  },"]
#[doc = "                                  \"additionalProperties\": false"]
#[doc = "                                }"]
#[doc = "                              ],"]
#[doc = "                              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                            },"]
#[doc = "                            \"ui_label\": {"]
#[doc = "                              \"type\": \"string\""]
#[doc = "                            }"]
#[doc = "                          },"]
#[doc = "                          \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                        }"]
#[doc = "                      ]"]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"additionalProperties\": false"]
#[doc = "                },"]
#[doc = "                \"physics_properties\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/base/PhysicsProperties.v1.schema.json\","]
#[doc = "                  \"title\": \"Base Physics Properties\","]
#[doc = "                  \"description\": \"Defines the common physics-related properties for components and laws.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"engine\","]
#[doc = "                    \"is_quantum\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"collapse_sensitive\": {"]
#[doc = "                      \"description\": \"Indicates if the object is affected by or triggers quantum collapse.\","]
#[doc = "                      \"type\": \"boolean\""]
#[doc = "                    },"]
#[doc = "                    \"engine\": {"]
#[doc = "                      \"description\": \"The physics engine responsible for this object.\","]
#[doc = "                      \"enum\": ["]
#[doc = "                        \"quantum\","]
#[doc = "                        \"classical\","]
#[doc = "                        \"hybrid\""]
#[doc = "                      ]"]
#[doc = "                    },"]
#[doc = "                    \"is_quantum\": {"]
#[doc = "                      \"description\": \"Indicates if the object has quantum properties.\","]
#[doc = "                      \"type\": \"boolean\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "              \"physics_properties\": {"]
#[doc = "                \"engine\": \"quantum\","]
#[doc = "                \"is_quantum\": true"]
#[doc = "              },"]
#[doc = "              \"schema_version\": \"1.2.0\""]
#[doc = "            },"]
#[doc = "            \"gdpr\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/components/GDPRDependency.v1.schema.json\","]
#[doc = "              \"title\": \"GDPR Dependency Component\","]
#[doc = "              \"description\": \"Tracks data provenance to enable compliant cascading deletions for GDPR's Right to Erasure.\","]
#[doc = "              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "              \"fields\": {"]
#[doc = "                \"contributing_users\": {"]
#[doc = "                  \"description\": \"A set of User IDs whose data contributed to this entity's existence or state.\","]
#[doc = "                  \"items\": {"]
#[doc = "                    \"type\": \"uuid\""]
#[doc = "                  },"]
#[doc = "                  \"type\": \"array\","]
#[doc = "                  \"uniqueItems\": true"]
#[doc = "                },"]
#[doc = "                \"upstream_dependencies\": {"]
#[doc = "                  \"description\": \"A list of source entity IDs (e.g., Moments) that this entity (e.g., a Motif) depends on.\","]
#[doc = "                  \"items\": {"]
#[doc = "                    \"type\": \"uuid\""]
#[doc = "                  },"]
#[doc = "                  \"type\": \"array\""]
#[doc = "                },"]
#[doc = "                \"user_evidence_weights\": {"]
#[doc = "                  \"additionalProperties\": {"]
#[doc = "                    \"maximum\": 1.0,"]
#[doc = "                    \"minimum\": 0.0,"]
#[doc = "                    \"type\": \"number\""]
#[doc = "                  },"]
#[doc = "                  \"type\": \"object\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"physics_properties\": {"]
#[doc = "                \"engine\": \"classical\","]
#[doc = "                \"is_quantum\": false"]
#[doc = "              },"]
#[doc = "              \"schema_version\": \"1.0.0\""]
#[doc = "            }"]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"entity_type\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/types/classification/EntityType.v1.json\","]
#[doc = "          \"title\": \"Entity Type\","]
#[doc = "          \"description\": \"A canonical enum of all 7 cognitive entity types.\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"enum\": ["]
#[doc = "            \"Focus\","]
#[doc = "            \"Filament\","]
#[doc = "            \"Motif\","]
#[doc = "            \"Intent\","]
#[doc = "            \"Moment\","]
#[doc = "            \"Bond\","]
#[doc = "            \"Thread\""]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        \"physics_state\": {"]
#[doc = "          \"title\": \"FilamentPhysicsState\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"required\": ["]
#[doc = "            \"quantum\","]
#[doc = "            \"universal\""]
#[doc = "          ],"]
#[doc = "          \"properties\": {"]
#[doc = "            \"quantum\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/components/QuantumState.v1.schema.json\","]
#[doc = "              \"title\": \"Quantum State Component\","]
#[doc = "              \"description\": \"Manages the quantum properties of an entity, including its superposition and entanglement.\","]
#[doc = "              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "              \"fields\": {"]
#[doc = "                \"coherence_score\": {"]
#[doc = "                  \"description\": \"The purity of the quantum state (0.0 = maximally mixed, 1.0 = pure).\","]
#[doc = "                  \"maximum\": 1.0,"]
#[doc = "                  \"minimum\": 0.0,"]
#[doc = "                  \"type\": \"number\""]
#[doc = "                },"]
#[doc = "                \"density_matrix\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/types/physics/DensityMatrix.v1.json\","]
#[doc = "                  \"description\": \"A 2x2 matrix of complex numbers representing a quantum state.\","]
#[doc = "                  \"items\": {"]
#[doc = "                    \"items\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/types/physics/ComplexNumber.v1.json\","]
#[doc = "                      \"description\": \"Represents a complex number with real and imaginary parts.\","]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"imaginary\": {"]
#[doc = "                          \"type\": \"number\""]
#[doc = "                        },"]
#[doc = "                        \"real\": {"]
#[doc = "                          \"type\": \"number\""]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"required\": ["]
#[doc = "                        \"real\","]
#[doc = "                        \"imaginary\""]
#[doc = "                      ],"]
#[doc = "                      \"title\": \"Complex Number\","]
#[doc = "                      \"type\": \"object\""]
#[doc = "                    },"]
#[doc = "                    \"maxItems\": 2,"]
#[doc = "                    \"minItems\": 2,"]
#[doc = "                    \"type\": \"array\""]
#[doc = "                  },"]
#[doc = "                  \"maxItems\": 2,"]
#[doc = "                  \"minItems\": 2,"]
#[doc = "                  \"title\": \"Density Matrix\","]
#[doc = "                  \"type\": \"array\""]
#[doc = "                },"]
#[doc = "                \"entanglement_network\": {"]
#[doc = "                  \"additionalProperties\": {"]
#[doc = "                    \"maximum\": 1.0,"]
#[doc = "                    \"minimum\": 0.0,"]
#[doc = "                    \"type\": \"number\""]
#[doc = "                  },"]
#[doc = "                  \"type\": \"object\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"physics_properties\": {"]
#[doc = "                \"engine\": \"quantum\","]
#[doc = "                \"is_quantum\": true"]
#[doc = "              },"]
#[doc = "              \"schema_version\": \"1.0.0\""]
#[doc = "            },"]
#[doc = "            \"universal\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/components/UniversalPhysicsState.v1.schema.json\","]
#[doc = "              \"title\": \"Universal Physics State Component\","]
#[doc = "              \"description\": \"The transient, mutable physics state of an entity.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"properties\": {"]
#[doc = "                \"fields\": {"]
#[doc = "                  \"title\": \"UniversalPhysicsStateFields\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"cognitive_perspective\","]
#[doc = "                    \"consolidation_rate\","]
#[doc = "                    \"decay_rate\","]
#[doc = "                    \"energy\","]
#[doc = "                    \"entanglement_strength\","]
#[doc = "                    \"momentum\","]
#[doc = "                    \"quantum_coherence\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"cognitive_perspective\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/fields/CognitivePerspective.v1.schema.json\","]
#[doc = "                      \"title\": \"Cognitive Perspective Field\","]
#[doc = "                      \"description\": \"The intrinsic 'spin' or 'flavor' of the entity, which generates cognitive dissonance (torsion).\","]
#[doc = "                      \"ui_label\": \"Cognitive Perspective\""]
#[doc = "                    },"]
#[doc = "                    \"consolidation_rate\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/snippets/fields/ConsolidationRate.v1.json\","]
#[doc = "                      \"title\": \"Consolidation Rate Field\","]
#[doc = "                      \"description\": \"The base rate of memory consolidation for an entity, before multipliers are applied. Represents how quickly an unstable memory becomes stable.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"required\": ["]
#[doc = "                        \"value\""]
#[doc = "                      ],"]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"value\": {"]
#[doc = "                          \"default\": 0.0,"]
#[doc = "                          \"type\": \"number\","]
#[doc = "                          \"format\": \"double\","]
#[doc = "                          \"maximum\": 1.0,"]
#[doc = "                          \"minimum\": 0.0,"]
#[doc = "                          \"x-python-type\": \"float\","]
#[doc = "                          \"x-rust-type\": \"f64\""]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"additionalProperties\": false"]
#[doc = "                    },"]
#[doc = "                    \"decay_rate\": {"]
#[doc = "                      \"description\": \"The base rate of energy or coherence decay for an entity, before multipliers are applied.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"required\": ["]
#[doc = "                        \"value\""]
#[doc = "                      ],"]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"value\": {"]
#[doc = "                          \"default\": 0.01,"]
#[doc = "                          \"type\": \"number\","]
#[doc = "                          \"format\": \"double\","]
#[doc = "                          \"x-python-type\": \"float\","]
#[doc = "                          \"x-rust-type\": \"f64\""]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"additionalProperties\": false"]
#[doc = "                    },"]
#[doc = "                    \"energy\": {"]
#[doc = "                      \"description\": \"The current energy level of an entity.\","]
#[doc = "                      \"default\": 0.1,"]
#[doc = "                      \"type\": \"number\""]
#[doc = "                    },"]
#[doc = "                    \"entanglement_strength\": {"]
#[doc = "                      \"description\": \"The overall entanglement strength of this entity with others. Null for classical entities.\","]
#[doc = "                      \"default\": null,"]
#[doc = "                      \"type\": ["]
#[doc = "                        \"number\","]
#[doc = "                        \"null\""]
#[doc = "                      ],"]
#[doc = "                      \"maximum\": 1.0,"]
#[doc = "                      \"minimum\": 0.0"]
#[doc = "                    },"]
#[doc = "                    \"momentum\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/types/physics/Vec6.v1.json\","]
#[doc = "                      \"title\": \"6D Physics Vector\","]
#[doc = "                      \"description\": \"A reusable data type for a vector of six f64 numbers, used for momentum and forces in the 6 spatial dimensions of the manifold.\","]
#[doc = "                      \"type\": \"array\","]
#[doc = "                      \"items\": {"]
#[doc = "                        \"type\": \"number\""]
#[doc = "                      },"]
#[doc = "                      \"maxItems\": 6,"]
#[doc = "                      \"minItems\": 6"]
#[doc = "                    },"]
#[doc = "                    \"quantum_coherence\": {"]
#[doc = "                      \"description\": \"The quantum coherence level of the entity, representing its degree of superposition. Null for classical entities.\","]
#[doc = "                      \"default\": null,"]
#[doc = "                      \"type\": ["]
#[doc = "                        \"number\","]
#[doc = "                        \"null\""]
#[doc = "                      ],"]
#[doc = "                      \"maximum\": 1.0,"]
#[doc = "                      \"minimum\": 0.0"]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"additionalProperties\": false"]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "              \"schema_version\": \"3.0.0\""]
#[doc = "            }"]
#[doc = "          }"]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/entities/Intent.v1.schema.json\","]
#[doc = "      \"title\": \"Intent Entity\","]
#[doc = "      \"description\": \"A classical entity representing a specific, user-declared future action or task.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"components\","]
#[doc = "        \"entity_type\","]
#[doc = "        \"physics_state\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"components\": {"]
#[doc = "          \"title\": \"IntentComponents\","]
#[doc = "          \"description\": \"Component references temporarily disabled for pipeline testing\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"required\": ["]
#[doc = "            \"content\","]
#[doc = "            \"status\""]
#[doc = "          ],"]
#[doc = "          \"properties\": {"]
#[doc = "            \"_comment\": {"]
#[doc = "              \"description\": \"TODO: Re-enable component references when component schemas are available\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"content\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/components/IntentContent.v1.schema.json\","]
#[doc = "              \"title\": \"Intent Content Component\","]
#[doc = "              \"description\": \"Defines the content of a specific task or intention.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"fields\","]
#[doc = "                \"physics_properties\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"fields\": {"]
#[doc = "                  \"title\": \"BaseFields\","]
#[doc = "                  \"description\": \"A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"patternProperties\": {"]
#[doc = "                    \"^[a-z_][a-z0-9_]*$\": {"]
#[doc = "                      \"oneOf\": ["]
#[doc = "                        {"]
#[doc = "                          \"description\": \"A direct reference to a shared definition in SharedDefinitions.schema.json.\","]
#[doc = "                          \"type\": \"object\","]
#[doc = "                          \"required\": ["]
#[doc = "                            \"$ref\""]
#[doc = "                          ],"]
#[doc = "                          \"properties\": {"]
#[doc = "                            \"$ref\": {"]
#[doc = "                              \"type\": \"string\""]
#[doc = "                            }"]
#[doc = "                          },"]
#[doc = "                          \"additionalProperties\": false"]
#[doc = "                        },"]
#[doc = "                        {"]
#[doc = "                          \"$id\": \"https://familiar.dev/schemas/base/Field.v1.schema.json\","]
#[doc = "                          \"title\": \"Base Field\","]
#[doc = "                          \"description\": \"Defines the structure for a single, inline field definition within a component.\","]
#[doc = "                          \"type\": \"object\","]
#[doc = "                          \"required\": ["]
#[doc = "                            \"description\","]
#[doc = "                            \"type\""]
#[doc = "                          ],"]
#[doc = "                          \"properties\": {"]
#[doc = "                            \"constraints\": {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "                              \"title\": \"Constraint Definition\","]
#[doc = "                              \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "                              \"type\": \"object\","]
#[doc = "                              \"properties\": {"]
#[doc = "                                \"enum\": {"]
#[doc = "                                  \"type\": \"array\","]
#[doc = "                                  \"items\": {"]
#[doc = "                                    \"type\": \"string\""]
#[doc = "                                  }"]
#[doc = "                                },"]
#[doc = "                                \"maxLength\": {"]
#[doc = "                                  \"type\": \"integer\""]
#[doc = "                                },"]
#[doc = "                                \"maximum\": {"]
#[doc = "                                  \"type\": \"number\""]
#[doc = "                                },"]
#[doc = "                                \"minLength\": {"]
#[doc = "                                  \"type\": \"integer\""]
#[doc = "                                },"]
#[doc = "                                \"minimum\": {"]
#[doc = "                                  \"type\": \"number\""]
#[doc = "                                },"]
#[doc = "                                \"pattern\": {"]
#[doc = "                                  \"type\": \"string\""]
#[doc = "                                }"]
#[doc = "                              },"]
#[doc = "                              \"additionalProperties\": false"]
#[doc = "                            },"]
#[doc = "                            \"default_value\": {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "                              \"title\": \"Any Value\","]
#[doc = "                              \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "                              \"type\": ["]
#[doc = "                                \"string\","]
#[doc = "                                \"number\","]
#[doc = "                                \"integer\","]
#[doc = "                                \"boolean\","]
#[doc = "                                \"object\","]
#[doc = "                                \"array\","]
#[doc = "                                \"null\""]
#[doc = "                              ]"]
#[doc = "                            },"]
#[doc = "                            \"description\": {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "                              \"title\": \"Description Field\","]
#[doc = "                              \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "                              \"default\": \"\","]
#[doc = "                              \"type\": \"string\""]
#[doc = "                            },"]
#[doc = "                            \"type\": {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "                              \"title\": \"Base Type System\","]
#[doc = "                              \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "                              \"oneOf\": ["]
#[doc = "                                {"]
#[doc = "                                  \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "                                  \"type\": \"string\","]
#[doc = "                                  \"enum\": ["]
#[doc = "                                    \"string\","]
#[doc = "                                    \"boolean\","]
#[doc = "                                    \"integer\","]
#[doc = "                                    \"number\","]
#[doc = "                                    \"f32\","]
#[doc = "                                    \"f64\","]
#[doc = "                                    \"i32\","]
#[doc = "                                    \"i64\","]
#[doc = "                                    \"u32\","]
#[doc = "                                    \"u64\","]
#[doc = "                                    \"uuid\","]
#[doc = "                                    \"date-time\","]
#[doc = "                                    \"duration\","]
#[doc = "                                    \"object\","]
#[doc = "                                    \"array\""]
#[doc = "                                  ]"]
#[doc = "                                },"]
#[doc = "                                {"]
#[doc = "                                  \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "                                  \"type\": \"object\","]
#[doc = "                                  \"required\": ["]
#[doc = "                                    \"$ref\""]
#[doc = "                                  ],"]
#[doc = "                                  \"properties\": {"]
#[doc = "                                    \"$ref\": {"]
#[doc = "                                      \"type\": \"string\""]
#[doc = "                                    }"]
#[doc = "                                  },"]
#[doc = "                                  \"additionalProperties\": false"]
#[doc = "                                }"]
#[doc = "                              ],"]
#[doc = "                              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                            },"]
#[doc = "                            \"ui_label\": {"]
#[doc = "                              \"type\": \"string\""]
#[doc = "                            }"]
#[doc = "                          },"]
#[doc = "                          \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                        }"]
#[doc = "                      ]"]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"additionalProperties\": false"]
#[doc = "                },"]
#[doc = "                \"physics_properties\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/base/PhysicsProperties.v1.schema.json\","]
#[doc = "                  \"title\": \"Base Physics Properties\","]
#[doc = "                  \"description\": \"Defines the common physics-related properties for components and laws.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"engine\","]
#[doc = "                    \"is_quantum\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"collapse_sensitive\": {"]
#[doc = "                      \"description\": \"Indicates if the object is affected by or triggers quantum collapse.\","]
#[doc = "                      \"type\": \"boolean\""]
#[doc = "                    },"]
#[doc = "                    \"engine\": {"]
#[doc = "                      \"description\": \"The physics engine responsible for this object.\","]
#[doc = "                      \"enum\": ["]
#[doc = "                        \"quantum\","]
#[doc = "                        \"classical\","]
#[doc = "                        \"hybrid\""]
#[doc = "                      ]"]
#[doc = "                    },"]
#[doc = "                    \"is_quantum\": {"]
#[doc = "                      \"description\": \"Indicates if the object has quantum properties.\","]
#[doc = "                      \"type\": \"boolean\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "              \"fields\": {"]
#[doc = "                \"description\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "                  \"default\": \"\","]
#[doc = "                  \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "                  \"title\": \"Description Field\","]
#[doc = "                  \"type\": \"string\""]
#[doc = "                },"]
#[doc = "                \"due_date\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/types/primitives/NullableTimestamp.v1.json\","]
#[doc = "                  \"description\": \"A canonical definition for an optional ISO 8601 timestamp with timezone.\","]
#[doc = "                  \"title\": \"Nullable Timestamp\","]
#[doc = "                  \"type\": ["]
#[doc = "                    \"string\","]
#[doc = "                    \"null\""]
#[doc = "                  ]"]
#[doc = "                },"]
#[doc = "                \"priority\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/fields/Priority.v1.json\","]
#[doc = "                  \"default\": \"Medium\","]
#[doc = "                  \"description\": \"The user-assigned priority level.\","]
#[doc = "                  \"enum\": ["]
#[doc = "                    \"Low\","]
#[doc = "                    \"Medium\","]
#[doc = "                    \"High\","]
#[doc = "                    \"Urgent\""]
#[doc = "                  ],"]
#[doc = "                  \"title\": \"Priority Field\","]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"physics_properties\": {"]
#[doc = "                \"engine\": \"classical\","]
#[doc = "                \"is_quantum\": false"]
#[doc = "              },"]
#[doc = "              \"schema_version\": \"1.1.0\""]
#[doc = "            },"]
#[doc = "            \"status\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/components/TaskStatus.v1.schema.json\","]
#[doc = "              \"title\": \"Task Status Component\","]
#[doc = "              \"description\": \"Tracks the completion status of an Intent.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"fields\","]
#[doc = "                \"physics_properties\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"fields\": {"]
#[doc = "                  \"title\": \"BaseFields\","]
#[doc = "                  \"description\": \"A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"patternProperties\": {"]
#[doc = "                    \"^[a-z_][a-z0-9_]*$\": {"]
#[doc = "                      \"oneOf\": ["]
#[doc = "                        {"]
#[doc = "                          \"description\": \"A direct reference to a shared definition in SharedDefinitions.schema.json.\","]
#[doc = "                          \"type\": \"object\","]
#[doc = "                          \"required\": ["]
#[doc = "                            \"$ref\""]
#[doc = "                          ],"]
#[doc = "                          \"properties\": {"]
#[doc = "                            \"$ref\": {"]
#[doc = "                              \"type\": \"string\""]
#[doc = "                            }"]
#[doc = "                          },"]
#[doc = "                          \"additionalProperties\": false"]
#[doc = "                        },"]
#[doc = "                        {"]
#[doc = "                          \"$id\": \"https://familiar.dev/schemas/base/Field.v1.schema.json\","]
#[doc = "                          \"title\": \"Base Field\","]
#[doc = "                          \"description\": \"Defines the structure for a single, inline field definition within a component.\","]
#[doc = "                          \"type\": \"object\","]
#[doc = "                          \"required\": ["]
#[doc = "                            \"description\","]
#[doc = "                            \"type\""]
#[doc = "                          ],"]
#[doc = "                          \"properties\": {"]
#[doc = "                            \"constraints\": {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "                              \"title\": \"Constraint Definition\","]
#[doc = "                              \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "                              \"type\": \"object\","]
#[doc = "                              \"properties\": {"]
#[doc = "                                \"enum\": {"]
#[doc = "                                  \"type\": \"array\","]
#[doc = "                                  \"items\": {"]
#[doc = "                                    \"type\": \"string\""]
#[doc = "                                  }"]
#[doc = "                                },"]
#[doc = "                                \"maxLength\": {"]
#[doc = "                                  \"type\": \"integer\""]
#[doc = "                                },"]
#[doc = "                                \"maximum\": {"]
#[doc = "                                  \"type\": \"number\""]
#[doc = "                                },"]
#[doc = "                                \"minLength\": {"]
#[doc = "                                  \"type\": \"integer\""]
#[doc = "                                },"]
#[doc = "                                \"minimum\": {"]
#[doc = "                                  \"type\": \"number\""]
#[doc = "                                },"]
#[doc = "                                \"pattern\": {"]
#[doc = "                                  \"type\": \"string\""]
#[doc = "                                }"]
#[doc = "                              },"]
#[doc = "                              \"additionalProperties\": false"]
#[doc = "                            },"]
#[doc = "                            \"default_value\": {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "                              \"title\": \"Any Value\","]
#[doc = "                              \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "                              \"type\": ["]
#[doc = "                                \"string\","]
#[doc = "                                \"number\","]
#[doc = "                                \"integer\","]
#[doc = "                                \"boolean\","]
#[doc = "                                \"object\","]
#[doc = "                                \"array\","]
#[doc = "                                \"null\""]
#[doc = "                              ]"]
#[doc = "                            },"]
#[doc = "                            \"description\": {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "                              \"title\": \"Description Field\","]
#[doc = "                              \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "                              \"default\": \"\","]
#[doc = "                              \"type\": \"string\""]
#[doc = "                            },"]
#[doc = "                            \"type\": {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "                              \"title\": \"Base Type System\","]
#[doc = "                              \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "                              \"oneOf\": ["]
#[doc = "                                {"]
#[doc = "                                  \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "                                  \"type\": \"string\","]
#[doc = "                                  \"enum\": ["]
#[doc = "                                    \"string\","]
#[doc = "                                    \"boolean\","]
#[doc = "                                    \"integer\","]
#[doc = "                                    \"number\","]
#[doc = "                                    \"f32\","]
#[doc = "                                    \"f64\","]
#[doc = "                                    \"i32\","]
#[doc = "                                    \"i64\","]
#[doc = "                                    \"u32\","]
#[doc = "                                    \"u64\","]
#[doc = "                                    \"uuid\","]
#[doc = "                                    \"date-time\","]
#[doc = "                                    \"duration\","]
#[doc = "                                    \"object\","]
#[doc = "                                    \"array\""]
#[doc = "                                  ]"]
#[doc = "                                },"]
#[doc = "                                {"]
#[doc = "                                  \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "                                  \"type\": \"object\","]
#[doc = "                                  \"required\": ["]
#[doc = "                                    \"$ref\""]
#[doc = "                                  ],"]
#[doc = "                                  \"properties\": {"]
#[doc = "                                    \"$ref\": {"]
#[doc = "                                      \"type\": \"string\""]
#[doc = "                                    }"]
#[doc = "                                  },"]
#[doc = "                                  \"additionalProperties\": false"]
#[doc = "                                }"]
#[doc = "                              ],"]
#[doc = "                              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                            },"]
#[doc = "                            \"ui_label\": {"]
#[doc = "                              \"type\": \"string\""]
#[doc = "                            }"]
#[doc = "                          },"]
#[doc = "                          \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                        }"]
#[doc = "                      ]"]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"additionalProperties\": false"]
#[doc = "                },"]
#[doc = "                \"physics_properties\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/base/PhysicsProperties.v1.schema.json\","]
#[doc = "                  \"title\": \"Base Physics Properties\","]
#[doc = "                  \"description\": \"Defines the common physics-related properties for components and laws.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"engine\","]
#[doc = "                    \"is_quantum\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"collapse_sensitive\": {"]
#[doc = "                      \"description\": \"Indicates if the object is affected by or triggers quantum collapse.\","]
#[doc = "                      \"type\": \"boolean\""]
#[doc = "                    },"]
#[doc = "                    \"engine\": {"]
#[doc = "                      \"description\": \"The physics engine responsible for this object.\","]
#[doc = "                      \"enum\": ["]
#[doc = "                        \"quantum\","]
#[doc = "                        \"classical\","]
#[doc = "                        \"hybrid\""]
#[doc = "                      ]"]
#[doc = "                    },"]
#[doc = "                    \"is_quantum\": {"]
#[doc = "                      \"description\": \"Indicates if the object has quantum properties.\","]
#[doc = "                      \"type\": \"boolean\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "              \"fields\": {"]
#[doc = "                \"completed_at\": {"]
#[doc = "                  \"description\": \"The timestamp when the task was marked as completed. This triggers its consumption into a Moment.\","]
#[doc = "                  \"nullable\": true,"]
#[doc = "                  \"type\": \"date-time\""]
#[doc = "                },"]
#[doc = "                \"status\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/fields/Status.v1.json\","]
#[doc = "                  \"default\": \"Pending\","]
#[doc = "                  \"description\": \"The current status of a task or process.\","]
#[doc = "                  \"enum\": ["]
#[doc = "                    \"Pending\","]
#[doc = "                    \"InProgress\","]
#[doc = "                    \"Completed\","]
#[doc = "                    \"Cancelled\""]
#[doc = "                  ],"]
#[doc = "                  \"title\": \"Status Field\","]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"physics_properties\": {"]
#[doc = "                \"engine\": \"classical\","]
#[doc = "                \"is_quantum\": false"]
#[doc = "              },"]
#[doc = "              \"schema_version\": \"1.1.0\""]
#[doc = "            }"]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"entity_type\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/types/classification/EntityType.v1.json\","]
#[doc = "          \"title\": \"Entity Type\","]
#[doc = "          \"description\": \"A canonical enum of all 7 cognitive entity types.\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"enum\": ["]
#[doc = "            \"Focus\","]
#[doc = "            \"Filament\","]
#[doc = "            \"Motif\","]
#[doc = "            \"Intent\","]
#[doc = "            \"Moment\","]
#[doc = "            \"Bond\","]
#[doc = "            \"Thread\""]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        \"physics_state\": {"]
#[doc = "          \"title\": \"IntentPhysicsState\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"required\": ["]
#[doc = "            \"manifold_position\","]
#[doc = "            \"universal\""]
#[doc = "          ],"]
#[doc = "          \"properties\": {"]
#[doc = "            \"manifold_position\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/components/MemoryManifoldPosition.v1.schema.json\","]
#[doc = "              \"title\": \"Memory Manifold Position Component\","]
#[doc = "              \"description\": \"The entity's position in the 7D cognitive manifold, enforcing quantized spatial coordinates (Rule 8).\","]
#[doc = "              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "              \"fields\": {"]
#[doc = "                \"autobiographical_coordinate\": {"]
#[doc = "                  \"description\": \"Quantized coordinate for External <-> Self-related.\","]
#[doc = "                  \"type\": \"integer\""]
#[doc = "                },"]
#[doc = "                \"coherence_coordinate\": {"]
#[doc = "                  \"description\": \"Quantized coordinate for Fragmented <-> Unified.\","]
#[doc = "                  \"type\": \"integer\""]
#[doc = "                },"]
#[doc = "                \"emotional_coordinate\": {"]
#[doc = "                  \"description\": \"Quantized coordinate for Negative <-> Positive.\","]
#[doc = "                  \"type\": \"integer\""]
#[doc = "                },"]
#[doc = "                \"episodic_coordinate\": {"]
#[doc = "                  \"description\": \"Quantized coordinate for General <-> Specific.\","]
#[doc = "                  \"type\": \"integer\""]
#[doc = "                },"]
#[doc = "                \"salience_coordinate\": {"]
#[doc = "                  \"description\": \"Quantized coordinate for Background <-> Foreground.\","]
#[doc = "                  \"type\": \"integer\""]
#[doc = "                },"]
#[doc = "                \"semantic_coordinate\": {"]
#[doc = "                  \"description\": \"Quantized coordinate for Abstract <-> Concrete.\","]
#[doc = "                  \"type\": \"integer\""]
#[doc = "                },"]
#[doc = "                \"temporal_coordinate\": {"]
#[doc = "                  \"description\": \"Continuous time coordinate (t <= 0).\","]
#[doc = "                  \"maximum\": 0,"]
#[doc = "                  \"type\": \"number\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"physics_properties\": {"]
#[doc = "                \"engine\": \"classical\","]
#[doc = "                \"is_quantum\": false"]
#[doc = "              },"]
#[doc = "              \"schema_version\": \"1.0.0\""]
#[doc = "            },"]
#[doc = "            \"universal\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/components/UniversalPhysicsState.v1.schema.json\","]
#[doc = "              \"title\": \"Universal Physics State Component\","]
#[doc = "              \"description\": \"The transient, mutable physics state of an entity.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"properties\": {"]
#[doc = "                \"fields\": {"]
#[doc = "                  \"title\": \"UniversalPhysicsStateFields\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"cognitive_perspective\","]
#[doc = "                    \"consolidation_rate\","]
#[doc = "                    \"decay_rate\","]
#[doc = "                    \"energy\","]
#[doc = "                    \"entanglement_strength\","]
#[doc = "                    \"momentum\","]
#[doc = "                    \"quantum_coherence\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"cognitive_perspective\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/fields/CognitivePerspective.v1.schema.json\","]
#[doc = "                      \"title\": \"Cognitive Perspective Field\","]
#[doc = "                      \"description\": \"The intrinsic 'spin' or 'flavor' of the entity, which generates cognitive dissonance (torsion).\","]
#[doc = "                      \"ui_label\": \"Cognitive Perspective\""]
#[doc = "                    },"]
#[doc = "                    \"consolidation_rate\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/snippets/fields/ConsolidationRate.v1.json\","]
#[doc = "                      \"title\": \"Consolidation Rate Field\","]
#[doc = "                      \"description\": \"The base rate of memory consolidation for an entity, before multipliers are applied. Represents how quickly an unstable memory becomes stable.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"required\": ["]
#[doc = "                        \"value\""]
#[doc = "                      ],"]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"value\": {"]
#[doc = "                          \"default\": 0.0,"]
#[doc = "                          \"type\": \"number\","]
#[doc = "                          \"format\": \"double\","]
#[doc = "                          \"maximum\": 1.0,"]
#[doc = "                          \"minimum\": 0.0,"]
#[doc = "                          \"x-python-type\": \"float\","]
#[doc = "                          \"x-rust-type\": \"f64\""]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"additionalProperties\": false"]
#[doc = "                    },"]
#[doc = "                    \"decay_rate\": {"]
#[doc = "                      \"description\": \"The base rate of energy or coherence decay for an entity, before multipliers are applied.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"required\": ["]
#[doc = "                        \"value\""]
#[doc = "                      ],"]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"value\": {"]
#[doc = "                          \"default\": 0.01,"]
#[doc = "                          \"type\": \"number\","]
#[doc = "                          \"format\": \"double\","]
#[doc = "                          \"x-python-type\": \"float\","]
#[doc = "                          \"x-rust-type\": \"f64\""]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"additionalProperties\": false"]
#[doc = "                    },"]
#[doc = "                    \"energy\": {"]
#[doc = "                      \"description\": \"The current energy level of an entity.\","]
#[doc = "                      \"default\": 0.1,"]
#[doc = "                      \"type\": \"number\""]
#[doc = "                    },"]
#[doc = "                    \"entanglement_strength\": {"]
#[doc = "                      \"description\": \"The overall entanglement strength of this entity with others. Null for classical entities.\","]
#[doc = "                      \"default\": null,"]
#[doc = "                      \"type\": ["]
#[doc = "                        \"number\","]
#[doc = "                        \"null\""]
#[doc = "                      ],"]
#[doc = "                      \"maximum\": 1.0,"]
#[doc = "                      \"minimum\": 0.0"]
#[doc = "                    },"]
#[doc = "                    \"momentum\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/types/physics/Vec6.v1.json\","]
#[doc = "                      \"title\": \"6D Physics Vector\","]
#[doc = "                      \"description\": \"A reusable data type for a vector of six f64 numbers, used for momentum and forces in the 6 spatial dimensions of the manifold.\","]
#[doc = "                      \"type\": \"array\","]
#[doc = "                      \"items\": {"]
#[doc = "                        \"type\": \"number\""]
#[doc = "                      },"]
#[doc = "                      \"maxItems\": 6,"]
#[doc = "                      \"minItems\": 6"]
#[doc = "                    },"]
#[doc = "                    \"quantum_coherence\": {"]
#[doc = "                      \"description\": \"The quantum coherence level of the entity, representing its degree of superposition. Null for classical entities.\","]
#[doc = "                      \"default\": null,"]
#[doc = "                      \"type\": ["]
#[doc = "                        \"number\","]
#[doc = "                        \"null\""]
#[doc = "                      ],"]
#[doc = "                      \"maximum\": 1.0,"]
#[doc = "                      \"minimum\": 0.0"]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"additionalProperties\": false"]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "              \"schema_version\": \"3.0.0\""]
#[doc = "            }"]
#[doc = "          }"]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/entities/Focus.v1.schema.json\","]
#[doc = "      \"title\": \"Focus Entity\","]
#[doc = "      \"description\": \"A quantum entity representing a high-level, user-declared thematic goal or life chapter.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"components\","]
#[doc = "        \"entity_type\","]
#[doc = "        \"physics_state\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"components\": {"]
#[doc = "          \"title\": \"FocusComponents\","]
#[doc = "          \"description\": \"Component references temporarily disabled for pipeline testing\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"required\": ["]
#[doc = "            \"content\""]
#[doc = "          ],"]
#[doc = "          \"properties\": {"]
#[doc = "            \"_comment\": {"]
#[doc = "              \"description\": \"TODO: Re-enable component references when component schemas are available\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"content\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/components/FocusContent.v1.schema.json\","]
#[doc = "              \"title\": \"Focus Content Component\","]
#[doc = "              \"description\": \"Defines the content and scope of a thematic goal or focus.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"fields\","]
#[doc = "                \"physics_properties\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"fields\": {"]
#[doc = "                  \"title\": \"BaseFields\","]
#[doc = "                  \"description\": \"A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"patternProperties\": {"]
#[doc = "                    \"^[a-z_][a-z0-9_]*$\": {"]
#[doc = "                      \"oneOf\": ["]
#[doc = "                        {"]
#[doc = "                          \"description\": \"A direct reference to a shared definition in SharedDefinitions.schema.json.\","]
#[doc = "                          \"type\": \"object\","]
#[doc = "                          \"required\": ["]
#[doc = "                            \"$ref\""]
#[doc = "                          ],"]
#[doc = "                          \"properties\": {"]
#[doc = "                            \"$ref\": {"]
#[doc = "                              \"type\": \"string\""]
#[doc = "                            }"]
#[doc = "                          },"]
#[doc = "                          \"additionalProperties\": false"]
#[doc = "                        },"]
#[doc = "                        {"]
#[doc = "                          \"$id\": \"https://familiar.dev/schemas/base/Field.v1.schema.json\","]
#[doc = "                          \"title\": \"Base Field\","]
#[doc = "                          \"description\": \"Defines the structure for a single, inline field definition within a component.\","]
#[doc = "                          \"type\": \"object\","]
#[doc = "                          \"required\": ["]
#[doc = "                            \"description\","]
#[doc = "                            \"type\""]
#[doc = "                          ],"]
#[doc = "                          \"properties\": {"]
#[doc = "                            \"constraints\": {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "                              \"title\": \"Constraint Definition\","]
#[doc = "                              \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "                              \"type\": \"object\","]
#[doc = "                              \"properties\": {"]
#[doc = "                                \"enum\": {"]
#[doc = "                                  \"type\": \"array\","]
#[doc = "                                  \"items\": {"]
#[doc = "                                    \"type\": \"string\""]
#[doc = "                                  }"]
#[doc = "                                },"]
#[doc = "                                \"maxLength\": {"]
#[doc = "                                  \"type\": \"integer\""]
#[doc = "                                },"]
#[doc = "                                \"maximum\": {"]
#[doc = "                                  \"type\": \"number\""]
#[doc = "                                },"]
#[doc = "                                \"minLength\": {"]
#[doc = "                                  \"type\": \"integer\""]
#[doc = "                                },"]
#[doc = "                                \"minimum\": {"]
#[doc = "                                  \"type\": \"number\""]
#[doc = "                                },"]
#[doc = "                                \"pattern\": {"]
#[doc = "                                  \"type\": \"string\""]
#[doc = "                                }"]
#[doc = "                              },"]
#[doc = "                              \"additionalProperties\": false"]
#[doc = "                            },"]
#[doc = "                            \"default_value\": {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "                              \"title\": \"Any Value\","]
#[doc = "                              \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "                              \"type\": ["]
#[doc = "                                \"string\","]
#[doc = "                                \"number\","]
#[doc = "                                \"integer\","]
#[doc = "                                \"boolean\","]
#[doc = "                                \"object\","]
#[doc = "                                \"array\","]
#[doc = "                                \"null\""]
#[doc = "                              ]"]
#[doc = "                            },"]
#[doc = "                            \"description\": {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "                              \"title\": \"Description Field\","]
#[doc = "                              \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "                              \"default\": \"\","]
#[doc = "                              \"type\": \"string\""]
#[doc = "                            },"]
#[doc = "                            \"type\": {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "                              \"title\": \"Base Type System\","]
#[doc = "                              \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "                              \"oneOf\": ["]
#[doc = "                                {"]
#[doc = "                                  \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "                                  \"type\": \"string\","]
#[doc = "                                  \"enum\": ["]
#[doc = "                                    \"string\","]
#[doc = "                                    \"boolean\","]
#[doc = "                                    \"integer\","]
#[doc = "                                    \"number\","]
#[doc = "                                    \"f32\","]
#[doc = "                                    \"f64\","]
#[doc = "                                    \"i32\","]
#[doc = "                                    \"i64\","]
#[doc = "                                    \"u32\","]
#[doc = "                                    \"u64\","]
#[doc = "                                    \"uuid\","]
#[doc = "                                    \"date-time\","]
#[doc = "                                    \"duration\","]
#[doc = "                                    \"object\","]
#[doc = "                                    \"array\""]
#[doc = "                                  ]"]
#[doc = "                                },"]
#[doc = "                                {"]
#[doc = "                                  \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "                                  \"type\": \"object\","]
#[doc = "                                  \"required\": ["]
#[doc = "                                    \"$ref\""]
#[doc = "                                  ],"]
#[doc = "                                  \"properties\": {"]
#[doc = "                                    \"$ref\": {"]
#[doc = "                                      \"type\": \"string\""]
#[doc = "                                    }"]
#[doc = "                                  },"]
#[doc = "                                  \"additionalProperties\": false"]
#[doc = "                                }"]
#[doc = "                              ],"]
#[doc = "                              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                            },"]
#[doc = "                            \"ui_label\": {"]
#[doc = "                              \"type\": \"string\""]
#[doc = "                            }"]
#[doc = "                          },"]
#[doc = "                          \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                        }"]
#[doc = "                      ]"]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"additionalProperties\": false"]
#[doc = "                },"]
#[doc = "                \"physics_properties\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/base/PhysicsProperties.v1.schema.json\","]
#[doc = "                  \"title\": \"Base Physics Properties\","]
#[doc = "                  \"description\": \"Defines the common physics-related properties for components and laws.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"engine\","]
#[doc = "                    \"is_quantum\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"collapse_sensitive\": {"]
#[doc = "                      \"description\": \"Indicates if the object is affected by or triggers quantum collapse.\","]
#[doc = "                      \"type\": \"boolean\""]
#[doc = "                    },"]
#[doc = "                    \"engine\": {"]
#[doc = "                      \"description\": \"The physics engine responsible for this object.\","]
#[doc = "                      \"enum\": ["]
#[doc = "                        \"quantum\","]
#[doc = "                        \"classical\","]
#[doc = "                        \"hybrid\""]
#[doc = "                      ]"]
#[doc = "                    },"]
#[doc = "                    \"is_quantum\": {"]
#[doc = "                      \"description\": \"Indicates if the object has quantum properties.\","]
#[doc = "                      \"type\": \"boolean\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "              \"fields\": {"]
#[doc = "                \"end_date\": {"]
#[doc = "                  \"description\": \"When this focus is scheduled to end or be reviewed.\","]
#[doc = "                  \"nullable\": true,"]
#[doc = "                  \"type\": \"date-time\""]
#[doc = "                },"]
#[doc = "                \"scope\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/fields/TemporalScope.v1.json\","]
#[doc = "                  \"description\": \"The temporal scope or duration of an entity or process.\","]
#[doc = "                  \"enum\": ["]
#[doc = "                    \"Daily\","]
#[doc = "                    \"Weekly\","]
#[doc = "                    \"Monthly\","]
#[doc = "                    \"Quarterly\","]
#[doc = "                    \"Yearly\","]
#[doc = "                    \"Ongoing\""]
#[doc = "                  ],"]
#[doc = "                  \"title\": \"Temporal Scope Field\","]
#[doc = "                  \"type\": \"string\""]
#[doc = "                },"]
#[doc = "                \"start_date\": {"]
#[doc = "                  \"description\": \"When this focus becomes active.\","]
#[doc = "                  \"type\": \"date-time\""]
#[doc = "                },"]
#[doc = "                \"theme\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/fields/Theme.v1.json\","]
#[doc = "                  \"description\": \"A concise statement of a focus, goal, or pattern.\","]
#[doc = "                  \"title\": \"Theme Field\","]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"physics_properties\": {"]
#[doc = "                \"engine\": \"quantum\","]
#[doc = "                \"is_quantum\": true"]
#[doc = "              },"]
#[doc = "              \"schema_version\": \"1.1.0\""]
#[doc = "            }"]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"entity_type\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/types/classification/EntityType.v1.json\","]
#[doc = "          \"title\": \"Entity Type\","]
#[doc = "          \"description\": \"A canonical enum of all 7 cognitive entity types.\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"enum\": ["]
#[doc = "            \"Focus\","]
#[doc = "            \"Filament\","]
#[doc = "            \"Motif\","]
#[doc = "            \"Intent\","]
#[doc = "            \"Moment\","]
#[doc = "            \"Bond\","]
#[doc = "            \"Thread\""]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        \"physics_state\": {"]
#[doc = "          \"title\": \"FocusPhysicsState\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"required\": ["]
#[doc = "            \"quantum\","]
#[doc = "            \"universal\""]
#[doc = "          ],"]
#[doc = "          \"properties\": {"]
#[doc = "            \"quantum\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/components/QuantumState.v1.schema.json\","]
#[doc = "              \"title\": \"Quantum State Component\","]
#[doc = "              \"description\": \"Manages the quantum properties of an entity, including its superposition and entanglement.\","]
#[doc = "              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "              \"fields\": {"]
#[doc = "                \"coherence_score\": {"]
#[doc = "                  \"description\": \"The purity of the quantum state (0.0 = maximally mixed, 1.0 = pure).\","]
#[doc = "                  \"maximum\": 1.0,"]
#[doc = "                  \"minimum\": 0.0,"]
#[doc = "                  \"type\": \"number\""]
#[doc = "                },"]
#[doc = "                \"density_matrix\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/types/physics/DensityMatrix.v1.json\","]
#[doc = "                  \"description\": \"A 2x2 matrix of complex numbers representing a quantum state.\","]
#[doc = "                  \"items\": {"]
#[doc = "                    \"items\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/types/physics/ComplexNumber.v1.json\","]
#[doc = "                      \"description\": \"Represents a complex number with real and imaginary parts.\","]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"imaginary\": {"]
#[doc = "                          \"type\": \"number\""]
#[doc = "                        },"]
#[doc = "                        \"real\": {"]
#[doc = "                          \"type\": \"number\""]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"required\": ["]
#[doc = "                        \"real\","]
#[doc = "                        \"imaginary\""]
#[doc = "                      ],"]
#[doc = "                      \"title\": \"Complex Number\","]
#[doc = "                      \"type\": \"object\""]
#[doc = "                    },"]
#[doc = "                    \"maxItems\": 2,"]
#[doc = "                    \"minItems\": 2,"]
#[doc = "                    \"type\": \"array\""]
#[doc = "                  },"]
#[doc = "                  \"maxItems\": 2,"]
#[doc = "                  \"minItems\": 2,"]
#[doc = "                  \"title\": \"Density Matrix\","]
#[doc = "                  \"type\": \"array\""]
#[doc = "                },"]
#[doc = "                \"entanglement_network\": {"]
#[doc = "                  \"additionalProperties\": {"]
#[doc = "                    \"maximum\": 1.0,"]
#[doc = "                    \"minimum\": 0.0,"]
#[doc = "                    \"type\": \"number\""]
#[doc = "                  },"]
#[doc = "                  \"type\": \"object\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"physics_properties\": {"]
#[doc = "                \"engine\": \"quantum\","]
#[doc = "                \"is_quantum\": true"]
#[doc = "              },"]
#[doc = "              \"schema_version\": \"1.0.0\""]
#[doc = "            },"]
#[doc = "            \"universal\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/components/UniversalPhysicsState.v1.schema.json\","]
#[doc = "              \"title\": \"Universal Physics State Component\","]
#[doc = "              \"description\": \"The transient, mutable physics state of an entity.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"properties\": {"]
#[doc = "                \"fields\": {"]
#[doc = "                  \"title\": \"UniversalPhysicsStateFields\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"cognitive_perspective\","]
#[doc = "                    \"consolidation_rate\","]
#[doc = "                    \"decay_rate\","]
#[doc = "                    \"energy\","]
#[doc = "                    \"entanglement_strength\","]
#[doc = "                    \"momentum\","]
#[doc = "                    \"quantum_coherence\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"cognitive_perspective\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/fields/CognitivePerspective.v1.schema.json\","]
#[doc = "                      \"title\": \"Cognitive Perspective Field\","]
#[doc = "                      \"description\": \"The intrinsic 'spin' or 'flavor' of the entity, which generates cognitive dissonance (torsion).\","]
#[doc = "                      \"ui_label\": \"Cognitive Perspective\""]
#[doc = "                    },"]
#[doc = "                    \"consolidation_rate\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/snippets/fields/ConsolidationRate.v1.json\","]
#[doc = "                      \"title\": \"Consolidation Rate Field\","]
#[doc = "                      \"description\": \"The base rate of memory consolidation for an entity, before multipliers are applied. Represents how quickly an unstable memory becomes stable.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"required\": ["]
#[doc = "                        \"value\""]
#[doc = "                      ],"]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"value\": {"]
#[doc = "                          \"default\": 0.0,"]
#[doc = "                          \"type\": \"number\","]
#[doc = "                          \"format\": \"double\","]
#[doc = "                          \"maximum\": 1.0,"]
#[doc = "                          \"minimum\": 0.0,"]
#[doc = "                          \"x-python-type\": \"float\","]
#[doc = "                          \"x-rust-type\": \"f64\""]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"additionalProperties\": false"]
#[doc = "                    },"]
#[doc = "                    \"decay_rate\": {"]
#[doc = "                      \"description\": \"The base rate of energy or coherence decay for an entity, before multipliers are applied.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"required\": ["]
#[doc = "                        \"value\""]
#[doc = "                      ],"]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"value\": {"]
#[doc = "                          \"default\": 0.01,"]
#[doc = "                          \"type\": \"number\","]
#[doc = "                          \"format\": \"double\","]
#[doc = "                          \"x-python-type\": \"float\","]
#[doc = "                          \"x-rust-type\": \"f64\""]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"additionalProperties\": false"]
#[doc = "                    },"]
#[doc = "                    \"energy\": {"]
#[doc = "                      \"description\": \"The current energy level of an entity.\","]
#[doc = "                      \"default\": 0.1,"]
#[doc = "                      \"type\": \"number\""]
#[doc = "                    },"]
#[doc = "                    \"entanglement_strength\": {"]
#[doc = "                      \"description\": \"The overall entanglement strength of this entity with others. Null for classical entities.\","]
#[doc = "                      \"default\": null,"]
#[doc = "                      \"type\": ["]
#[doc = "                        \"number\","]
#[doc = "                        \"null\""]
#[doc = "                      ],"]
#[doc = "                      \"maximum\": 1.0,"]
#[doc = "                      \"minimum\": 0.0"]
#[doc = "                    },"]
#[doc = "                    \"momentum\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/types/physics/Vec6.v1.json\","]
#[doc = "                      \"title\": \"6D Physics Vector\","]
#[doc = "                      \"description\": \"A reusable data type for a vector of six f64 numbers, used for momentum and forces in the 6 spatial dimensions of the manifold.\","]
#[doc = "                      \"type\": \"array\","]
#[doc = "                      \"items\": {"]
#[doc = "                        \"type\": \"number\""]
#[doc = "                      },"]
#[doc = "                      \"maxItems\": 6,"]
#[doc = "                      \"minItems\": 6"]
#[doc = "                    },"]
#[doc = "                    \"quantum_coherence\": {"]
#[doc = "                      \"description\": \"The quantum coherence level of the entity, representing its degree of superposition. Null for classical entities.\","]
#[doc = "                      \"default\": null,"]
#[doc = "                      \"type\": ["]
#[doc = "                        \"number\","]
#[doc = "                        \"null\""]
#[doc = "                      ],"]
#[doc = "                      \"maximum\": 1.0,"]
#[doc = "                      \"minimum\": 0.0"]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"additionalProperties\": false"]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "              \"schema_version\": \"3.0.0\""]
#[doc = "            }"]
#[doc = "          }"]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(untagged)]
pub enum EntityDraftPayloadData {
    MomentEntity {
        components: MomentComponents,
        #[doc = "A canonical definition for an ISO 8601 timestamp with timezone."]
        created_at: ::std::string::String,
        #[doc = "A clear, complete sentence explaining the object's purpose and function within the system."]
        description: ::std::string::String,
        #[doc = "A reusable definition for a unique entity identifier."]
        entity_id: ::std::string::String,
        #[doc = "A canonical enum of all 7 cognitive entity types."]
        entity_type: EntityType,
        physics_state: MomentPhysicsState,
        #[doc = "The semantic version of this schema definition (e.g., '1.0.0')."]
        schema_version: ::std::string::String,
        #[doc = "A canonical definition for a Universally Unique Identifier (UUID)."]
        tenant_id: ::std::string::String,
        #[doc = "The human-readable, PascalCase name of the object (e.g., 'UniversalPhysicsState')."]
        title: ::std::string::String,
    },
    BondEntity {
        components: BondComponents,
        #[doc = "A canonical enum of all 7 cognitive entity types."]
        entity_type: EntityType,
        physics_state: BondPhysicsState,
        #[doc = "A reusable definition for a unique entity identifier."]
        thread_a_id: ::std::string::String,
        #[doc = "A reusable definition for a unique entity identifier."]
        thread_b_id: ::std::string::String,
    },
    Thread(Thread),
    MotifEntity {
        components: MotifComponents,
        #[doc = "A canonical enum of all 7 cognitive entity types."]
        entity_type: EntityType,
        physics_state: MotifPhysicsState,
    },
    FilamentEntity {
        components: FilamentComponents,
        #[doc = "A canonical enum of all 7 cognitive entity types."]
        entity_type: EntityType,
        physics_state: FilamentPhysicsState,
    },
    IntentEntity {
        components: IntentComponents,
        #[doc = "A canonical enum of all 7 cognitive entity types."]
        entity_type: EntityType,
        physics_state: IntentPhysicsState,
    },
    FocusEntity {
        components: FocusComponents,
        #[doc = "A canonical enum of all 7 cognitive entity types."]
        entity_type: EntityType,
        physics_state: FocusPhysicsState,
    },
}
impl ::std::convert::From<&Self> for EntityDraftPayloadData {
    fn from(value: &EntityDraftPayloadData) -> Self {
        value.clone()
    }
}
impl ::std::convert::From<Thread> for EntityDraftPayloadData {
    fn from(value: Thread) -> Self {
        Self::Thread(value)
    }
}
#[doc = "A canonical enum of all 7 cognitive entity types."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"$id\": \"https://familiar.dev/schemas/types/classification/EntityType.v1.json\","]
#[doc = "  \"title\": \"Entity Type\","]
#[doc = "  \"description\": \"A canonical enum of all 7 cognitive entity types.\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"Focus\","]
#[doc = "    \"Filament\","]
#[doc = "    \"Motif\","]
#[doc = "    \"Intent\","]
#[doc = "    \"Moment\","]
#[doc = "    \"Bond\","]
#[doc = "    \"Thread\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum EntityType {
    Focus,
    Filament,
    Motif,
    Intent,
    Moment,
    Bond,
    Thread,
}
impl ::std::convert::From<&Self> for EntityType {
    fn from(value: &EntityType) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display for EntityType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Focus => write!(f, "Focus"),
            Self::Filament => write!(f, "Filament"),
            Self::Motif => write!(f, "Motif"),
            Self::Intent => write!(f, "Intent"),
            Self::Moment => write!(f, "Moment"),
            Self::Bond => write!(f, "Bond"),
            Self::Thread => write!(f, "Thread"),
        }
    }
}
impl ::std::str::FromStr for EntityType {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        match value {
            "Focus" => Ok(Self::Focus),
            "Filament" => Ok(Self::Filament),
            "Motif" => Ok(Self::Motif),
            "Intent" => Ok(Self::Intent),
            "Moment" => Ok(Self::Moment),
            "Bond" => Ok(Self::Bond),
            "Thread" => Ok(Self::Thread),
            _ => Err("invalid value".into()),
        }
    }
}
impl ::std::convert::TryFrom<&str> for EntityType {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String> for EntityType {
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String> for EntityType {
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "Component references temporarily disabled for pipeline testing"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"FilamentComponents\","]
#[doc = "  \"description\": \"Component references temporarily disabled for pipeline testing\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"consolidation\","]
#[doc = "    \"content\","]
#[doc = "    \"gdpr\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"_comment\": {"]
#[doc = "      \"description\": \"TODO: Re-enable component references when component schemas are available\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"consolidation\": {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/components/ConsolidationState.v1.schema.json\","]
#[doc = "      \"title\": \"Consolidation State Component\","]
#[doc = "      \"description\": \"Tracks the temporal consolidation state of a Motif or Filament.\","]
#[doc = "      \"properties\": {"]
#[doc = "        \"fields\": {"]
#[doc = "          \"title\": \"ConsolidationStateFields\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"required\": ["]
#[doc = "            \"consolidation_level\","]
#[doc = "            \"last_consolidated_at\","]
#[doc = "            \"next_consolidation_due\","]
#[doc = "            \"source_entity_count\""]
#[doc = "          ],"]
#[doc = "          \"properties\": {"]
#[doc = "            \"consolidation_level\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/types/system/ConsolidationLevel.v1.json\","]
#[doc = "              \"title\": \"Consolidation Level\","]
#[doc = "              \"description\": \"A canonical enum for the temporal consolidation level of a Motif or Filament.\","]
#[doc = "              \"type\": \"string\","]
#[doc = "              \"enum\": ["]
#[doc = "                \"Daily\","]
#[doc = "                \"Weekly\","]
#[doc = "                \"Monthly\","]
#[doc = "                \"Yearly\","]
#[doc = "                \"Archived\""]
#[doc = "              ]"]
#[doc = "            },"]
#[doc = "            \"last_consolidated_at\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/types/primitives/NullableTimestamp.v1.json\","]
#[doc = "              \"title\": \"Nullable Timestamp\","]
#[doc = "              \"description\": \"A canonical definition for an optional ISO 8601 timestamp with timezone.\","]
#[doc = "              \"type\": ["]
#[doc = "                \"string\","]
#[doc = "                \"null\""]
#[doc = "              ]"]
#[doc = "            },"]
#[doc = "            \"next_consolidation_due\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/types/primitives/NullableTimestamp.v1.json\","]
#[doc = "              \"title\": \"Nullable Timestamp\","]
#[doc = "              \"description\": \"A canonical definition for an optional ISO 8601 timestamp with timezone.\","]
#[doc = "              \"type\": ["]
#[doc = "                \"string\","]
#[doc = "                \"null\""]
#[doc = "              ]"]
#[doc = "            },"]
#[doc = "            \"source_entity_count\": {"]
#[doc = "              \"type\": \"integer\","]
#[doc = "              \"minimum\": 1.0"]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "      \"physics_properties\": {"]
#[doc = "        \"engine\": \"classical\","]
#[doc = "        \"is_quantum\": false"]
#[doc = "      },"]
#[doc = "      \"schema_version\": \"1.2.0\""]
#[doc = "    },"]
#[doc = "    \"content\": {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/components/FilamentContent.v1.schema.json\","]
#[doc = "      \"title\": \"Filament Content Component\","]
#[doc = "      \"description\": \"Defines the high-level narrative or belief content of a Filament entity. This is a quantum component.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"fields\","]
#[doc = "        \"physics_properties\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"fields\": {"]
#[doc = "          \"title\": \"FilamentContentFields\","]
#[doc = "          \"description\": \"A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"required\": ["]
#[doc = "            \"abstraction_level\","]
#[doc = "            \"filament_type\","]
#[doc = "            \"narrative_description\","]
#[doc = "            \"source_threads_and_bonds\""]
#[doc = "          ],"]
#[doc = "          \"properties\": {"]
#[doc = "            \"abstraction_level\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/types/physics/AbstractionLevel.v1.json\","]
#[doc = "              \"title\": \"Abstraction Level\","]
#[doc = "              \"description\": \"A canonical enum for the level of abstraction of a cognitive entity.\","]
#[doc = "              \"type\": \"string\","]
#[doc = "              \"enum\": ["]
#[doc = "                \"Low\","]
#[doc = "                \"Medium\","]
#[doc = "                \"High\""]
#[doc = "              ]"]
#[doc = "            },"]
#[doc = "            \"filament_type\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/types/physics/FilamentType.v1.json\","]
#[doc = "              \"title\": \"Filament Type\","]
#[doc = "              \"description\": \"A canonical enum of the types of high-level narratives a Filament can represent.\","]
#[doc = "              \"type\": \"string\","]
#[doc = "              \"enum\": ["]
#[doc = "                \"PersonalityTrait\","]
#[doc = "                \"Worldview\","]
#[doc = "                \"Relationship_Pattern\","]
#[doc = "                \"Life_Theme\""]
#[doc = "              ]"]
#[doc = "            },"]
#[doc = "            \"narrative_description\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "              \"title\": \"Description Field\","]
#[doc = "              \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "              \"default\": \"\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"source_threads_and_bonds\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/fields/SourceThreadsAndBonds.v1.json\","]
#[doc = "              \"title\": \"Source Threads and Bonds Field\","]
#[doc = "              \"description\": \"A list of Thread and Bond entity IDs that are the source for a derived cognitive entity like a Filament.\","]
#[doc = "              \"type\": \"array\","]
#[doc = "              \"items\": {"]
#[doc = "                \"$id\": \"https://familiar.dev/schemas/fields/EntityId.v1.json\","]
#[doc = "                \"title\": \"Entity ID Field\","]
#[doc = "                \"description\": \"A reusable definition for a unique entity identifier.\","]
#[doc = "                \"type\": \"string\""]
#[doc = "              }"]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"patternProperties\": {"]
#[doc = "            \"^[a-z_][a-z0-9_]*$\": {"]
#[doc = "              \"oneOf\": ["]
#[doc = "                {"]
#[doc = "                  \"description\": \"A direct reference to a shared definition in SharedDefinitions.schema.json.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"$ref\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"$ref\": {"]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"additionalProperties\": false"]
#[doc = "                },"]
#[doc = "                {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/base/Field.v1.schema.json\","]
#[doc = "                  \"title\": \"Base Field\","]
#[doc = "                  \"description\": \"Defines the structure for a single, inline field definition within a component.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"description\","]
#[doc = "                    \"type\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"constraints\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "                      \"title\": \"Constraint Definition\","]
#[doc = "                      \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"enum\": {"]
#[doc = "                          \"type\": \"array\","]
#[doc = "                          \"items\": {"]
#[doc = "                            \"type\": \"string\""]
#[doc = "                          }"]
#[doc = "                        },"]
#[doc = "                        \"maxLength\": {"]
#[doc = "                          \"type\": \"integer\""]
#[doc = "                        },"]
#[doc = "                        \"maximum\": {"]
#[doc = "                          \"type\": \"number\""]
#[doc = "                        },"]
#[doc = "                        \"minLength\": {"]
#[doc = "                          \"type\": \"integer\""]
#[doc = "                        },"]
#[doc = "                        \"minimum\": {"]
#[doc = "                          \"type\": \"number\""]
#[doc = "                        },"]
#[doc = "                        \"pattern\": {"]
#[doc = "                          \"type\": \"string\""]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"additionalProperties\": false"]
#[doc = "                    },"]
#[doc = "                    \"default_value\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "                      \"title\": \"Any Value\","]
#[doc = "                      \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "                      \"type\": ["]
#[doc = "                        \"string\","]
#[doc = "                        \"number\","]
#[doc = "                        \"integer\","]
#[doc = "                        \"boolean\","]
#[doc = "                        \"object\","]
#[doc = "                        \"array\","]
#[doc = "                        \"null\""]
#[doc = "                      ]"]
#[doc = "                    },"]
#[doc = "                    \"description\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "                      \"title\": \"Description Field\","]
#[doc = "                      \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "                      \"default\": \"\","]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    },"]
#[doc = "                    \"type\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "                      \"title\": \"Base Type System\","]
#[doc = "                      \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "                      \"oneOf\": ["]
#[doc = "                        {"]
#[doc = "                          \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "                          \"type\": \"string\","]
#[doc = "                          \"enum\": ["]
#[doc = "                            \"string\","]
#[doc = "                            \"boolean\","]
#[doc = "                            \"integer\","]
#[doc = "                            \"number\","]
#[doc = "                            \"f32\","]
#[doc = "                            \"f64\","]
#[doc = "                            \"i32\","]
#[doc = "                            \"i64\","]
#[doc = "                            \"u32\","]
#[doc = "                            \"u64\","]
#[doc = "                            \"uuid\","]
#[doc = "                            \"date-time\","]
#[doc = "                            \"duration\","]
#[doc = "                            \"object\","]
#[doc = "                            \"array\""]
#[doc = "                          ]"]
#[doc = "                        },"]
#[doc = "                        {"]
#[doc = "                          \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "                          \"type\": \"object\","]
#[doc = "                          \"required\": ["]
#[doc = "                            \"$ref\""]
#[doc = "                          ],"]
#[doc = "                          \"properties\": {"]
#[doc = "                            \"$ref\": {"]
#[doc = "                              \"type\": \"string\""]
#[doc = "                            }"]
#[doc = "                          },"]
#[doc = "                          \"additionalProperties\": false"]
#[doc = "                        }"]
#[doc = "                      ],"]
#[doc = "                      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                    },"]
#[doc = "                    \"ui_label\": {"]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                }"]
#[doc = "              ]"]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        },"]
#[doc = "        \"physics_properties\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/base/PhysicsProperties.v1.schema.json\","]
#[doc = "          \"title\": \"Base Physics Properties\","]
#[doc = "          \"description\": \"Defines the common physics-related properties for components and laws.\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"required\": ["]
#[doc = "            \"engine\","]
#[doc = "            \"is_quantum\""]
#[doc = "          ],"]
#[doc = "          \"properties\": {"]
#[doc = "            \"collapse_sensitive\": {"]
#[doc = "              \"description\": \"Indicates if the object is affected by or triggers quantum collapse.\","]
#[doc = "              \"type\": \"boolean\""]
#[doc = "            },"]
#[doc = "            \"engine\": {"]
#[doc = "              \"description\": \"The physics engine responsible for this object.\","]
#[doc = "              \"enum\": ["]
#[doc = "                \"quantum\","]
#[doc = "                \"classical\","]
#[doc = "                \"hybrid\""]
#[doc = "              ]"]
#[doc = "            },"]
#[doc = "            \"is_quantum\": {"]
#[doc = "              \"description\": \"Indicates if the object has quantum properties.\","]
#[doc = "              \"type\": \"boolean\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "      \"physics_properties\": {"]
#[doc = "        \"engine\": \"quantum\","]
#[doc = "        \"is_quantum\": true"]
#[doc = "      },"]
#[doc = "      \"schema_version\": \"1.2.0\""]
#[doc = "    },"]
#[doc = "    \"gdpr\": {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/components/GDPRDependency.v1.schema.json\","]
#[doc = "      \"title\": \"GDPR Dependency Component\","]
#[doc = "      \"description\": \"Tracks data provenance to enable compliant cascading deletions for GDPR's Right to Erasure.\","]
#[doc = "      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "      \"fields\": {"]
#[doc = "        \"contributing_users\": {"]
#[doc = "          \"description\": \"A set of User IDs whose data contributed to this entity's existence or state.\","]
#[doc = "          \"items\": {"]
#[doc = "            \"type\": \"uuid\""]
#[doc = "          },"]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"uniqueItems\": true"]
#[doc = "        },"]
#[doc = "        \"upstream_dependencies\": {"]
#[doc = "          \"description\": \"A list of source entity IDs (e.g., Moments) that this entity (e.g., a Motif) depends on.\","]
#[doc = "          \"items\": {"]
#[doc = "            \"type\": \"uuid\""]
#[doc = "          },"]
#[doc = "          \"type\": \"array\""]
#[doc = "        },"]
#[doc = "        \"user_evidence_weights\": {"]
#[doc = "          \"additionalProperties\": {"]
#[doc = "            \"maximum\": 1.0,"]
#[doc = "            \"minimum\": 0.0,"]
#[doc = "            \"type\": \"number\""]
#[doc = "          },"]
#[doc = "          \"type\": \"object\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"physics_properties\": {"]
#[doc = "        \"engine\": \"classical\","]
#[doc = "        \"is_quantum\": false"]
#[doc = "      },"]
#[doc = "      \"schema_version\": \"1.0.0\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct FilamentComponents {
    #[doc = "TODO: Re-enable component references when component schemas are available"]
    #[serde(
        rename = "_comment",
        default,
        skip_serializing_if = "::std::option::Option::is_none"
    )]
    pub comment: ::std::option::Option<::std::string::String>,
    pub consolidation: ConsolidationStateComponent,
    pub content: FilamentContentComponent,
    #[doc = "Tracks data provenance to enable compliant cascading deletions for GDPR's Right to Erasure."]
    pub gdpr: ::serde_json::Value,
}
impl ::std::convert::From<&FilamentComponents> for FilamentComponents {
    fn from(value: &FilamentComponents) -> Self {
        value.clone()
    }
}
impl FilamentComponents {
    pub fn builder() -> builder::FilamentComponents {
        Default::default()
    }
}
#[doc = "Defines the high-level narrative or belief content of a Filament entity. This is a quantum component."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"$id\": \"https://familiar.dev/schemas/components/FilamentContent.v1.schema.json\","]
#[doc = "  \"title\": \"Filament Content Component\","]
#[doc = "  \"description\": \"Defines the high-level narrative or belief content of a Filament entity. This is a quantum component.\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"fields\","]
#[doc = "    \"physics_properties\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"fields\": {"]
#[doc = "      \"title\": \"FilamentContentFields\","]
#[doc = "      \"description\": \"A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"abstraction_level\","]
#[doc = "        \"filament_type\","]
#[doc = "        \"narrative_description\","]
#[doc = "        \"source_threads_and_bonds\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"abstraction_level\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/types/physics/AbstractionLevel.v1.json\","]
#[doc = "          \"title\": \"Abstraction Level\","]
#[doc = "          \"description\": \"A canonical enum for the level of abstraction of a cognitive entity.\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"enum\": ["]
#[doc = "            \"Low\","]
#[doc = "            \"Medium\","]
#[doc = "            \"High\""]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        \"filament_type\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/types/physics/FilamentType.v1.json\","]
#[doc = "          \"title\": \"Filament Type\","]
#[doc = "          \"description\": \"A canonical enum of the types of high-level narratives a Filament can represent.\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"enum\": ["]
#[doc = "            \"PersonalityTrait\","]
#[doc = "            \"Worldview\","]
#[doc = "            \"Relationship_Pattern\","]
#[doc = "            \"Life_Theme\""]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        \"narrative_description\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "          \"title\": \"Description Field\","]
#[doc = "          \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "          \"default\": \"\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"source_threads_and_bonds\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/fields/SourceThreadsAndBonds.v1.json\","]
#[doc = "          \"title\": \"Source Threads and Bonds Field\","]
#[doc = "          \"description\": \"A list of Thread and Bond entity IDs that are the source for a derived cognitive entity like a Filament.\","]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"$id\": \"https://familiar.dev/schemas/fields/EntityId.v1.json\","]
#[doc = "            \"title\": \"Entity ID Field\","]
#[doc = "            \"description\": \"A reusable definition for a unique entity identifier.\","]
#[doc = "            \"type\": \"string\""]
#[doc = "          }"]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"patternProperties\": {"]
#[doc = "        \"^[a-z_][a-z0-9_]*$\": {"]
#[doc = "          \"oneOf\": ["]
#[doc = "            {"]
#[doc = "              \"description\": \"A direct reference to a shared definition in SharedDefinitions.schema.json.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"$ref\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"$ref\": {"]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"additionalProperties\": false"]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/base/Field.v1.schema.json\","]
#[doc = "              \"title\": \"Base Field\","]
#[doc = "              \"description\": \"Defines the structure for a single, inline field definition within a component.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"description\","]
#[doc = "                \"type\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"constraints\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "                  \"title\": \"Constraint Definition\","]
#[doc = "                  \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"enum\": {"]
#[doc = "                      \"type\": \"array\","]
#[doc = "                      \"items\": {"]
#[doc = "                        \"type\": \"string\""]
#[doc = "                      }"]
#[doc = "                    },"]
#[doc = "                    \"maxLength\": {"]
#[doc = "                      \"type\": \"integer\""]
#[doc = "                    },"]
#[doc = "                    \"maximum\": {"]
#[doc = "                      \"type\": \"number\""]
#[doc = "                    },"]
#[doc = "                    \"minLength\": {"]
#[doc = "                      \"type\": \"integer\""]
#[doc = "                    },"]
#[doc = "                    \"minimum\": {"]
#[doc = "                      \"type\": \"number\""]
#[doc = "                    },"]
#[doc = "                    \"pattern\": {"]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"additionalProperties\": false"]
#[doc = "                },"]
#[doc = "                \"default_value\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "                  \"title\": \"Any Value\","]
#[doc = "                  \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "                  \"type\": ["]
#[doc = "                    \"string\","]
#[doc = "                    \"number\","]
#[doc = "                    \"integer\","]
#[doc = "                    \"boolean\","]
#[doc = "                    \"object\","]
#[doc = "                    \"array\","]
#[doc = "                    \"null\""]
#[doc = "                  ]"]
#[doc = "                },"]
#[doc = "                \"description\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "                  \"title\": \"Description Field\","]
#[doc = "                  \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "                  \"default\": \"\","]
#[doc = "                  \"type\": \"string\""]
#[doc = "                },"]
#[doc = "                \"type\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "                  \"title\": \"Base Type System\","]
#[doc = "                  \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "                  \"oneOf\": ["]
#[doc = "                    {"]
#[doc = "                      \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "                      \"type\": \"string\","]
#[doc = "                      \"enum\": ["]
#[doc = "                        \"string\","]
#[doc = "                        \"boolean\","]
#[doc = "                        \"integer\","]
#[doc = "                        \"number\","]
#[doc = "                        \"f32\","]
#[doc = "                        \"f64\","]
#[doc = "                        \"i32\","]
#[doc = "                        \"i64\","]
#[doc = "                        \"u32\","]
#[doc = "                        \"u64\","]
#[doc = "                        \"uuid\","]
#[doc = "                        \"date-time\","]
#[doc = "                        \"duration\","]
#[doc = "                        \"object\","]
#[doc = "                        \"array\""]
#[doc = "                      ]"]
#[doc = "                    },"]
#[doc = "                    {"]
#[doc = "                      \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"required\": ["]
#[doc = "                        \"$ref\""]
#[doc = "                      ],"]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"$ref\": {"]
#[doc = "                          \"type\": \"string\""]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"additionalProperties\": false"]
#[doc = "                    }"]
#[doc = "                  ],"]
#[doc = "                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                },"]
#[doc = "                \"ui_label\": {"]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "            }"]
#[doc = "          ]"]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"physics_properties\": {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/base/PhysicsProperties.v1.schema.json\","]
#[doc = "      \"title\": \"Base Physics Properties\","]
#[doc = "      \"description\": \"Defines the common physics-related properties for components and laws.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"engine\","]
#[doc = "        \"is_quantum\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"collapse_sensitive\": {"]
#[doc = "          \"description\": \"Indicates if the object is affected by or triggers quantum collapse.\","]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        \"engine\": {"]
#[doc = "          \"description\": \"The physics engine responsible for this object.\","]
#[doc = "          \"enum\": ["]
#[doc = "            \"quantum\","]
#[doc = "            \"classical\","]
#[doc = "            \"hybrid\""]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        \"is_quantum\": {"]
#[doc = "          \"description\": \"Indicates if the object has quantum properties.\","]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "  \"physics_properties\": {"]
#[doc = "    \"engine\": \"quantum\","]
#[doc = "    \"is_quantum\": true"]
#[doc = "  },"]
#[doc = "  \"schema_version\": \"1.2.0\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct FilamentContentComponent {
    pub fields: FilamentContentFields,
    pub physics_properties: BasePhysicsProperties,
}
impl ::std::convert::From<&FilamentContentComponent> for FilamentContentComponent {
    fn from(value: &FilamentContentComponent) -> Self {
        value.clone()
    }
}
impl FilamentContentComponent {
    pub fn builder() -> builder::FilamentContentComponent {
        Default::default()
    }
}
#[doc = "A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"FilamentContentFields\","]
#[doc = "  \"description\": \"A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"abstraction_level\","]
#[doc = "    \"filament_type\","]
#[doc = "    \"narrative_description\","]
#[doc = "    \"source_threads_and_bonds\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"abstraction_level\": {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/types/physics/AbstractionLevel.v1.json\","]
#[doc = "      \"title\": \"Abstraction Level\","]
#[doc = "      \"description\": \"A canonical enum for the level of abstraction of a cognitive entity.\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"enum\": ["]
#[doc = "        \"Low\","]
#[doc = "        \"Medium\","]
#[doc = "        \"High\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"filament_type\": {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/types/physics/FilamentType.v1.json\","]
#[doc = "      \"title\": \"Filament Type\","]
#[doc = "      \"description\": \"A canonical enum of the types of high-level narratives a Filament can represent.\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"enum\": ["]
#[doc = "        \"PersonalityTrait\","]
#[doc = "        \"Worldview\","]
#[doc = "        \"Relationship_Pattern\","]
#[doc = "        \"Life_Theme\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"narrative_description\": {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "      \"title\": \"Description Field\","]
#[doc = "      \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "      \"default\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"source_threads_and_bonds\": {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/fields/SourceThreadsAndBonds.v1.json\","]
#[doc = "      \"title\": \"Source Threads and Bonds Field\","]
#[doc = "      \"description\": \"A list of Thread and Bond entity IDs that are the source for a derived cognitive entity like a Filament.\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"$id\": \"https://familiar.dev/schemas/fields/EntityId.v1.json\","]
#[doc = "        \"title\": \"Entity ID Field\","]
#[doc = "        \"description\": \"A reusable definition for a unique entity identifier.\","]
#[doc = "        \"type\": \"string\""]
#[doc = "      }"]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"patternProperties\": {"]
#[doc = "    \"^[a-z_][a-z0-9_]*$\": {"]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"description\": \"A direct reference to a shared definition in SharedDefinitions.schema.json.\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"required\": ["]
#[doc = "            \"$ref\""]
#[doc = "          ],"]
#[doc = "          \"properties\": {"]
#[doc = "            \"$ref\": {"]
#[doc = "              \"type\": \"string\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/base/Field.v1.schema.json\","]
#[doc = "          \"title\": \"Base Field\","]
#[doc = "          \"description\": \"Defines the structure for a single, inline field definition within a component.\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"required\": ["]
#[doc = "            \"description\","]
#[doc = "            \"type\""]
#[doc = "          ],"]
#[doc = "          \"properties\": {"]
#[doc = "            \"constraints\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "              \"title\": \"Constraint Definition\","]
#[doc = "              \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"properties\": {"]
#[doc = "                \"enum\": {"]
#[doc = "                  \"type\": \"array\","]
#[doc = "                  \"items\": {"]
#[doc = "                    \"type\": \"string\""]
#[doc = "                  }"]
#[doc = "                },"]
#[doc = "                \"maxLength\": {"]
#[doc = "                  \"type\": \"integer\""]
#[doc = "                },"]
#[doc = "                \"maximum\": {"]
#[doc = "                  \"type\": \"number\""]
#[doc = "                },"]
#[doc = "                \"minLength\": {"]
#[doc = "                  \"type\": \"integer\""]
#[doc = "                },"]
#[doc = "                \"minimum\": {"]
#[doc = "                  \"type\": \"number\""]
#[doc = "                },"]
#[doc = "                \"pattern\": {"]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"additionalProperties\": false"]
#[doc = "            },"]
#[doc = "            \"default_value\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "              \"title\": \"Any Value\","]
#[doc = "              \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "              \"type\": ["]
#[doc = "                \"string\","]
#[doc = "                \"number\","]
#[doc = "                \"integer\","]
#[doc = "                \"boolean\","]
#[doc = "                \"object\","]
#[doc = "                \"array\","]
#[doc = "                \"null\""]
#[doc = "              ]"]
#[doc = "            },"]
#[doc = "            \"description\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "              \"title\": \"Description Field\","]
#[doc = "              \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "              \"default\": \"\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"type\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "              \"title\": \"Base Type System\","]
#[doc = "              \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "              \"oneOf\": ["]
#[doc = "                {"]
#[doc = "                  \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "                  \"type\": \"string\","]
#[doc = "                  \"enum\": ["]
#[doc = "                    \"string\","]
#[doc = "                    \"boolean\","]
#[doc = "                    \"integer\","]
#[doc = "                    \"number\","]
#[doc = "                    \"f32\","]
#[doc = "                    \"f64\","]
#[doc = "                    \"i32\","]
#[doc = "                    \"i64\","]
#[doc = "                    \"u32\","]
#[doc = "                    \"u64\","]
#[doc = "                    \"uuid\","]
#[doc = "                    \"date-time\","]
#[doc = "                    \"duration\","]
#[doc = "                    \"object\","]
#[doc = "                    \"array\""]
#[doc = "                  ]"]
#[doc = "                },"]
#[doc = "                {"]
#[doc = "                  \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"$ref\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"$ref\": {"]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"additionalProperties\": false"]
#[doc = "                }"]
#[doc = "              ],"]
#[doc = "              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "            },"]
#[doc = "            \"ui_label\": {"]
#[doc = "              \"type\": \"string\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
pub struct FilamentContentFields {
    #[doc = "A canonical enum for the level of abstraction of a cognitive entity."]
    pub abstraction_level: AbstractionLevel,
    #[doc = "A canonical enum of the types of high-level narratives a Filament can represent."]
    pub filament_type: FilamentType,
    #[doc = "A canonical, reusable definition for a human-readable description field."]
    pub narrative_description: ::std::string::String,
    #[doc = "A list of Thread and Bond entity IDs that are the source for a derived cognitive entity like a Filament."]
    pub source_threads_and_bonds: ::std::vec::Vec<::std::string::String>,
}
impl ::std::convert::From<&FilamentContentFields> for FilamentContentFields {
    fn from(value: &FilamentContentFields) -> Self {
        value.clone()
    }
}
impl FilamentContentFields {
    pub fn builder() -> builder::FilamentContentFields {
        Default::default()
    }
}
#[doc = "`FilamentPhysicsState`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"FilamentPhysicsState\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"quantum\","]
#[doc = "    \"universal\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"quantum\": {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/components/QuantumState.v1.schema.json\","]
#[doc = "      \"title\": \"Quantum State Component\","]
#[doc = "      \"description\": \"Manages the quantum properties of an entity, including its superposition and entanglement.\","]
#[doc = "      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "      \"fields\": {"]
#[doc = "        \"coherence_score\": {"]
#[doc = "          \"description\": \"The purity of the quantum state (0.0 = maximally mixed, 1.0 = pure).\","]
#[doc = "          \"maximum\": 1.0,"]
#[doc = "          \"minimum\": 0.0,"]
#[doc = "          \"type\": \"number\""]
#[doc = "        },"]
#[doc = "        \"density_matrix\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/types/physics/DensityMatrix.v1.json\","]
#[doc = "          \"description\": \"A 2x2 matrix of complex numbers representing a quantum state.\","]
#[doc = "          \"items\": {"]
#[doc = "            \"items\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/types/physics/ComplexNumber.v1.json\","]
#[doc = "              \"description\": \"Represents a complex number with real and imaginary parts.\","]
#[doc = "              \"properties\": {"]
#[doc = "                \"imaginary\": {"]
#[doc = "                  \"type\": \"number\""]
#[doc = "                },"]
#[doc = "                \"real\": {"]
#[doc = "                  \"type\": \"number\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"required\": ["]
#[doc = "                \"real\","]
#[doc = "                \"imaginary\""]
#[doc = "              ],"]
#[doc = "              \"title\": \"Complex Number\","]
#[doc = "              \"type\": \"object\""]
#[doc = "            },"]
#[doc = "            \"maxItems\": 2,"]
#[doc = "            \"minItems\": 2,"]
#[doc = "            \"type\": \"array\""]
#[doc = "          },"]
#[doc = "          \"maxItems\": 2,"]
#[doc = "          \"minItems\": 2,"]
#[doc = "          \"title\": \"Density Matrix\","]
#[doc = "          \"type\": \"array\""]
#[doc = "        },"]
#[doc = "        \"entanglement_network\": {"]
#[doc = "          \"additionalProperties\": {"]
#[doc = "            \"maximum\": 1.0,"]
#[doc = "            \"minimum\": 0.0,"]
#[doc = "            \"type\": \"number\""]
#[doc = "          },"]
#[doc = "          \"type\": \"object\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"physics_properties\": {"]
#[doc = "        \"engine\": \"quantum\","]
#[doc = "        \"is_quantum\": true"]
#[doc = "      },"]
#[doc = "      \"schema_version\": \"1.0.0\""]
#[doc = "    },"]
#[doc = "    \"universal\": {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/components/UniversalPhysicsState.v1.schema.json\","]
#[doc = "      \"title\": \"Universal Physics State Component\","]
#[doc = "      \"description\": \"The transient, mutable physics state of an entity.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"properties\": {"]
#[doc = "        \"fields\": {"]
#[doc = "          \"title\": \"UniversalPhysicsStateFields\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"required\": ["]
#[doc = "            \"cognitive_perspective\","]
#[doc = "            \"consolidation_rate\","]
#[doc = "            \"decay_rate\","]
#[doc = "            \"energy\","]
#[doc = "            \"entanglement_strength\","]
#[doc = "            \"momentum\","]
#[doc = "            \"quantum_coherence\""]
#[doc = "          ],"]
#[doc = "          \"properties\": {"]
#[doc = "            \"cognitive_perspective\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/fields/CognitivePerspective.v1.schema.json\","]
#[doc = "              \"title\": \"Cognitive Perspective Field\","]
#[doc = "              \"description\": \"The intrinsic 'spin' or 'flavor' of the entity, which generates cognitive dissonance (torsion).\","]
#[doc = "              \"ui_label\": \"Cognitive Perspective\""]
#[doc = "            },"]
#[doc = "            \"consolidation_rate\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/snippets/fields/ConsolidationRate.v1.json\","]
#[doc = "              \"title\": \"Consolidation Rate Field\","]
#[doc = "              \"description\": \"The base rate of memory consolidation for an entity, before multipliers are applied. Represents how quickly an unstable memory becomes stable.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"value\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"value\": {"]
#[doc = "                  \"default\": 0.0,"]
#[doc = "                  \"type\": \"number\","]
#[doc = "                  \"format\": \"double\","]
#[doc = "                  \"maximum\": 1.0,"]
#[doc = "                  \"minimum\": 0.0,"]
#[doc = "                  \"x-python-type\": \"float\","]
#[doc = "                  \"x-rust-type\": \"f64\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"additionalProperties\": false"]
#[doc = "            },"]
#[doc = "            \"decay_rate\": {"]
#[doc = "              \"description\": \"The base rate of energy or coherence decay for an entity, before multipliers are applied.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"value\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"value\": {"]
#[doc = "                  \"default\": 0.01,"]
#[doc = "                  \"type\": \"number\","]
#[doc = "                  \"format\": \"double\","]
#[doc = "                  \"x-python-type\": \"float\","]
#[doc = "                  \"x-rust-type\": \"f64\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"additionalProperties\": false"]
#[doc = "            },"]
#[doc = "            \"energy\": {"]
#[doc = "              \"description\": \"The current energy level of an entity.\","]
#[doc = "              \"default\": 0.1,"]
#[doc = "              \"type\": \"number\""]
#[doc = "            },"]
#[doc = "            \"entanglement_strength\": {"]
#[doc = "              \"description\": \"The overall entanglement strength of this entity with others. Null for classical entities.\","]
#[doc = "              \"default\": null,"]
#[doc = "              \"type\": ["]
#[doc = "                \"number\","]
#[doc = "                \"null\""]
#[doc = "              ],"]
#[doc = "              \"maximum\": 1.0,"]
#[doc = "              \"minimum\": 0.0"]
#[doc = "            },"]
#[doc = "            \"momentum\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/types/physics/Vec6.v1.json\","]
#[doc = "              \"title\": \"6D Physics Vector\","]
#[doc = "              \"description\": \"A reusable data type for a vector of six f64 numbers, used for momentum and forces in the 6 spatial dimensions of the manifold.\","]
#[doc = "              \"type\": \"array\","]
#[doc = "              \"items\": {"]
#[doc = "                \"type\": \"number\""]
#[doc = "              },"]
#[doc = "              \"maxItems\": 6,"]
#[doc = "              \"minItems\": 6"]
#[doc = "            },"]
#[doc = "            \"quantum_coherence\": {"]
#[doc = "              \"description\": \"The quantum coherence level of the entity, representing its degree of superposition. Null for classical entities.\","]
#[doc = "              \"default\": null,"]
#[doc = "              \"type\": ["]
#[doc = "                \"number\","]
#[doc = "                \"null\""]
#[doc = "              ],"]
#[doc = "              \"maximum\": 1.0,"]
#[doc = "              \"minimum\": 0.0"]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "      \"schema_version\": \"3.0.0\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct FilamentPhysicsState {
    #[doc = "Manages the quantum properties of an entity, including its superposition and entanglement."]
    pub quantum: ::serde_json::Value,
    pub universal: UniversalPhysicsStateComponent,
}
impl ::std::convert::From<&FilamentPhysicsState> for FilamentPhysicsState {
    fn from(value: &FilamentPhysicsState) -> Self {
        value.clone()
    }
}
impl FilamentPhysicsState {
    pub fn builder() -> builder::FilamentPhysicsState {
        Default::default()
    }
}
#[doc = "A canonical enum of the types of high-level narratives a Filament can represent."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"$id\": \"https://familiar.dev/schemas/types/physics/FilamentType.v1.json\","]
#[doc = "  \"title\": \"Filament Type\","]
#[doc = "  \"description\": \"A canonical enum of the types of high-level narratives a Filament can represent.\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"PersonalityTrait\","]
#[doc = "    \"Worldview\","]
#[doc = "    \"Relationship_Pattern\","]
#[doc = "    \"Life_Theme\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum FilamentType {
    PersonalityTrait,
    Worldview,
    #[serde(rename = "Relationship_Pattern")]
    RelationshipPattern,
    #[serde(rename = "Life_Theme")]
    LifeTheme,
}
impl ::std::convert::From<&Self> for FilamentType {
    fn from(value: &FilamentType) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display for FilamentType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::PersonalityTrait => write!(f, "PersonalityTrait"),
            Self::Worldview => write!(f, "Worldview"),
            Self::RelationshipPattern => write!(f, "Relationship_Pattern"),
            Self::LifeTheme => write!(f, "Life_Theme"),
        }
    }
}
impl ::std::str::FromStr for FilamentType {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        match value {
            "PersonalityTrait" => Ok(Self::PersonalityTrait),
            "Worldview" => Ok(Self::Worldview),
            "Relationship_Pattern" => Ok(Self::RelationshipPattern),
            "Life_Theme" => Ok(Self::LifeTheme),
            _ => Err("invalid value".into()),
        }
    }
}
impl ::std::convert::TryFrom<&str> for FilamentType {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String> for FilamentType {
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String> for FilamentType {
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "Component references temporarily disabled for pipeline testing"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"FocusComponents\","]
#[doc = "  \"description\": \"Component references temporarily disabled for pipeline testing\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"content\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"_comment\": {"]
#[doc = "      \"description\": \"TODO: Re-enable component references when component schemas are available\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"content\": {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/components/FocusContent.v1.schema.json\","]
#[doc = "      \"title\": \"Focus Content Component\","]
#[doc = "      \"description\": \"Defines the content and scope of a thematic goal or focus.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"fields\","]
#[doc = "        \"physics_properties\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"fields\": {"]
#[doc = "          \"title\": \"BaseFields\","]
#[doc = "          \"description\": \"A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"patternProperties\": {"]
#[doc = "            \"^[a-z_][a-z0-9_]*$\": {"]
#[doc = "              \"oneOf\": ["]
#[doc = "                {"]
#[doc = "                  \"description\": \"A direct reference to a shared definition in SharedDefinitions.schema.json.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"$ref\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"$ref\": {"]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"additionalProperties\": false"]
#[doc = "                },"]
#[doc = "                {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/base/Field.v1.schema.json\","]
#[doc = "                  \"title\": \"Base Field\","]
#[doc = "                  \"description\": \"Defines the structure for a single, inline field definition within a component.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"description\","]
#[doc = "                    \"type\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"constraints\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "                      \"title\": \"Constraint Definition\","]
#[doc = "                      \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"enum\": {"]
#[doc = "                          \"type\": \"array\","]
#[doc = "                          \"items\": {"]
#[doc = "                            \"type\": \"string\""]
#[doc = "                          }"]
#[doc = "                        },"]
#[doc = "                        \"maxLength\": {"]
#[doc = "                          \"type\": \"integer\""]
#[doc = "                        },"]
#[doc = "                        \"maximum\": {"]
#[doc = "                          \"type\": \"number\""]
#[doc = "                        },"]
#[doc = "                        \"minLength\": {"]
#[doc = "                          \"type\": \"integer\""]
#[doc = "                        },"]
#[doc = "                        \"minimum\": {"]
#[doc = "                          \"type\": \"number\""]
#[doc = "                        },"]
#[doc = "                        \"pattern\": {"]
#[doc = "                          \"type\": \"string\""]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"additionalProperties\": false"]
#[doc = "                    },"]
#[doc = "                    \"default_value\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "                      \"title\": \"Any Value\","]
#[doc = "                      \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "                      \"type\": ["]
#[doc = "                        \"string\","]
#[doc = "                        \"number\","]
#[doc = "                        \"integer\","]
#[doc = "                        \"boolean\","]
#[doc = "                        \"object\","]
#[doc = "                        \"array\","]
#[doc = "                        \"null\""]
#[doc = "                      ]"]
#[doc = "                    },"]
#[doc = "                    \"description\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "                      \"title\": \"Description Field\","]
#[doc = "                      \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "                      \"default\": \"\","]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    },"]
#[doc = "                    \"type\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "                      \"title\": \"Base Type System\","]
#[doc = "                      \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "                      \"oneOf\": ["]
#[doc = "                        {"]
#[doc = "                          \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "                          \"type\": \"string\","]
#[doc = "                          \"enum\": ["]
#[doc = "                            \"string\","]
#[doc = "                            \"boolean\","]
#[doc = "                            \"integer\","]
#[doc = "                            \"number\","]
#[doc = "                            \"f32\","]
#[doc = "                            \"f64\","]
#[doc = "                            \"i32\","]
#[doc = "                            \"i64\","]
#[doc = "                            \"u32\","]
#[doc = "                            \"u64\","]
#[doc = "                            \"uuid\","]
#[doc = "                            \"date-time\","]
#[doc = "                            \"duration\","]
#[doc = "                            \"object\","]
#[doc = "                            \"array\""]
#[doc = "                          ]"]
#[doc = "                        },"]
#[doc = "                        {"]
#[doc = "                          \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "                          \"type\": \"object\","]
#[doc = "                          \"required\": ["]
#[doc = "                            \"$ref\""]
#[doc = "                          ],"]
#[doc = "                          \"properties\": {"]
#[doc = "                            \"$ref\": {"]
#[doc = "                              \"type\": \"string\""]
#[doc = "                            }"]
#[doc = "                          },"]
#[doc = "                          \"additionalProperties\": false"]
#[doc = "                        }"]
#[doc = "                      ],"]
#[doc = "                      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                    },"]
#[doc = "                    \"ui_label\": {"]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                }"]
#[doc = "              ]"]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        },"]
#[doc = "        \"physics_properties\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/base/PhysicsProperties.v1.schema.json\","]
#[doc = "          \"title\": \"Base Physics Properties\","]
#[doc = "          \"description\": \"Defines the common physics-related properties for components and laws.\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"required\": ["]
#[doc = "            \"engine\","]
#[doc = "            \"is_quantum\""]
#[doc = "          ],"]
#[doc = "          \"properties\": {"]
#[doc = "            \"collapse_sensitive\": {"]
#[doc = "              \"description\": \"Indicates if the object is affected by or triggers quantum collapse.\","]
#[doc = "              \"type\": \"boolean\""]
#[doc = "            },"]
#[doc = "            \"engine\": {"]
#[doc = "              \"description\": \"The physics engine responsible for this object.\","]
#[doc = "              \"enum\": ["]
#[doc = "                \"quantum\","]
#[doc = "                \"classical\","]
#[doc = "                \"hybrid\""]
#[doc = "              ]"]
#[doc = "            },"]
#[doc = "            \"is_quantum\": {"]
#[doc = "              \"description\": \"Indicates if the object has quantum properties.\","]
#[doc = "              \"type\": \"boolean\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "      \"fields\": {"]
#[doc = "        \"end_date\": {"]
#[doc = "          \"description\": \"When this focus is scheduled to end or be reviewed.\","]
#[doc = "          \"nullable\": true,"]
#[doc = "          \"type\": \"date-time\""]
#[doc = "        },"]
#[doc = "        \"scope\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/fields/TemporalScope.v1.json\","]
#[doc = "          \"description\": \"The temporal scope or duration of an entity or process.\","]
#[doc = "          \"enum\": ["]
#[doc = "            \"Daily\","]
#[doc = "            \"Weekly\","]
#[doc = "            \"Monthly\","]
#[doc = "            \"Quarterly\","]
#[doc = "            \"Yearly\","]
#[doc = "            \"Ongoing\""]
#[doc = "          ],"]
#[doc = "          \"title\": \"Temporal Scope Field\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"start_date\": {"]
#[doc = "          \"description\": \"When this focus becomes active.\","]
#[doc = "          \"type\": \"date-time\""]
#[doc = "        },"]
#[doc = "        \"theme\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/fields/Theme.v1.json\","]
#[doc = "          \"description\": \"A concise statement of a focus, goal, or pattern.\","]
#[doc = "          \"title\": \"Theme Field\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"physics_properties\": {"]
#[doc = "        \"engine\": \"quantum\","]
#[doc = "        \"is_quantum\": true"]
#[doc = "      },"]
#[doc = "      \"schema_version\": \"1.1.0\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct FocusComponents {
    #[doc = "TODO: Re-enable component references when component schemas are available"]
    #[serde(
        rename = "_comment",
        default,
        skip_serializing_if = "::std::option::Option::is_none"
    )]
    pub comment: ::std::option::Option<::std::string::String>,
    pub content: FocusContentComponent,
}
impl ::std::convert::From<&FocusComponents> for FocusComponents {
    fn from(value: &FocusComponents) -> Self {
        value.clone()
    }
}
impl FocusComponents {
    pub fn builder() -> builder::FocusComponents {
        Default::default()
    }
}
#[doc = "Defines the content and scope of a thematic goal or focus."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"$id\": \"https://familiar.dev/schemas/components/FocusContent.v1.schema.json\","]
#[doc = "  \"title\": \"Focus Content Component\","]
#[doc = "  \"description\": \"Defines the content and scope of a thematic goal or focus.\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"fields\","]
#[doc = "    \"physics_properties\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"fields\": {"]
#[doc = "      \"title\": \"BaseFields\","]
#[doc = "      \"description\": \"A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"patternProperties\": {"]
#[doc = "        \"^[a-z_][a-z0-9_]*$\": {"]
#[doc = "          \"oneOf\": ["]
#[doc = "            {"]
#[doc = "              \"description\": \"A direct reference to a shared definition in SharedDefinitions.schema.json.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"$ref\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"$ref\": {"]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"additionalProperties\": false"]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/base/Field.v1.schema.json\","]
#[doc = "              \"title\": \"Base Field\","]
#[doc = "              \"description\": \"Defines the structure for a single, inline field definition within a component.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"description\","]
#[doc = "                \"type\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"constraints\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "                  \"title\": \"Constraint Definition\","]
#[doc = "                  \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"enum\": {"]
#[doc = "                      \"type\": \"array\","]
#[doc = "                      \"items\": {"]
#[doc = "                        \"type\": \"string\""]
#[doc = "                      }"]
#[doc = "                    },"]
#[doc = "                    \"maxLength\": {"]
#[doc = "                      \"type\": \"integer\""]
#[doc = "                    },"]
#[doc = "                    \"maximum\": {"]
#[doc = "                      \"type\": \"number\""]
#[doc = "                    },"]
#[doc = "                    \"minLength\": {"]
#[doc = "                      \"type\": \"integer\""]
#[doc = "                    },"]
#[doc = "                    \"minimum\": {"]
#[doc = "                      \"type\": \"number\""]
#[doc = "                    },"]
#[doc = "                    \"pattern\": {"]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"additionalProperties\": false"]
#[doc = "                },"]
#[doc = "                \"default_value\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "                  \"title\": \"Any Value\","]
#[doc = "                  \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "                  \"type\": ["]
#[doc = "                    \"string\","]
#[doc = "                    \"number\","]
#[doc = "                    \"integer\","]
#[doc = "                    \"boolean\","]
#[doc = "                    \"object\","]
#[doc = "                    \"array\","]
#[doc = "                    \"null\""]
#[doc = "                  ]"]
#[doc = "                },"]
#[doc = "                \"description\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "                  \"title\": \"Description Field\","]
#[doc = "                  \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "                  \"default\": \"\","]
#[doc = "                  \"type\": \"string\""]
#[doc = "                },"]
#[doc = "                \"type\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "                  \"title\": \"Base Type System\","]
#[doc = "                  \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "                  \"oneOf\": ["]
#[doc = "                    {"]
#[doc = "                      \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "                      \"type\": \"string\","]
#[doc = "                      \"enum\": ["]
#[doc = "                        \"string\","]
#[doc = "                        \"boolean\","]
#[doc = "                        \"integer\","]
#[doc = "                        \"number\","]
#[doc = "                        \"f32\","]
#[doc = "                        \"f64\","]
#[doc = "                        \"i32\","]
#[doc = "                        \"i64\","]
#[doc = "                        \"u32\","]
#[doc = "                        \"u64\","]
#[doc = "                        \"uuid\","]
#[doc = "                        \"date-time\","]
#[doc = "                        \"duration\","]
#[doc = "                        \"object\","]
#[doc = "                        \"array\""]
#[doc = "                      ]"]
#[doc = "                    },"]
#[doc = "                    {"]
#[doc = "                      \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"required\": ["]
#[doc = "                        \"$ref\""]
#[doc = "                      ],"]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"$ref\": {"]
#[doc = "                          \"type\": \"string\""]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"additionalProperties\": false"]
#[doc = "                    }"]
#[doc = "                  ],"]
#[doc = "                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                },"]
#[doc = "                \"ui_label\": {"]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "            }"]
#[doc = "          ]"]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"physics_properties\": {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/base/PhysicsProperties.v1.schema.json\","]
#[doc = "      \"title\": \"Base Physics Properties\","]
#[doc = "      \"description\": \"Defines the common physics-related properties for components and laws.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"engine\","]
#[doc = "        \"is_quantum\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"collapse_sensitive\": {"]
#[doc = "          \"description\": \"Indicates if the object is affected by or triggers quantum collapse.\","]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        \"engine\": {"]
#[doc = "          \"description\": \"The physics engine responsible for this object.\","]
#[doc = "          \"enum\": ["]
#[doc = "            \"quantum\","]
#[doc = "            \"classical\","]
#[doc = "            \"hybrid\""]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        \"is_quantum\": {"]
#[doc = "          \"description\": \"Indicates if the object has quantum properties.\","]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "  \"fields\": {"]
#[doc = "    \"end_date\": {"]
#[doc = "      \"description\": \"When this focus is scheduled to end or be reviewed.\","]
#[doc = "      \"nullable\": true,"]
#[doc = "      \"type\": \"date-time\""]
#[doc = "    },"]
#[doc = "    \"scope\": {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/fields/TemporalScope.v1.json\","]
#[doc = "      \"description\": \"The temporal scope or duration of an entity or process.\","]
#[doc = "      \"enum\": ["]
#[doc = "        \"Daily\","]
#[doc = "        \"Weekly\","]
#[doc = "        \"Monthly\","]
#[doc = "        \"Quarterly\","]
#[doc = "        \"Yearly\","]
#[doc = "        \"Ongoing\""]
#[doc = "      ],"]
#[doc = "      \"title\": \"Temporal Scope Field\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"start_date\": {"]
#[doc = "      \"description\": \"When this focus becomes active.\","]
#[doc = "      \"type\": \"date-time\""]
#[doc = "    },"]
#[doc = "    \"theme\": {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/fields/Theme.v1.json\","]
#[doc = "      \"description\": \"A concise statement of a focus, goal, or pattern.\","]
#[doc = "      \"title\": \"Theme Field\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"physics_properties\": {"]
#[doc = "    \"engine\": \"quantum\","]
#[doc = "    \"is_quantum\": true"]
#[doc = "  },"]
#[doc = "  \"schema_version\": \"1.1.0\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct FocusContentComponent {
    #[doc = "A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition."]
    pub fields: ::std::collections::HashMap<
        FocusContentComponentFieldsKey,
        FocusContentComponentFieldsValue,
    >,
    pub physics_properties: BasePhysicsProperties,
}
impl ::std::convert::From<&FocusContentComponent> for FocusContentComponent {
    fn from(value: &FocusContentComponent) -> Self {
        value.clone()
    }
}
impl FocusContentComponent {
    pub fn builder() -> builder::FocusContentComponent {
        Default::default()
    }
}
#[doc = "`FocusContentComponentFieldsKey`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"pattern\": \"^[a-z_][a-z0-9_]*$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct FocusContentComponentFieldsKey(::std::string::String);
impl ::std::ops::Deref for FocusContentComponentFieldsKey {
    type Target = ::std::string::String;
    fn deref(&self) -> &::std::string::String {
        &self.0
    }
}
impl ::std::convert::From<FocusContentComponentFieldsKey> for ::std::string::String {
    fn from(value: FocusContentComponentFieldsKey) -> Self {
        value.0
    }
}
impl ::std::convert::From<&FocusContentComponentFieldsKey> for FocusContentComponentFieldsKey {
    fn from(value: &FocusContentComponentFieldsKey) -> Self {
        value.clone()
    }
}
impl ::std::str::FromStr for FocusContentComponentFieldsKey {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        static PATTERN: ::std::sync::LazyLock<::regress::Regex> =
            ::std::sync::LazyLock::new(|| ::regress::Regex::new("^[a-z_][a-z0-9_]*$").unwrap());
        if (&*PATTERN).find(value).is_none() {
            return Err("doesn't match pattern \"^[a-z_][a-z0-9_]*$\"".into());
        }
        Ok(Self(value.to_string()))
    }
}
impl ::std::convert::TryFrom<&str> for FocusContentComponentFieldsKey {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String> for FocusContentComponentFieldsKey {
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String> for FocusContentComponentFieldsKey {
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl<'de> ::serde::Deserialize<'de> for FocusContentComponentFieldsKey {
    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        ::std::string::String::deserialize(deserializer)?
            .parse()
            .map_err(|e: self::error::ConversionError| {
                <D::Error as ::serde::de::Error>::custom(e.to_string())
            })
    }
}
#[doc = "`FocusContentComponentFieldsValue`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"description\": \"A direct reference to a shared definition in SharedDefinitions.schema.json.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"$ref\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"$ref\": {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/base/Field.v1.schema.json\","]
#[doc = "      \"title\": \"Base Field\","]
#[doc = "      \"description\": \"Defines the structure for a single, inline field definition within a component.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"description\","]
#[doc = "        \"type\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"constraints\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "          \"title\": \"Constraint Definition\","]
#[doc = "          \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"properties\": {"]
#[doc = "            \"enum\": {"]
#[doc = "              \"type\": \"array\","]
#[doc = "              \"items\": {"]
#[doc = "                \"type\": \"string\""]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"maxLength\": {"]
#[doc = "              \"type\": \"integer\""]
#[doc = "            },"]
#[doc = "            \"maximum\": {"]
#[doc = "              \"type\": \"number\""]
#[doc = "            },"]
#[doc = "            \"minLength\": {"]
#[doc = "              \"type\": \"integer\""]
#[doc = "            },"]
#[doc = "            \"minimum\": {"]
#[doc = "              \"type\": \"number\""]
#[doc = "            },"]
#[doc = "            \"pattern\": {"]
#[doc = "              \"type\": \"string\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        },"]
#[doc = "        \"default_value\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "          \"title\": \"Any Value\","]
#[doc = "          \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "          \"type\": ["]
#[doc = "            \"string\","]
#[doc = "            \"number\","]
#[doc = "            \"integer\","]
#[doc = "            \"boolean\","]
#[doc = "            \"object\","]
#[doc = "            \"array\","]
#[doc = "            \"null\""]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        \"description\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "          \"title\": \"Description Field\","]
#[doc = "          \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "          \"default\": \"\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"type\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "          \"title\": \"Base Type System\","]
#[doc = "          \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "          \"oneOf\": ["]
#[doc = "            {"]
#[doc = "              \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "              \"type\": \"string\","]
#[doc = "              \"enum\": ["]
#[doc = "                \"string\","]
#[doc = "                \"boolean\","]
#[doc = "                \"integer\","]
#[doc = "                \"number\","]
#[doc = "                \"f32\","]
#[doc = "                \"f64\","]
#[doc = "                \"i32\","]
#[doc = "                \"i64\","]
#[doc = "                \"u32\","]
#[doc = "                \"u64\","]
#[doc = "                \"uuid\","]
#[doc = "                \"date-time\","]
#[doc = "                \"duration\","]
#[doc = "                \"object\","]
#[doc = "                \"array\""]
#[doc = "              ]"]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"$ref\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"$ref\": {"]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"additionalProperties\": false"]
#[doc = "            }"]
#[doc = "          ],"]
#[doc = "          \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "        },"]
#[doc = "        \"ui_label\": {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(untagged, deny_unknown_fields)]
pub enum FocusContentComponentFieldsValue {
    Variant0 {
        #[serde(rename = "$ref")]
        ref_: ::std::string::String,
    },
    Variant1 {
        #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
        constraints: ::std::option::Option<ConstraintDefinition>,
        #[doc = "Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values."]
        #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
        default_value: ::std::option::Option<::serde_json::Value>,
        #[doc = "A canonical, reusable definition for a human-readable description field."]
        description: ::std::string::String,
        #[doc = "The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema."]
        #[serde(rename = "type")]
        type_: BaseTypeSystem,
        #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
        ui_label: ::std::option::Option<::std::string::String>,
    },
}
impl ::std::convert::From<&Self> for FocusContentComponentFieldsValue {
    fn from(value: &FocusContentComponentFieldsValue) -> Self {
        value.clone()
    }
}
#[doc = "`FocusPhysicsState`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"FocusPhysicsState\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"quantum\","]
#[doc = "    \"universal\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"quantum\": {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/components/QuantumState.v1.schema.json\","]
#[doc = "      \"title\": \"Quantum State Component\","]
#[doc = "      \"description\": \"Manages the quantum properties of an entity, including its superposition and entanglement.\","]
#[doc = "      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "      \"fields\": {"]
#[doc = "        \"coherence_score\": {"]
#[doc = "          \"description\": \"The purity of the quantum state (0.0 = maximally mixed, 1.0 = pure).\","]
#[doc = "          \"maximum\": 1.0,"]
#[doc = "          \"minimum\": 0.0,"]
#[doc = "          \"type\": \"number\""]
#[doc = "        },"]
#[doc = "        \"density_matrix\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/types/physics/DensityMatrix.v1.json\","]
#[doc = "          \"description\": \"A 2x2 matrix of complex numbers representing a quantum state.\","]
#[doc = "          \"items\": {"]
#[doc = "            \"items\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/types/physics/ComplexNumber.v1.json\","]
#[doc = "              \"description\": \"Represents a complex number with real and imaginary parts.\","]
#[doc = "              \"properties\": {"]
#[doc = "                \"imaginary\": {"]
#[doc = "                  \"type\": \"number\""]
#[doc = "                },"]
#[doc = "                \"real\": {"]
#[doc = "                  \"type\": \"number\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"required\": ["]
#[doc = "                \"real\","]
#[doc = "                \"imaginary\""]
#[doc = "              ],"]
#[doc = "              \"title\": \"Complex Number\","]
#[doc = "              \"type\": \"object\""]
#[doc = "            },"]
#[doc = "            \"maxItems\": 2,"]
#[doc = "            \"minItems\": 2,"]
#[doc = "            \"type\": \"array\""]
#[doc = "          },"]
#[doc = "          \"maxItems\": 2,"]
#[doc = "          \"minItems\": 2,"]
#[doc = "          \"title\": \"Density Matrix\","]
#[doc = "          \"type\": \"array\""]
#[doc = "        },"]
#[doc = "        \"entanglement_network\": {"]
#[doc = "          \"additionalProperties\": {"]
#[doc = "            \"maximum\": 1.0,"]
#[doc = "            \"minimum\": 0.0,"]
#[doc = "            \"type\": \"number\""]
#[doc = "          },"]
#[doc = "          \"type\": \"object\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"physics_properties\": {"]
#[doc = "        \"engine\": \"quantum\","]
#[doc = "        \"is_quantum\": true"]
#[doc = "      },"]
#[doc = "      \"schema_version\": \"1.0.0\""]
#[doc = "    },"]
#[doc = "    \"universal\": {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/components/UniversalPhysicsState.v1.schema.json\","]
#[doc = "      \"title\": \"Universal Physics State Component\","]
#[doc = "      \"description\": \"The transient, mutable physics state of an entity.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"properties\": {"]
#[doc = "        \"fields\": {"]
#[doc = "          \"title\": \"UniversalPhysicsStateFields\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"required\": ["]
#[doc = "            \"cognitive_perspective\","]
#[doc = "            \"consolidation_rate\","]
#[doc = "            \"decay_rate\","]
#[doc = "            \"energy\","]
#[doc = "            \"entanglement_strength\","]
#[doc = "            \"momentum\","]
#[doc = "            \"quantum_coherence\""]
#[doc = "          ],"]
#[doc = "          \"properties\": {"]
#[doc = "            \"cognitive_perspective\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/fields/CognitivePerspective.v1.schema.json\","]
#[doc = "              \"title\": \"Cognitive Perspective Field\","]
#[doc = "              \"description\": \"The intrinsic 'spin' or 'flavor' of the entity, which generates cognitive dissonance (torsion).\","]
#[doc = "              \"ui_label\": \"Cognitive Perspective\""]
#[doc = "            },"]
#[doc = "            \"consolidation_rate\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/snippets/fields/ConsolidationRate.v1.json\","]
#[doc = "              \"title\": \"Consolidation Rate Field\","]
#[doc = "              \"description\": \"The base rate of memory consolidation for an entity, before multipliers are applied. Represents how quickly an unstable memory becomes stable.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"value\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"value\": {"]
#[doc = "                  \"default\": 0.0,"]
#[doc = "                  \"type\": \"number\","]
#[doc = "                  \"format\": \"double\","]
#[doc = "                  \"maximum\": 1.0,"]
#[doc = "                  \"minimum\": 0.0,"]
#[doc = "                  \"x-python-type\": \"float\","]
#[doc = "                  \"x-rust-type\": \"f64\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"additionalProperties\": false"]
#[doc = "            },"]
#[doc = "            \"decay_rate\": {"]
#[doc = "              \"description\": \"The base rate of energy or coherence decay for an entity, before multipliers are applied.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"value\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"value\": {"]
#[doc = "                  \"default\": 0.01,"]
#[doc = "                  \"type\": \"number\","]
#[doc = "                  \"format\": \"double\","]
#[doc = "                  \"x-python-type\": \"float\","]
#[doc = "                  \"x-rust-type\": \"f64\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"additionalProperties\": false"]
#[doc = "            },"]
#[doc = "            \"energy\": {"]
#[doc = "              \"description\": \"The current energy level of an entity.\","]
#[doc = "              \"default\": 0.1,"]
#[doc = "              \"type\": \"number\""]
#[doc = "            },"]
#[doc = "            \"entanglement_strength\": {"]
#[doc = "              \"description\": \"The overall entanglement strength of this entity with others. Null for classical entities.\","]
#[doc = "              \"default\": null,"]
#[doc = "              \"type\": ["]
#[doc = "                \"number\","]
#[doc = "                \"null\""]
#[doc = "              ],"]
#[doc = "              \"maximum\": 1.0,"]
#[doc = "              \"minimum\": 0.0"]
#[doc = "            },"]
#[doc = "            \"momentum\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/types/physics/Vec6.v1.json\","]
#[doc = "              \"title\": \"6D Physics Vector\","]
#[doc = "              \"description\": \"A reusable data type for a vector of six f64 numbers, used for momentum and forces in the 6 spatial dimensions of the manifold.\","]
#[doc = "              \"type\": \"array\","]
#[doc = "              \"items\": {"]
#[doc = "                \"type\": \"number\""]
#[doc = "              },"]
#[doc = "              \"maxItems\": 6,"]
#[doc = "              \"minItems\": 6"]
#[doc = "            },"]
#[doc = "            \"quantum_coherence\": {"]
#[doc = "              \"description\": \"The quantum coherence level of the entity, representing its degree of superposition. Null for classical entities.\","]
#[doc = "              \"default\": null,"]
#[doc = "              \"type\": ["]
#[doc = "                \"number\","]
#[doc = "                \"null\""]
#[doc = "              ],"]
#[doc = "              \"maximum\": 1.0,"]
#[doc = "              \"minimum\": 0.0"]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "      \"schema_version\": \"3.0.0\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct FocusPhysicsState {
    #[doc = "Manages the quantum properties of an entity, including its superposition and entanglement."]
    pub quantum: ::serde_json::Value,
    pub universal: UniversalPhysicsStateComponent,
}
impl ::std::convert::From<&FocusPhysicsState> for FocusPhysicsState {
    fn from(value: &FocusPhysicsState) -> Self {
        value.clone()
    }
}
impl FocusPhysicsState {
    pub fn builder() -> builder::FocusPhysicsState {
        Default::default()
    }
}
#[doc = "Tracks data provenance to enable compliant cascading deletions for GDPR's Right to Erasure."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"$id\": \"https://familiar.dev/schemas/components/GDPRDependency.v1.schema.json\","]
#[doc = "  \"title\": \"GDPR Dependency Component\","]
#[doc = "  \"description\": \"Tracks data provenance to enable compliant cascading deletions for GDPR's Right to Erasure.\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"fields\","]
#[doc = "    \"physics_properties\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"fields\": {"]
#[doc = "      \"title\": \"BaseFields\","]
#[doc = "      \"description\": \"A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"patternProperties\": {"]
#[doc = "        \"^[a-z_][a-z0-9_]*$\": {"]
#[doc = "          \"oneOf\": ["]
#[doc = "            {"]
#[doc = "              \"description\": \"A direct reference to a shared definition in SharedDefinitions.schema.json.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"$ref\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"$ref\": {"]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"additionalProperties\": false"]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/base/Field.v1.schema.json\","]
#[doc = "              \"title\": \"Base Field\","]
#[doc = "              \"description\": \"Defines the structure for a single, inline field definition within a component.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"description\","]
#[doc = "                \"type\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"constraints\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "                  \"title\": \"Constraint Definition\","]
#[doc = "                  \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"enum\": {"]
#[doc = "                      \"type\": \"array\","]
#[doc = "                      \"items\": {"]
#[doc = "                        \"type\": \"string\""]
#[doc = "                      }"]
#[doc = "                    },"]
#[doc = "                    \"maxLength\": {"]
#[doc = "                      \"type\": \"integer\""]
#[doc = "                    },"]
#[doc = "                    \"maximum\": {"]
#[doc = "                      \"type\": \"number\""]
#[doc = "                    },"]
#[doc = "                    \"minLength\": {"]
#[doc = "                      \"type\": \"integer\""]
#[doc = "                    },"]
#[doc = "                    \"minimum\": {"]
#[doc = "                      \"type\": \"number\""]
#[doc = "                    },"]
#[doc = "                    \"pattern\": {"]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"additionalProperties\": false"]
#[doc = "                },"]
#[doc = "                \"default_value\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "                  \"title\": \"Any Value\","]
#[doc = "                  \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "                  \"type\": ["]
#[doc = "                    \"string\","]
#[doc = "                    \"number\","]
#[doc = "                    \"integer\","]
#[doc = "                    \"boolean\","]
#[doc = "                    \"object\","]
#[doc = "                    \"array\","]
#[doc = "                    \"null\""]
#[doc = "                  ]"]
#[doc = "                },"]
#[doc = "                \"description\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "                  \"title\": \"Description Field\","]
#[doc = "                  \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "                  \"default\": \"\","]
#[doc = "                  \"type\": \"string\""]
#[doc = "                },"]
#[doc = "                \"type\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "                  \"title\": \"Base Type System\","]
#[doc = "                  \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "                  \"oneOf\": ["]
#[doc = "                    {"]
#[doc = "                      \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "                      \"type\": \"string\","]
#[doc = "                      \"enum\": ["]
#[doc = "                        \"string\","]
#[doc = "                        \"boolean\","]
#[doc = "                        \"integer\","]
#[doc = "                        \"number\","]
#[doc = "                        \"f32\","]
#[doc = "                        \"f64\","]
#[doc = "                        \"i32\","]
#[doc = "                        \"i64\","]
#[doc = "                        \"u32\","]
#[doc = "                        \"u64\","]
#[doc = "                        \"uuid\","]
#[doc = "                        \"date-time\","]
#[doc = "                        \"duration\","]
#[doc = "                        \"object\","]
#[doc = "                        \"array\""]
#[doc = "                      ]"]
#[doc = "                    },"]
#[doc = "                    {"]
#[doc = "                      \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"required\": ["]
#[doc = "                        \"$ref\""]
#[doc = "                      ],"]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"$ref\": {"]
#[doc = "                          \"type\": \"string\""]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"additionalProperties\": false"]
#[doc = "                    }"]
#[doc = "                  ],"]
#[doc = "                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                },"]
#[doc = "                \"ui_label\": {"]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "            }"]
#[doc = "          ]"]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"physics_properties\": {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/base/PhysicsProperties.v1.schema.json\","]
#[doc = "      \"title\": \"Base Physics Properties\","]
#[doc = "      \"description\": \"Defines the common physics-related properties for components and laws.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"engine\","]
#[doc = "        \"is_quantum\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"collapse_sensitive\": {"]
#[doc = "          \"description\": \"Indicates if the object is affected by or triggers quantum collapse.\","]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        \"engine\": {"]
#[doc = "          \"description\": \"The physics engine responsible for this object.\","]
#[doc = "          \"enum\": ["]
#[doc = "            \"quantum\","]
#[doc = "            \"classical\","]
#[doc = "            \"hybrid\""]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        \"is_quantum\": {"]
#[doc = "          \"description\": \"Indicates if the object has quantum properties.\","]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "  \"fields\": {"]
#[doc = "    \"contributing_users\": {"]
#[doc = "      \"description\": \"A set of User IDs whose data contributed to this entity's existence or state.\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"uuid\""]
#[doc = "      },"]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"uniqueItems\": true"]
#[doc = "    },"]
#[doc = "    \"upstream_dependencies\": {"]
#[doc = "      \"description\": \"A list of source entity IDs (e.g., Moments) that this entity (e.g., a Motif) depends on.\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"uuid\""]
#[doc = "      },"]
#[doc = "      \"type\": \"array\""]
#[doc = "    },"]
#[doc = "    \"user_evidence_weights\": {"]
#[doc = "      \"additionalProperties\": {"]
#[doc = "        \"maximum\": 1.0,"]
#[doc = "        \"minimum\": 0.0,"]
#[doc = "        \"type\": \"number\""]
#[doc = "      },"]
#[doc = "      \"type\": \"object\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"physics_properties\": {"]
#[doc = "    \"engine\": \"classical\","]
#[doc = "    \"is_quantum\": false"]
#[doc = "  },"]
#[doc = "  \"schema_version\": \"1.0.0\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct GdprDependencyComponent {
    #[doc = "A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition."]
    pub fields: ::std::collections::HashMap<
        GdprDependencyComponentFieldsKey,
        GdprDependencyComponentFieldsValue,
    >,
    pub physics_properties: BasePhysicsProperties,
}
impl ::std::convert::From<&GdprDependencyComponent> for GdprDependencyComponent {
    fn from(value: &GdprDependencyComponent) -> Self {
        value.clone()
    }
}
impl GdprDependencyComponent {
    pub fn builder() -> builder::GdprDependencyComponent {
        Default::default()
    }
}
#[doc = "`GdprDependencyComponentFieldsKey`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"pattern\": \"^[a-z_][a-z0-9_]*$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct GdprDependencyComponentFieldsKey(::std::string::String);
impl ::std::ops::Deref for GdprDependencyComponentFieldsKey {
    type Target = ::std::string::String;
    fn deref(&self) -> &::std::string::String {
        &self.0
    }
}
impl ::std::convert::From<GdprDependencyComponentFieldsKey> for ::std::string::String {
    fn from(value: GdprDependencyComponentFieldsKey) -> Self {
        value.0
    }
}
impl ::std::convert::From<&GdprDependencyComponentFieldsKey> for GdprDependencyComponentFieldsKey {
    fn from(value: &GdprDependencyComponentFieldsKey) -> Self {
        value.clone()
    }
}
impl ::std::str::FromStr for GdprDependencyComponentFieldsKey {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        static PATTERN: ::std::sync::LazyLock<::regress::Regex> =
            ::std::sync::LazyLock::new(|| ::regress::Regex::new("^[a-z_][a-z0-9_]*$").unwrap());
        if (&*PATTERN).find(value).is_none() {
            return Err("doesn't match pattern \"^[a-z_][a-z0-9_]*$\"".into());
        }
        Ok(Self(value.to_string()))
    }
}
impl ::std::convert::TryFrom<&str> for GdprDependencyComponentFieldsKey {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String> for GdprDependencyComponentFieldsKey {
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String> for GdprDependencyComponentFieldsKey {
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl<'de> ::serde::Deserialize<'de> for GdprDependencyComponentFieldsKey {
    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        ::std::string::String::deserialize(deserializer)?
            .parse()
            .map_err(|e: self::error::ConversionError| {
                <D::Error as ::serde::de::Error>::custom(e.to_string())
            })
    }
}
#[doc = "`GdprDependencyComponentFieldsValue`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"description\": \"A direct reference to a shared definition in SharedDefinitions.schema.json.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"$ref\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"$ref\": {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/base/Field.v1.schema.json\","]
#[doc = "      \"title\": \"Base Field\","]
#[doc = "      \"description\": \"Defines the structure for a single, inline field definition within a component.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"description\","]
#[doc = "        \"type\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"constraints\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "          \"title\": \"Constraint Definition\","]
#[doc = "          \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"properties\": {"]
#[doc = "            \"enum\": {"]
#[doc = "              \"type\": \"array\","]
#[doc = "              \"items\": {"]
#[doc = "                \"type\": \"string\""]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"maxLength\": {"]
#[doc = "              \"type\": \"integer\""]
#[doc = "            },"]
#[doc = "            \"maximum\": {"]
#[doc = "              \"type\": \"number\""]
#[doc = "            },"]
#[doc = "            \"minLength\": {"]
#[doc = "              \"type\": \"integer\""]
#[doc = "            },"]
#[doc = "            \"minimum\": {"]
#[doc = "              \"type\": \"number\""]
#[doc = "            },"]
#[doc = "            \"pattern\": {"]
#[doc = "              \"type\": \"string\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        },"]
#[doc = "        \"default_value\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "          \"title\": \"Any Value\","]
#[doc = "          \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "          \"type\": ["]
#[doc = "            \"string\","]
#[doc = "            \"number\","]
#[doc = "            \"integer\","]
#[doc = "            \"boolean\","]
#[doc = "            \"object\","]
#[doc = "            \"array\","]
#[doc = "            \"null\""]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        \"description\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "          \"title\": \"Description Field\","]
#[doc = "          \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "          \"default\": \"\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"type\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "          \"title\": \"Base Type System\","]
#[doc = "          \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "          \"oneOf\": ["]
#[doc = "            {"]
#[doc = "              \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "              \"type\": \"string\","]
#[doc = "              \"enum\": ["]
#[doc = "                \"string\","]
#[doc = "                \"boolean\","]
#[doc = "                \"integer\","]
#[doc = "                \"number\","]
#[doc = "                \"f32\","]
#[doc = "                \"f64\","]
#[doc = "                \"i32\","]
#[doc = "                \"i64\","]
#[doc = "                \"u32\","]
#[doc = "                \"u64\","]
#[doc = "                \"uuid\","]
#[doc = "                \"date-time\","]
#[doc = "                \"duration\","]
#[doc = "                \"object\","]
#[doc = "                \"array\""]
#[doc = "              ]"]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"$ref\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"$ref\": {"]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"additionalProperties\": false"]
#[doc = "            }"]
#[doc = "          ],"]
#[doc = "          \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "        },"]
#[doc = "        \"ui_label\": {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(untagged, deny_unknown_fields)]
pub enum GdprDependencyComponentFieldsValue {
    Variant0 {
        #[serde(rename = "$ref")]
        ref_: ::std::string::String,
    },
    Variant1 {
        #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
        constraints: ::std::option::Option<ConstraintDefinition>,
        #[doc = "Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values."]
        #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
        default_value: ::std::option::Option<::serde_json::Value>,
        #[doc = "A canonical, reusable definition for a human-readable description field."]
        description: ::std::string::String,
        #[doc = "The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema."]
        #[serde(rename = "type")]
        type_: BaseTypeSystem,
        #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
        ui_label: ::std::option::Option<::std::string::String>,
    },
}
impl ::std::convert::From<&Self> for GdprDependencyComponentFieldsValue {
    fn from(value: &GdprDependencyComponentFieldsValue) -> Self {
        value.clone()
    }
}
#[doc = "`GenericThreadPhysicsState`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"GenericThreadPhysicsState\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"universal\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"universal\": {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/components/UniversalPhysicsState.v1.schema.json\","]
#[doc = "      \"title\": \"Universal Physics State Component\","]
#[doc = "      \"description\": \"The transient, mutable physics state of an entity.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"properties\": {"]
#[doc = "        \"fields\": {"]
#[doc = "          \"title\": \"UniversalPhysicsStateFields\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"required\": ["]
#[doc = "            \"cognitive_perspective\","]
#[doc = "            \"consolidation_rate\","]
#[doc = "            \"decay_rate\","]
#[doc = "            \"energy\","]
#[doc = "            \"entanglement_strength\","]
#[doc = "            \"momentum\","]
#[doc = "            \"quantum_coherence\""]
#[doc = "          ],"]
#[doc = "          \"properties\": {"]
#[doc = "            \"cognitive_perspective\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/fields/CognitivePerspective.v1.schema.json\","]
#[doc = "              \"title\": \"Cognitive Perspective Field\","]
#[doc = "              \"description\": \"The intrinsic 'spin' or 'flavor' of the entity, which generates cognitive dissonance (torsion).\","]
#[doc = "              \"ui_label\": \"Cognitive Perspective\""]
#[doc = "            },"]
#[doc = "            \"consolidation_rate\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/snippets/fields/ConsolidationRate.v1.json\","]
#[doc = "              \"title\": \"Consolidation Rate Field\","]
#[doc = "              \"description\": \"The base rate of memory consolidation for an entity, before multipliers are applied. Represents how quickly an unstable memory becomes stable.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"value\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"value\": {"]
#[doc = "                  \"default\": 0.0,"]
#[doc = "                  \"type\": \"number\","]
#[doc = "                  \"format\": \"double\","]
#[doc = "                  \"maximum\": 1.0,"]
#[doc = "                  \"minimum\": 0.0,"]
#[doc = "                  \"x-python-type\": \"float\","]
#[doc = "                  \"x-rust-type\": \"f64\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"additionalProperties\": false"]
#[doc = "            },"]
#[doc = "            \"decay_rate\": {"]
#[doc = "              \"description\": \"The base rate of energy or coherence decay for an entity, before multipliers are applied.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"value\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"value\": {"]
#[doc = "                  \"default\": 0.01,"]
#[doc = "                  \"type\": \"number\","]
#[doc = "                  \"format\": \"double\","]
#[doc = "                  \"x-python-type\": \"float\","]
#[doc = "                  \"x-rust-type\": \"f64\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"additionalProperties\": false"]
#[doc = "            },"]
#[doc = "            \"energy\": {"]
#[doc = "              \"description\": \"The current energy level of an entity.\","]
#[doc = "              \"default\": 0.1,"]
#[doc = "              \"type\": \"number\""]
#[doc = "            },"]
#[doc = "            \"entanglement_strength\": {"]
#[doc = "              \"description\": \"The overall entanglement strength of this entity with others. Null for classical entities.\","]
#[doc = "              \"default\": null,"]
#[doc = "              \"type\": ["]
#[doc = "                \"number\","]
#[doc = "                \"null\""]
#[doc = "              ],"]
#[doc = "              \"maximum\": 1.0,"]
#[doc = "              \"minimum\": 0.0"]
#[doc = "            },"]
#[doc = "            \"momentum\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/types/physics/Vec6.v1.json\","]
#[doc = "              \"title\": \"6D Physics Vector\","]
#[doc = "              \"description\": \"A reusable data type for a vector of six f64 numbers, used for momentum and forces in the 6 spatial dimensions of the manifold.\","]
#[doc = "              \"type\": \"array\","]
#[doc = "              \"items\": {"]
#[doc = "                \"type\": \"number\""]
#[doc = "              },"]
#[doc = "              \"maxItems\": 6,"]
#[doc = "              \"minItems\": 6"]
#[doc = "            },"]
#[doc = "            \"quantum_coherence\": {"]
#[doc = "              \"description\": \"The quantum coherence level of the entity, representing its degree of superposition. Null for classical entities.\","]
#[doc = "              \"default\": null,"]
#[doc = "              \"type\": ["]
#[doc = "                \"number\","]
#[doc = "                \"null\""]
#[doc = "              ],"]
#[doc = "              \"maximum\": 1.0,"]
#[doc = "              \"minimum\": 0.0"]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "      \"schema_version\": \"3.0.0\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct GenericThreadPhysicsState {
    pub universal: UniversalPhysicsStateComponent,
}
impl ::std::convert::From<&GenericThreadPhysicsState> for GenericThreadPhysicsState {
    fn from(value: &GenericThreadPhysicsState) -> Self {
        value.clone()
    }
}
impl GenericThreadPhysicsState {
    pub fn builder() -> builder::GenericThreadPhysicsState {
        Default::default()
    }
}
#[doc = "Component references temporarily disabled for pipeline testing"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"IntentComponents\","]
#[doc = "  \"description\": \"Component references temporarily disabled for pipeline testing\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"content\","]
#[doc = "    \"status\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"_comment\": {"]
#[doc = "      \"description\": \"TODO: Re-enable component references when component schemas are available\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"content\": {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/components/IntentContent.v1.schema.json\","]
#[doc = "      \"title\": \"Intent Content Component\","]
#[doc = "      \"description\": \"Defines the content of a specific task or intention.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"fields\","]
#[doc = "        \"physics_properties\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"fields\": {"]
#[doc = "          \"title\": \"BaseFields\","]
#[doc = "          \"description\": \"A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"patternProperties\": {"]
#[doc = "            \"^[a-z_][a-z0-9_]*$\": {"]
#[doc = "              \"oneOf\": ["]
#[doc = "                {"]
#[doc = "                  \"description\": \"A direct reference to a shared definition in SharedDefinitions.schema.json.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"$ref\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"$ref\": {"]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"additionalProperties\": false"]
#[doc = "                },"]
#[doc = "                {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/base/Field.v1.schema.json\","]
#[doc = "                  \"title\": \"Base Field\","]
#[doc = "                  \"description\": \"Defines the structure for a single, inline field definition within a component.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"description\","]
#[doc = "                    \"type\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"constraints\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "                      \"title\": \"Constraint Definition\","]
#[doc = "                      \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"enum\": {"]
#[doc = "                          \"type\": \"array\","]
#[doc = "                          \"items\": {"]
#[doc = "                            \"type\": \"string\""]
#[doc = "                          }"]
#[doc = "                        },"]
#[doc = "                        \"maxLength\": {"]
#[doc = "                          \"type\": \"integer\""]
#[doc = "                        },"]
#[doc = "                        \"maximum\": {"]
#[doc = "                          \"type\": \"number\""]
#[doc = "                        },"]
#[doc = "                        \"minLength\": {"]
#[doc = "                          \"type\": \"integer\""]
#[doc = "                        },"]
#[doc = "                        \"minimum\": {"]
#[doc = "                          \"type\": \"number\""]
#[doc = "                        },"]
#[doc = "                        \"pattern\": {"]
#[doc = "                          \"type\": \"string\""]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"additionalProperties\": false"]
#[doc = "                    },"]
#[doc = "                    \"default_value\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "                      \"title\": \"Any Value\","]
#[doc = "                      \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "                      \"type\": ["]
#[doc = "                        \"string\","]
#[doc = "                        \"number\","]
#[doc = "                        \"integer\","]
#[doc = "                        \"boolean\","]
#[doc = "                        \"object\","]
#[doc = "                        \"array\","]
#[doc = "                        \"null\""]
#[doc = "                      ]"]
#[doc = "                    },"]
#[doc = "                    \"description\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "                      \"title\": \"Description Field\","]
#[doc = "                      \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "                      \"default\": \"\","]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    },"]
#[doc = "                    \"type\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "                      \"title\": \"Base Type System\","]
#[doc = "                      \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "                      \"oneOf\": ["]
#[doc = "                        {"]
#[doc = "                          \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "                          \"type\": \"string\","]
#[doc = "                          \"enum\": ["]
#[doc = "                            \"string\","]
#[doc = "                            \"boolean\","]
#[doc = "                            \"integer\","]
#[doc = "                            \"number\","]
#[doc = "                            \"f32\","]
#[doc = "                            \"f64\","]
#[doc = "                            \"i32\","]
#[doc = "                            \"i64\","]
#[doc = "                            \"u32\","]
#[doc = "                            \"u64\","]
#[doc = "                            \"uuid\","]
#[doc = "                            \"date-time\","]
#[doc = "                            \"duration\","]
#[doc = "                            \"object\","]
#[doc = "                            \"array\""]
#[doc = "                          ]"]
#[doc = "                        },"]
#[doc = "                        {"]
#[doc = "                          \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "                          \"type\": \"object\","]
#[doc = "                          \"required\": ["]
#[doc = "                            \"$ref\""]
#[doc = "                          ],"]
#[doc = "                          \"properties\": {"]
#[doc = "                            \"$ref\": {"]
#[doc = "                              \"type\": \"string\""]
#[doc = "                            }"]
#[doc = "                          },"]
#[doc = "                          \"additionalProperties\": false"]
#[doc = "                        }"]
#[doc = "                      ],"]
#[doc = "                      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                    },"]
#[doc = "                    \"ui_label\": {"]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                }"]
#[doc = "              ]"]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        },"]
#[doc = "        \"physics_properties\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/base/PhysicsProperties.v1.schema.json\","]
#[doc = "          \"title\": \"Base Physics Properties\","]
#[doc = "          \"description\": \"Defines the common physics-related properties for components and laws.\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"required\": ["]
#[doc = "            \"engine\","]
#[doc = "            \"is_quantum\""]
#[doc = "          ],"]
#[doc = "          \"properties\": {"]
#[doc = "            \"collapse_sensitive\": {"]
#[doc = "              \"description\": \"Indicates if the object is affected by or triggers quantum collapse.\","]
#[doc = "              \"type\": \"boolean\""]
#[doc = "            },"]
#[doc = "            \"engine\": {"]
#[doc = "              \"description\": \"The physics engine responsible for this object.\","]
#[doc = "              \"enum\": ["]
#[doc = "                \"quantum\","]
#[doc = "                \"classical\","]
#[doc = "                \"hybrid\""]
#[doc = "              ]"]
#[doc = "            },"]
#[doc = "            \"is_quantum\": {"]
#[doc = "              \"description\": \"Indicates if the object has quantum properties.\","]
#[doc = "              \"type\": \"boolean\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "      \"fields\": {"]
#[doc = "        \"description\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "          \"default\": \"\","]
#[doc = "          \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "          \"title\": \"Description Field\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"due_date\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/types/primitives/NullableTimestamp.v1.json\","]
#[doc = "          \"description\": \"A canonical definition for an optional ISO 8601 timestamp with timezone.\","]
#[doc = "          \"title\": \"Nullable Timestamp\","]
#[doc = "          \"type\": ["]
#[doc = "            \"string\","]
#[doc = "            \"null\""]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        \"priority\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/fields/Priority.v1.json\","]
#[doc = "          \"default\": \"Medium\","]
#[doc = "          \"description\": \"The user-assigned priority level.\","]
#[doc = "          \"enum\": ["]
#[doc = "            \"Low\","]
#[doc = "            \"Medium\","]
#[doc = "            \"High\","]
#[doc = "            \"Urgent\""]
#[doc = "          ],"]
#[doc = "          \"title\": \"Priority Field\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"physics_properties\": {"]
#[doc = "        \"engine\": \"classical\","]
#[doc = "        \"is_quantum\": false"]
#[doc = "      },"]
#[doc = "      \"schema_version\": \"1.1.0\""]
#[doc = "    },"]
#[doc = "    \"status\": {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/components/TaskStatus.v1.schema.json\","]
#[doc = "      \"title\": \"Task Status Component\","]
#[doc = "      \"description\": \"Tracks the completion status of an Intent.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"fields\","]
#[doc = "        \"physics_properties\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"fields\": {"]
#[doc = "          \"title\": \"BaseFields\","]
#[doc = "          \"description\": \"A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"patternProperties\": {"]
#[doc = "            \"^[a-z_][a-z0-9_]*$\": {"]
#[doc = "              \"oneOf\": ["]
#[doc = "                {"]
#[doc = "                  \"description\": \"A direct reference to a shared definition in SharedDefinitions.schema.json.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"$ref\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"$ref\": {"]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"additionalProperties\": false"]
#[doc = "                },"]
#[doc = "                {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/base/Field.v1.schema.json\","]
#[doc = "                  \"title\": \"Base Field\","]
#[doc = "                  \"description\": \"Defines the structure for a single, inline field definition within a component.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"description\","]
#[doc = "                    \"type\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"constraints\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "                      \"title\": \"Constraint Definition\","]
#[doc = "                      \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"enum\": {"]
#[doc = "                          \"type\": \"array\","]
#[doc = "                          \"items\": {"]
#[doc = "                            \"type\": \"string\""]
#[doc = "                          }"]
#[doc = "                        },"]
#[doc = "                        \"maxLength\": {"]
#[doc = "                          \"type\": \"integer\""]
#[doc = "                        },"]
#[doc = "                        \"maximum\": {"]
#[doc = "                          \"type\": \"number\""]
#[doc = "                        },"]
#[doc = "                        \"minLength\": {"]
#[doc = "                          \"type\": \"integer\""]
#[doc = "                        },"]
#[doc = "                        \"minimum\": {"]
#[doc = "                          \"type\": \"number\""]
#[doc = "                        },"]
#[doc = "                        \"pattern\": {"]
#[doc = "                          \"type\": \"string\""]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"additionalProperties\": false"]
#[doc = "                    },"]
#[doc = "                    \"default_value\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "                      \"title\": \"Any Value\","]
#[doc = "                      \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "                      \"type\": ["]
#[doc = "                        \"string\","]
#[doc = "                        \"number\","]
#[doc = "                        \"integer\","]
#[doc = "                        \"boolean\","]
#[doc = "                        \"object\","]
#[doc = "                        \"array\","]
#[doc = "                        \"null\""]
#[doc = "                      ]"]
#[doc = "                    },"]
#[doc = "                    \"description\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "                      \"title\": \"Description Field\","]
#[doc = "                      \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "                      \"default\": \"\","]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    },"]
#[doc = "                    \"type\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "                      \"title\": \"Base Type System\","]
#[doc = "                      \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "                      \"oneOf\": ["]
#[doc = "                        {"]
#[doc = "                          \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "                          \"type\": \"string\","]
#[doc = "                          \"enum\": ["]
#[doc = "                            \"string\","]
#[doc = "                            \"boolean\","]
#[doc = "                            \"integer\","]
#[doc = "                            \"number\","]
#[doc = "                            \"f32\","]
#[doc = "                            \"f64\","]
#[doc = "                            \"i32\","]
#[doc = "                            \"i64\","]
#[doc = "                            \"u32\","]
#[doc = "                            \"u64\","]
#[doc = "                            \"uuid\","]
#[doc = "                            \"date-time\","]
#[doc = "                            \"duration\","]
#[doc = "                            \"object\","]
#[doc = "                            \"array\""]
#[doc = "                          ]"]
#[doc = "                        },"]
#[doc = "                        {"]
#[doc = "                          \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "                          \"type\": \"object\","]
#[doc = "                          \"required\": ["]
#[doc = "                            \"$ref\""]
#[doc = "                          ],"]
#[doc = "                          \"properties\": {"]
#[doc = "                            \"$ref\": {"]
#[doc = "                              \"type\": \"string\""]
#[doc = "                            }"]
#[doc = "                          },"]
#[doc = "                          \"additionalProperties\": false"]
#[doc = "                        }"]
#[doc = "                      ],"]
#[doc = "                      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                    },"]
#[doc = "                    \"ui_label\": {"]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                }"]
#[doc = "              ]"]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        },"]
#[doc = "        \"physics_properties\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/base/PhysicsProperties.v1.schema.json\","]
#[doc = "          \"title\": \"Base Physics Properties\","]
#[doc = "          \"description\": \"Defines the common physics-related properties for components and laws.\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"required\": ["]
#[doc = "            \"engine\","]
#[doc = "            \"is_quantum\""]
#[doc = "          ],"]
#[doc = "          \"properties\": {"]
#[doc = "            \"collapse_sensitive\": {"]
#[doc = "              \"description\": \"Indicates if the object is affected by or triggers quantum collapse.\","]
#[doc = "              \"type\": \"boolean\""]
#[doc = "            },"]
#[doc = "            \"engine\": {"]
#[doc = "              \"description\": \"The physics engine responsible for this object.\","]
#[doc = "              \"enum\": ["]
#[doc = "                \"quantum\","]
#[doc = "                \"classical\","]
#[doc = "                \"hybrid\""]
#[doc = "              ]"]
#[doc = "            },"]
#[doc = "            \"is_quantum\": {"]
#[doc = "              \"description\": \"Indicates if the object has quantum properties.\","]
#[doc = "              \"type\": \"boolean\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "      \"fields\": {"]
#[doc = "        \"completed_at\": {"]
#[doc = "          \"description\": \"The timestamp when the task was marked as completed. This triggers its consumption into a Moment.\","]
#[doc = "          \"nullable\": true,"]
#[doc = "          \"type\": \"date-time\""]
#[doc = "        },"]
#[doc = "        \"status\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/fields/Status.v1.json\","]
#[doc = "          \"default\": \"Pending\","]
#[doc = "          \"description\": \"The current status of a task or process.\","]
#[doc = "          \"enum\": ["]
#[doc = "            \"Pending\","]
#[doc = "            \"InProgress\","]
#[doc = "            \"Completed\","]
#[doc = "            \"Cancelled\""]
#[doc = "          ],"]
#[doc = "          \"title\": \"Status Field\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"physics_properties\": {"]
#[doc = "        \"engine\": \"classical\","]
#[doc = "        \"is_quantum\": false"]
#[doc = "      },"]
#[doc = "      \"schema_version\": \"1.1.0\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct IntentComponents {
    #[doc = "TODO: Re-enable component references when component schemas are available"]
    #[serde(
        rename = "_comment",
        default,
        skip_serializing_if = "::std::option::Option::is_none"
    )]
    pub comment: ::std::option::Option<::std::string::String>,
    pub content: IntentContentComponent,
    pub status: TaskStatusComponent,
}
impl ::std::convert::From<&IntentComponents> for IntentComponents {
    fn from(value: &IntentComponents) -> Self {
        value.clone()
    }
}
impl IntentComponents {
    pub fn builder() -> builder::IntentComponents {
        Default::default()
    }
}
#[doc = "Defines the content of a specific task or intention."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"$id\": \"https://familiar.dev/schemas/components/IntentContent.v1.schema.json\","]
#[doc = "  \"title\": \"Intent Content Component\","]
#[doc = "  \"description\": \"Defines the content of a specific task or intention.\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"fields\","]
#[doc = "    \"physics_properties\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"fields\": {"]
#[doc = "      \"title\": \"BaseFields\","]
#[doc = "      \"description\": \"A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"patternProperties\": {"]
#[doc = "        \"^[a-z_][a-z0-9_]*$\": {"]
#[doc = "          \"oneOf\": ["]
#[doc = "            {"]
#[doc = "              \"description\": \"A direct reference to a shared definition in SharedDefinitions.schema.json.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"$ref\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"$ref\": {"]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"additionalProperties\": false"]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/base/Field.v1.schema.json\","]
#[doc = "              \"title\": \"Base Field\","]
#[doc = "              \"description\": \"Defines the structure for a single, inline field definition within a component.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"description\","]
#[doc = "                \"type\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"constraints\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "                  \"title\": \"Constraint Definition\","]
#[doc = "                  \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"enum\": {"]
#[doc = "                      \"type\": \"array\","]
#[doc = "                      \"items\": {"]
#[doc = "                        \"type\": \"string\""]
#[doc = "                      }"]
#[doc = "                    },"]
#[doc = "                    \"maxLength\": {"]
#[doc = "                      \"type\": \"integer\""]
#[doc = "                    },"]
#[doc = "                    \"maximum\": {"]
#[doc = "                      \"type\": \"number\""]
#[doc = "                    },"]
#[doc = "                    \"minLength\": {"]
#[doc = "                      \"type\": \"integer\""]
#[doc = "                    },"]
#[doc = "                    \"minimum\": {"]
#[doc = "                      \"type\": \"number\""]
#[doc = "                    },"]
#[doc = "                    \"pattern\": {"]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"additionalProperties\": false"]
#[doc = "                },"]
#[doc = "                \"default_value\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "                  \"title\": \"Any Value\","]
#[doc = "                  \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "                  \"type\": ["]
#[doc = "                    \"string\","]
#[doc = "                    \"number\","]
#[doc = "                    \"integer\","]
#[doc = "                    \"boolean\","]
#[doc = "                    \"object\","]
#[doc = "                    \"array\","]
#[doc = "                    \"null\""]
#[doc = "                  ]"]
#[doc = "                },"]
#[doc = "                \"description\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "                  \"title\": \"Description Field\","]
#[doc = "                  \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "                  \"default\": \"\","]
#[doc = "                  \"type\": \"string\""]
#[doc = "                },"]
#[doc = "                \"type\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "                  \"title\": \"Base Type System\","]
#[doc = "                  \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "                  \"oneOf\": ["]
#[doc = "                    {"]
#[doc = "                      \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "                      \"type\": \"string\","]
#[doc = "                      \"enum\": ["]
#[doc = "                        \"string\","]
#[doc = "                        \"boolean\","]
#[doc = "                        \"integer\","]
#[doc = "                        \"number\","]
#[doc = "                        \"f32\","]
#[doc = "                        \"f64\","]
#[doc = "                        \"i32\","]
#[doc = "                        \"i64\","]
#[doc = "                        \"u32\","]
#[doc = "                        \"u64\","]
#[doc = "                        \"uuid\","]
#[doc = "                        \"date-time\","]
#[doc = "                        \"duration\","]
#[doc = "                        \"object\","]
#[doc = "                        \"array\""]
#[doc = "                      ]"]
#[doc = "                    },"]
#[doc = "                    {"]
#[doc = "                      \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"required\": ["]
#[doc = "                        \"$ref\""]
#[doc = "                      ],"]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"$ref\": {"]
#[doc = "                          \"type\": \"string\""]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"additionalProperties\": false"]
#[doc = "                    }"]
#[doc = "                  ],"]
#[doc = "                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                },"]
#[doc = "                \"ui_label\": {"]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "            }"]
#[doc = "          ]"]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"physics_properties\": {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/base/PhysicsProperties.v1.schema.json\","]
#[doc = "      \"title\": \"Base Physics Properties\","]
#[doc = "      \"description\": \"Defines the common physics-related properties for components and laws.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"engine\","]
#[doc = "        \"is_quantum\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"collapse_sensitive\": {"]
#[doc = "          \"description\": \"Indicates if the object is affected by or triggers quantum collapse.\","]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        \"engine\": {"]
#[doc = "          \"description\": \"The physics engine responsible for this object.\","]
#[doc = "          \"enum\": ["]
#[doc = "            \"quantum\","]
#[doc = "            \"classical\","]
#[doc = "            \"hybrid\""]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        \"is_quantum\": {"]
#[doc = "          \"description\": \"Indicates if the object has quantum properties.\","]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "  \"fields\": {"]
#[doc = "    \"description\": {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "      \"default\": \"\","]
#[doc = "      \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "      \"title\": \"Description Field\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"due_date\": {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/types/primitives/NullableTimestamp.v1.json\","]
#[doc = "      \"description\": \"A canonical definition for an optional ISO 8601 timestamp with timezone.\","]
#[doc = "      \"title\": \"Nullable Timestamp\","]
#[doc = "      \"type\": ["]
#[doc = "        \"string\","]
#[doc = "        \"null\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"priority\": {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/fields/Priority.v1.json\","]
#[doc = "      \"default\": \"Medium\","]
#[doc = "      \"description\": \"The user-assigned priority level.\","]
#[doc = "      \"enum\": ["]
#[doc = "        \"Low\","]
#[doc = "        \"Medium\","]
#[doc = "        \"High\","]
#[doc = "        \"Urgent\""]
#[doc = "      ],"]
#[doc = "      \"title\": \"Priority Field\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"physics_properties\": {"]
#[doc = "    \"engine\": \"classical\","]
#[doc = "    \"is_quantum\": false"]
#[doc = "  },"]
#[doc = "  \"schema_version\": \"1.1.0\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct IntentContentComponent {
    #[doc = "A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition."]
    pub fields: ::std::collections::HashMap<
        IntentContentComponentFieldsKey,
        IntentContentComponentFieldsValue,
    >,
    pub physics_properties: BasePhysicsProperties,
}
impl ::std::convert::From<&IntentContentComponent> for IntentContentComponent {
    fn from(value: &IntentContentComponent) -> Self {
        value.clone()
    }
}
impl IntentContentComponent {
    pub fn builder() -> builder::IntentContentComponent {
        Default::default()
    }
}
#[doc = "`IntentContentComponentFieldsKey`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"pattern\": \"^[a-z_][a-z0-9_]*$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct IntentContentComponentFieldsKey(::std::string::String);
impl ::std::ops::Deref for IntentContentComponentFieldsKey {
    type Target = ::std::string::String;
    fn deref(&self) -> &::std::string::String {
        &self.0
    }
}
impl ::std::convert::From<IntentContentComponentFieldsKey> for ::std::string::String {
    fn from(value: IntentContentComponentFieldsKey) -> Self {
        value.0
    }
}
impl ::std::convert::From<&IntentContentComponentFieldsKey> for IntentContentComponentFieldsKey {
    fn from(value: &IntentContentComponentFieldsKey) -> Self {
        value.clone()
    }
}
impl ::std::str::FromStr for IntentContentComponentFieldsKey {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        static PATTERN: ::std::sync::LazyLock<::regress::Regex> =
            ::std::sync::LazyLock::new(|| ::regress::Regex::new("^[a-z_][a-z0-9_]*$").unwrap());
        if (&*PATTERN).find(value).is_none() {
            return Err("doesn't match pattern \"^[a-z_][a-z0-9_]*$\"".into());
        }
        Ok(Self(value.to_string()))
    }
}
impl ::std::convert::TryFrom<&str> for IntentContentComponentFieldsKey {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String> for IntentContentComponentFieldsKey {
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String> for IntentContentComponentFieldsKey {
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl<'de> ::serde::Deserialize<'de> for IntentContentComponentFieldsKey {
    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        ::std::string::String::deserialize(deserializer)?
            .parse()
            .map_err(|e: self::error::ConversionError| {
                <D::Error as ::serde::de::Error>::custom(e.to_string())
            })
    }
}
#[doc = "`IntentContentComponentFieldsValue`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"description\": \"A direct reference to a shared definition in SharedDefinitions.schema.json.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"$ref\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"$ref\": {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/base/Field.v1.schema.json\","]
#[doc = "      \"title\": \"Base Field\","]
#[doc = "      \"description\": \"Defines the structure for a single, inline field definition within a component.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"description\","]
#[doc = "        \"type\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"constraints\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "          \"title\": \"Constraint Definition\","]
#[doc = "          \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"properties\": {"]
#[doc = "            \"enum\": {"]
#[doc = "              \"type\": \"array\","]
#[doc = "              \"items\": {"]
#[doc = "                \"type\": \"string\""]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"maxLength\": {"]
#[doc = "              \"type\": \"integer\""]
#[doc = "            },"]
#[doc = "            \"maximum\": {"]
#[doc = "              \"type\": \"number\""]
#[doc = "            },"]
#[doc = "            \"minLength\": {"]
#[doc = "              \"type\": \"integer\""]
#[doc = "            },"]
#[doc = "            \"minimum\": {"]
#[doc = "              \"type\": \"number\""]
#[doc = "            },"]
#[doc = "            \"pattern\": {"]
#[doc = "              \"type\": \"string\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        },"]
#[doc = "        \"default_value\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "          \"title\": \"Any Value\","]
#[doc = "          \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "          \"type\": ["]
#[doc = "            \"string\","]
#[doc = "            \"number\","]
#[doc = "            \"integer\","]
#[doc = "            \"boolean\","]
#[doc = "            \"object\","]
#[doc = "            \"array\","]
#[doc = "            \"null\""]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        \"description\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "          \"title\": \"Description Field\","]
#[doc = "          \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "          \"default\": \"\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"type\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "          \"title\": \"Base Type System\","]
#[doc = "          \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "          \"oneOf\": ["]
#[doc = "            {"]
#[doc = "              \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "              \"type\": \"string\","]
#[doc = "              \"enum\": ["]
#[doc = "                \"string\","]
#[doc = "                \"boolean\","]
#[doc = "                \"integer\","]
#[doc = "                \"number\","]
#[doc = "                \"f32\","]
#[doc = "                \"f64\","]
#[doc = "                \"i32\","]
#[doc = "                \"i64\","]
#[doc = "                \"u32\","]
#[doc = "                \"u64\","]
#[doc = "                \"uuid\","]
#[doc = "                \"date-time\","]
#[doc = "                \"duration\","]
#[doc = "                \"object\","]
#[doc = "                \"array\""]
#[doc = "              ]"]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"$ref\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"$ref\": {"]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"additionalProperties\": false"]
#[doc = "            }"]
#[doc = "          ],"]
#[doc = "          \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "        },"]
#[doc = "        \"ui_label\": {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(untagged, deny_unknown_fields)]
pub enum IntentContentComponentFieldsValue {
    Variant0 {
        #[serde(rename = "$ref")]
        ref_: ::std::string::String,
    },
    Variant1 {
        #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
        constraints: ::std::option::Option<ConstraintDefinition>,
        #[doc = "Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values."]
        #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
        default_value: ::std::option::Option<::serde_json::Value>,
        #[doc = "A canonical, reusable definition for a human-readable description field."]
        description: ::std::string::String,
        #[doc = "The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema."]
        #[serde(rename = "type")]
        type_: BaseTypeSystem,
        #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
        ui_label: ::std::option::Option<::std::string::String>,
    },
}
impl ::std::convert::From<&Self> for IntentContentComponentFieldsValue {
    fn from(value: &IntentContentComponentFieldsValue) -> Self {
        value.clone()
    }
}
#[doc = "`IntentPhysicsState`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"IntentPhysicsState\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"manifold_position\","]
#[doc = "    \"universal\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"manifold_position\": {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/components/MemoryManifoldPosition.v1.schema.json\","]
#[doc = "      \"title\": \"Memory Manifold Position Component\","]
#[doc = "      \"description\": \"The entity's position in the 7D cognitive manifold, enforcing quantized spatial coordinates (Rule 8).\","]
#[doc = "      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "      \"fields\": {"]
#[doc = "        \"autobiographical_coordinate\": {"]
#[doc = "          \"description\": \"Quantized coordinate for External <-> Self-related.\","]
#[doc = "          \"type\": \"integer\""]
#[doc = "        },"]
#[doc = "        \"coherence_coordinate\": {"]
#[doc = "          \"description\": \"Quantized coordinate for Fragmented <-> Unified.\","]
#[doc = "          \"type\": \"integer\""]
#[doc = "        },"]
#[doc = "        \"emotional_coordinate\": {"]
#[doc = "          \"description\": \"Quantized coordinate for Negative <-> Positive.\","]
#[doc = "          \"type\": \"integer\""]
#[doc = "        },"]
#[doc = "        \"episodic_coordinate\": {"]
#[doc = "          \"description\": \"Quantized coordinate for General <-> Specific.\","]
#[doc = "          \"type\": \"integer\""]
#[doc = "        },"]
#[doc = "        \"salience_coordinate\": {"]
#[doc = "          \"description\": \"Quantized coordinate for Background <-> Foreground.\","]
#[doc = "          \"type\": \"integer\""]
#[doc = "        },"]
#[doc = "        \"semantic_coordinate\": {"]
#[doc = "          \"description\": \"Quantized coordinate for Abstract <-> Concrete.\","]
#[doc = "          \"type\": \"integer\""]
#[doc = "        },"]
#[doc = "        \"temporal_coordinate\": {"]
#[doc = "          \"description\": \"Continuous time coordinate (t <= 0).\","]
#[doc = "          \"maximum\": 0,"]
#[doc = "          \"type\": \"number\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"physics_properties\": {"]
#[doc = "        \"engine\": \"classical\","]
#[doc = "        \"is_quantum\": false"]
#[doc = "      },"]
#[doc = "      \"schema_version\": \"1.0.0\""]
#[doc = "    },"]
#[doc = "    \"universal\": {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/components/UniversalPhysicsState.v1.schema.json\","]
#[doc = "      \"title\": \"Universal Physics State Component\","]
#[doc = "      \"description\": \"The transient, mutable physics state of an entity.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"properties\": {"]
#[doc = "        \"fields\": {"]
#[doc = "          \"title\": \"UniversalPhysicsStateFields\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"required\": ["]
#[doc = "            \"cognitive_perspective\","]
#[doc = "            \"consolidation_rate\","]
#[doc = "            \"decay_rate\","]
#[doc = "            \"energy\","]
#[doc = "            \"entanglement_strength\","]
#[doc = "            \"momentum\","]
#[doc = "            \"quantum_coherence\""]
#[doc = "          ],"]
#[doc = "          \"properties\": {"]
#[doc = "            \"cognitive_perspective\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/fields/CognitivePerspective.v1.schema.json\","]
#[doc = "              \"title\": \"Cognitive Perspective Field\","]
#[doc = "              \"description\": \"The intrinsic 'spin' or 'flavor' of the entity, which generates cognitive dissonance (torsion).\","]
#[doc = "              \"ui_label\": \"Cognitive Perspective\""]
#[doc = "            },"]
#[doc = "            \"consolidation_rate\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/snippets/fields/ConsolidationRate.v1.json\","]
#[doc = "              \"title\": \"Consolidation Rate Field\","]
#[doc = "              \"description\": \"The base rate of memory consolidation for an entity, before multipliers are applied. Represents how quickly an unstable memory becomes stable.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"value\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"value\": {"]
#[doc = "                  \"default\": 0.0,"]
#[doc = "                  \"type\": \"number\","]
#[doc = "                  \"format\": \"double\","]
#[doc = "                  \"maximum\": 1.0,"]
#[doc = "                  \"minimum\": 0.0,"]
#[doc = "                  \"x-python-type\": \"float\","]
#[doc = "                  \"x-rust-type\": \"f64\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"additionalProperties\": false"]
#[doc = "            },"]
#[doc = "            \"decay_rate\": {"]
#[doc = "              \"description\": \"The base rate of energy or coherence decay for an entity, before multipliers are applied.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"value\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"value\": {"]
#[doc = "                  \"default\": 0.01,"]
#[doc = "                  \"type\": \"number\","]
#[doc = "                  \"format\": \"double\","]
#[doc = "                  \"x-python-type\": \"float\","]
#[doc = "                  \"x-rust-type\": \"f64\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"additionalProperties\": false"]
#[doc = "            },"]
#[doc = "            \"energy\": {"]
#[doc = "              \"description\": \"The current energy level of an entity.\","]
#[doc = "              \"default\": 0.1,"]
#[doc = "              \"type\": \"number\""]
#[doc = "            },"]
#[doc = "            \"entanglement_strength\": {"]
#[doc = "              \"description\": \"The overall entanglement strength of this entity with others. Null for classical entities.\","]
#[doc = "              \"default\": null,"]
#[doc = "              \"type\": ["]
#[doc = "                \"number\","]
#[doc = "                \"null\""]
#[doc = "              ],"]
#[doc = "              \"maximum\": 1.0,"]
#[doc = "              \"minimum\": 0.0"]
#[doc = "            },"]
#[doc = "            \"momentum\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/types/physics/Vec6.v1.json\","]
#[doc = "              \"title\": \"6D Physics Vector\","]
#[doc = "              \"description\": \"A reusable data type for a vector of six f64 numbers, used for momentum and forces in the 6 spatial dimensions of the manifold.\","]
#[doc = "              \"type\": \"array\","]
#[doc = "              \"items\": {"]
#[doc = "                \"type\": \"number\""]
#[doc = "              },"]
#[doc = "              \"maxItems\": 6,"]
#[doc = "              \"minItems\": 6"]
#[doc = "            },"]
#[doc = "            \"quantum_coherence\": {"]
#[doc = "              \"description\": \"The quantum coherence level of the entity, representing its degree of superposition. Null for classical entities.\","]
#[doc = "              \"default\": null,"]
#[doc = "              \"type\": ["]
#[doc = "                \"number\","]
#[doc = "                \"null\""]
#[doc = "              ],"]
#[doc = "              \"maximum\": 1.0,"]
#[doc = "              \"minimum\": 0.0"]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "      \"schema_version\": \"3.0.0\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct IntentPhysicsState {
    #[doc = "The entity's position in the 7D cognitive manifold, enforcing quantized spatial coordinates (Rule 8)."]
    pub manifold_position: ::serde_json::Value,
    pub universal: UniversalPhysicsStateComponent,
}
impl ::std::convert::From<&IntentPhysicsState> for IntentPhysicsState {
    fn from(value: &IntentPhysicsState) -> Self {
        value.clone()
    }
}
impl IntentPhysicsState {
    pub fn builder() -> builder::IntentPhysicsState {
        Default::default()
    }
}
#[doc = "The entity's position in the 7D cognitive manifold, enforcing quantized spatial coordinates (Rule 8)."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"$id\": \"https://familiar.dev/schemas/components/MemoryManifoldPosition.v1.schema.json\","]
#[doc = "  \"title\": \"Memory Manifold Position Component\","]
#[doc = "  \"description\": \"The entity's position in the 7D cognitive manifold, enforcing quantized spatial coordinates (Rule 8).\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"fields\","]
#[doc = "    \"physics_properties\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"fields\": {"]
#[doc = "      \"title\": \"BaseFields\","]
#[doc = "      \"description\": \"A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"patternProperties\": {"]
#[doc = "        \"^[a-z_][a-z0-9_]*$\": {"]
#[doc = "          \"oneOf\": ["]
#[doc = "            {"]
#[doc = "              \"description\": \"A direct reference to a shared definition in SharedDefinitions.schema.json.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"$ref\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"$ref\": {"]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"additionalProperties\": false"]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/base/Field.v1.schema.json\","]
#[doc = "              \"title\": \"Base Field\","]
#[doc = "              \"description\": \"Defines the structure for a single, inline field definition within a component.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"description\","]
#[doc = "                \"type\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"constraints\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "                  \"title\": \"Constraint Definition\","]
#[doc = "                  \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"enum\": {"]
#[doc = "                      \"type\": \"array\","]
#[doc = "                      \"items\": {"]
#[doc = "                        \"type\": \"string\""]
#[doc = "                      }"]
#[doc = "                    },"]
#[doc = "                    \"maxLength\": {"]
#[doc = "                      \"type\": \"integer\""]
#[doc = "                    },"]
#[doc = "                    \"maximum\": {"]
#[doc = "                      \"type\": \"number\""]
#[doc = "                    },"]
#[doc = "                    \"minLength\": {"]
#[doc = "                      \"type\": \"integer\""]
#[doc = "                    },"]
#[doc = "                    \"minimum\": {"]
#[doc = "                      \"type\": \"number\""]
#[doc = "                    },"]
#[doc = "                    \"pattern\": {"]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"additionalProperties\": false"]
#[doc = "                },"]
#[doc = "                \"default_value\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "                  \"title\": \"Any Value\","]
#[doc = "                  \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "                  \"type\": ["]
#[doc = "                    \"string\","]
#[doc = "                    \"number\","]
#[doc = "                    \"integer\","]
#[doc = "                    \"boolean\","]
#[doc = "                    \"object\","]
#[doc = "                    \"array\","]
#[doc = "                    \"null\""]
#[doc = "                  ]"]
#[doc = "                },"]
#[doc = "                \"description\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "                  \"title\": \"Description Field\","]
#[doc = "                  \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "                  \"default\": \"\","]
#[doc = "                  \"type\": \"string\""]
#[doc = "                },"]
#[doc = "                \"type\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "                  \"title\": \"Base Type System\","]
#[doc = "                  \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "                  \"oneOf\": ["]
#[doc = "                    {"]
#[doc = "                      \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "                      \"type\": \"string\","]
#[doc = "                      \"enum\": ["]
#[doc = "                        \"string\","]
#[doc = "                        \"boolean\","]
#[doc = "                        \"integer\","]
#[doc = "                        \"number\","]
#[doc = "                        \"f32\","]
#[doc = "                        \"f64\","]
#[doc = "                        \"i32\","]
#[doc = "                        \"i64\","]
#[doc = "                        \"u32\","]
#[doc = "                        \"u64\","]
#[doc = "                        \"uuid\","]
#[doc = "                        \"date-time\","]
#[doc = "                        \"duration\","]
#[doc = "                        \"object\","]
#[doc = "                        \"array\""]
#[doc = "                      ]"]
#[doc = "                    },"]
#[doc = "                    {"]
#[doc = "                      \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"required\": ["]
#[doc = "                        \"$ref\""]
#[doc = "                      ],"]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"$ref\": {"]
#[doc = "                          \"type\": \"string\""]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"additionalProperties\": false"]
#[doc = "                    }"]
#[doc = "                  ],"]
#[doc = "                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                },"]
#[doc = "                \"ui_label\": {"]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "            }"]
#[doc = "          ]"]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"physics_properties\": {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/base/PhysicsProperties.v1.schema.json\","]
#[doc = "      \"title\": \"Base Physics Properties\","]
#[doc = "      \"description\": \"Defines the common physics-related properties for components and laws.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"engine\","]
#[doc = "        \"is_quantum\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"collapse_sensitive\": {"]
#[doc = "          \"description\": \"Indicates if the object is affected by or triggers quantum collapse.\","]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        \"engine\": {"]
#[doc = "          \"description\": \"The physics engine responsible for this object.\","]
#[doc = "          \"enum\": ["]
#[doc = "            \"quantum\","]
#[doc = "            \"classical\","]
#[doc = "            \"hybrid\""]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        \"is_quantum\": {"]
#[doc = "          \"description\": \"Indicates if the object has quantum properties.\","]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "  \"fields\": {"]
#[doc = "    \"autobiographical_coordinate\": {"]
#[doc = "      \"description\": \"Quantized coordinate for External <-> Self-related.\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"coherence_coordinate\": {"]
#[doc = "      \"description\": \"Quantized coordinate for Fragmented <-> Unified.\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"emotional_coordinate\": {"]
#[doc = "      \"description\": \"Quantized coordinate for Negative <-> Positive.\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"episodic_coordinate\": {"]
#[doc = "      \"description\": \"Quantized coordinate for General <-> Specific.\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"salience_coordinate\": {"]
#[doc = "      \"description\": \"Quantized coordinate for Background <-> Foreground.\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"semantic_coordinate\": {"]
#[doc = "      \"description\": \"Quantized coordinate for Abstract <-> Concrete.\","]
#[doc = "      \"type\": \"integer\""]
#[doc = "    },"]
#[doc = "    \"temporal_coordinate\": {"]
#[doc = "      \"description\": \"Continuous time coordinate (t <= 0).\","]
#[doc = "      \"maximum\": 0,"]
#[doc = "      \"type\": \"number\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"physics_properties\": {"]
#[doc = "    \"engine\": \"classical\","]
#[doc = "    \"is_quantum\": false"]
#[doc = "  },"]
#[doc = "  \"schema_version\": \"1.0.0\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct MemoryManifoldPositionComponent {
    #[doc = "A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition."]
    pub fields: ::std::collections::HashMap<
        MemoryManifoldPositionComponentFieldsKey,
        MemoryManifoldPositionComponentFieldsValue,
    >,
    pub physics_properties: BasePhysicsProperties,
}
impl ::std::convert::From<&MemoryManifoldPositionComponent> for MemoryManifoldPositionComponent {
    fn from(value: &MemoryManifoldPositionComponent) -> Self {
        value.clone()
    }
}
impl MemoryManifoldPositionComponent {
    pub fn builder() -> builder::MemoryManifoldPositionComponent {
        Default::default()
    }
}
#[doc = "`MemoryManifoldPositionComponentFieldsKey`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"pattern\": \"^[a-z_][a-z0-9_]*$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct MemoryManifoldPositionComponentFieldsKey(::std::string::String);
impl ::std::ops::Deref for MemoryManifoldPositionComponentFieldsKey {
    type Target = ::std::string::String;
    fn deref(&self) -> &::std::string::String {
        &self.0
    }
}
impl ::std::convert::From<MemoryManifoldPositionComponentFieldsKey> for ::std::string::String {
    fn from(value: MemoryManifoldPositionComponentFieldsKey) -> Self {
        value.0
    }
}
impl ::std::convert::From<&MemoryManifoldPositionComponentFieldsKey>
    for MemoryManifoldPositionComponentFieldsKey
{
    fn from(value: &MemoryManifoldPositionComponentFieldsKey) -> Self {
        value.clone()
    }
}
impl ::std::str::FromStr for MemoryManifoldPositionComponentFieldsKey {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        static PATTERN: ::std::sync::LazyLock<::regress::Regex> =
            ::std::sync::LazyLock::new(|| ::regress::Regex::new("^[a-z_][a-z0-9_]*$").unwrap());
        if (&*PATTERN).find(value).is_none() {
            return Err("doesn't match pattern \"^[a-z_][a-z0-9_]*$\"".into());
        }
        Ok(Self(value.to_string()))
    }
}
impl ::std::convert::TryFrom<&str> for MemoryManifoldPositionComponentFieldsKey {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String> for MemoryManifoldPositionComponentFieldsKey {
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String> for MemoryManifoldPositionComponentFieldsKey {
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl<'de> ::serde::Deserialize<'de> for MemoryManifoldPositionComponentFieldsKey {
    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        ::std::string::String::deserialize(deserializer)?
            .parse()
            .map_err(|e: self::error::ConversionError| {
                <D::Error as ::serde::de::Error>::custom(e.to_string())
            })
    }
}
#[doc = "`MemoryManifoldPositionComponentFieldsValue`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"description\": \"A direct reference to a shared definition in SharedDefinitions.schema.json.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"$ref\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"$ref\": {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/base/Field.v1.schema.json\","]
#[doc = "      \"title\": \"Base Field\","]
#[doc = "      \"description\": \"Defines the structure for a single, inline field definition within a component.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"description\","]
#[doc = "        \"type\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"constraints\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "          \"title\": \"Constraint Definition\","]
#[doc = "          \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"properties\": {"]
#[doc = "            \"enum\": {"]
#[doc = "              \"type\": \"array\","]
#[doc = "              \"items\": {"]
#[doc = "                \"type\": \"string\""]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"maxLength\": {"]
#[doc = "              \"type\": \"integer\""]
#[doc = "            },"]
#[doc = "            \"maximum\": {"]
#[doc = "              \"type\": \"number\""]
#[doc = "            },"]
#[doc = "            \"minLength\": {"]
#[doc = "              \"type\": \"integer\""]
#[doc = "            },"]
#[doc = "            \"minimum\": {"]
#[doc = "              \"type\": \"number\""]
#[doc = "            },"]
#[doc = "            \"pattern\": {"]
#[doc = "              \"type\": \"string\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        },"]
#[doc = "        \"default_value\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "          \"title\": \"Any Value\","]
#[doc = "          \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "          \"type\": ["]
#[doc = "            \"string\","]
#[doc = "            \"number\","]
#[doc = "            \"integer\","]
#[doc = "            \"boolean\","]
#[doc = "            \"object\","]
#[doc = "            \"array\","]
#[doc = "            \"null\""]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        \"description\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "          \"title\": \"Description Field\","]
#[doc = "          \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "          \"default\": \"\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"type\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "          \"title\": \"Base Type System\","]
#[doc = "          \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "          \"oneOf\": ["]
#[doc = "            {"]
#[doc = "              \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "              \"type\": \"string\","]
#[doc = "              \"enum\": ["]
#[doc = "                \"string\","]
#[doc = "                \"boolean\","]
#[doc = "                \"integer\","]
#[doc = "                \"number\","]
#[doc = "                \"f32\","]
#[doc = "                \"f64\","]
#[doc = "                \"i32\","]
#[doc = "                \"i64\","]
#[doc = "                \"u32\","]
#[doc = "                \"u64\","]
#[doc = "                \"uuid\","]
#[doc = "                \"date-time\","]
#[doc = "                \"duration\","]
#[doc = "                \"object\","]
#[doc = "                \"array\""]
#[doc = "              ]"]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"$ref\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"$ref\": {"]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"additionalProperties\": false"]
#[doc = "            }"]
#[doc = "          ],"]
#[doc = "          \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "        },"]
#[doc = "        \"ui_label\": {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(untagged, deny_unknown_fields)]
pub enum MemoryManifoldPositionComponentFieldsValue {
    Variant0 {
        #[serde(rename = "$ref")]
        ref_: ::std::string::String,
    },
    Variant1 {
        #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
        constraints: ::std::option::Option<ConstraintDefinition>,
        #[doc = "Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values."]
        #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
        default_value: ::std::option::Option<::serde_json::Value>,
        #[doc = "A canonical, reusable definition for a human-readable description field."]
        description: ::std::string::String,
        #[doc = "The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema."]
        #[serde(rename = "type")]
        type_: BaseTypeSystem,
        #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
        ui_label: ::std::option::Option<::std::string::String>,
    },
}
impl ::std::convert::From<&Self> for MemoryManifoldPositionComponentFieldsValue {
    fn from(value: &MemoryManifoldPositionComponentFieldsValue) -> Self {
        value.clone()
    }
}
#[doc = "Component references temporarily disabled for pipeline testing"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"MomentComponents\","]
#[doc = "  \"description\": \"Component references temporarily disabled for pipeline testing\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"content\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"_comment\": {"]
#[doc = "      \"description\": \"TODO: Re-enable component references when component schemas are available\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"content\": {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/components/MomentContent.v1.schema.json\","]
#[doc = "      \"title\": \"Moment Content Component\","]
#[doc = "      \"description\": \"Defines the objective, factual content of a Moment entity, representing a specific event in time.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"description\","]
#[doc = "        \"fields\","]
#[doc = "        \"physics_properties\","]
#[doc = "        \"schema_version\","]
#[doc = "        \"title\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"description\": {"]
#[doc = "          \"description\": \"A clear, complete sentence explaining the object's purpose and function within the system.\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"fields\": {"]
#[doc = "          \"title\": \"MomentContentFields\","]
#[doc = "          \"description\": \"A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"required\": ["]
#[doc = "            \"description\","]
#[doc = "            \"moment_type\""]
#[doc = "          ],"]
#[doc = "          \"properties\": {"]
#[doc = "            \"description\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "              \"title\": \"Description Field\","]
#[doc = "              \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "              \"default\": \"\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"moment_type\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/types/classification/MomentType.v1.json\","]
#[doc = "              \"title\": \"Moment Type\","]
#[doc = "              \"description\": \"A canonical enum for the classification of a Moment entity's content.\","]
#[doc = "              \"type\": \"string\","]
#[doc = "              \"enum\": ["]
#[doc = "                \"Event\","]
#[doc = "                \"Experience\","]
#[doc = "                \"Observation\","]
#[doc = "                \"Interaction\""]
#[doc = "              ]"]
#[doc = "            },"]
#[doc = "            \"objective_facts\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/types/StringValueMap.v1.json\","]
#[doc = "              \"title\": \"String Value Map\","]
#[doc = "              \"description\": \"A generic key-value map where keys are strings and values can be any JSON type. Used for flexible data structures like parameters or metadata.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"patternProperties\": {"]
#[doc = "                \"^[a-zA-Z0-9_]+$\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "                  \"title\": \"Any Value\","]
#[doc = "                  \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "                  \"type\": ["]
#[doc = "                    \"string\","]
#[doc = "                    \"number\","]
#[doc = "                    \"integer\","]
#[doc = "                    \"boolean\","]
#[doc = "                    \"object\","]
#[doc = "                    \"array\","]
#[doc = "                    \"null\""]
#[doc = "                  ]"]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"additionalProperties\": false"]
#[doc = "            },"]
#[doc = "            \"participants\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/types/primitives/EntityIdList.v1.json\","]
#[doc = "              \"title\": \"Entity ID List\","]
#[doc = "              \"description\": \"A canonical definition for a list of unique entity identifiers (UUIDs).\","]
#[doc = "              \"type\": \"array\","]
#[doc = "              \"items\": {"]
#[doc = "                \"type\": \"string\""]
#[doc = "              },"]
#[doc = "              \"uniqueItems\": true"]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"patternProperties\": {"]
#[doc = "            \"^[a-z_][a-z0-9_]*$\": {"]
#[doc = "              \"oneOf\": ["]
#[doc = "                {"]
#[doc = "                  \"description\": \"A direct reference to a shared definition in SharedDefinitions.schema.json.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"$ref\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"$ref\": {"]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"additionalProperties\": false"]
#[doc = "                },"]
#[doc = "                {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/base/Field.v1.schema.json\","]
#[doc = "                  \"title\": \"Base Field\","]
#[doc = "                  \"description\": \"Defines the structure for a single, inline field definition within a component.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"description\","]
#[doc = "                    \"type\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"constraints\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "                      \"title\": \"Constraint Definition\","]
#[doc = "                      \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"enum\": {"]
#[doc = "                          \"type\": \"array\","]
#[doc = "                          \"items\": {"]
#[doc = "                            \"type\": \"string\""]
#[doc = "                          }"]
#[doc = "                        },"]
#[doc = "                        \"maxLength\": {"]
#[doc = "                          \"type\": \"integer\""]
#[doc = "                        },"]
#[doc = "                        \"maximum\": {"]
#[doc = "                          \"type\": \"number\""]
#[doc = "                        },"]
#[doc = "                        \"minLength\": {"]
#[doc = "                          \"type\": \"integer\""]
#[doc = "                        },"]
#[doc = "                        \"minimum\": {"]
#[doc = "                          \"type\": \"number\""]
#[doc = "                        },"]
#[doc = "                        \"pattern\": {"]
#[doc = "                          \"type\": \"string\""]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"additionalProperties\": false"]
#[doc = "                    },"]
#[doc = "                    \"default_value\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "                      \"title\": \"Any Value\","]
#[doc = "                      \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "                      \"type\": ["]
#[doc = "                        \"string\","]
#[doc = "                        \"number\","]
#[doc = "                        \"integer\","]
#[doc = "                        \"boolean\","]
#[doc = "                        \"object\","]
#[doc = "                        \"array\","]
#[doc = "                        \"null\""]
#[doc = "                      ]"]
#[doc = "                    },"]
#[doc = "                    \"description\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "                      \"title\": \"Description Field\","]
#[doc = "                      \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "                      \"default\": \"\","]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    },"]
#[doc = "                    \"type\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "                      \"title\": \"Base Type System\","]
#[doc = "                      \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "                      \"oneOf\": ["]
#[doc = "                        {"]
#[doc = "                          \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "                          \"type\": \"string\","]
#[doc = "                          \"enum\": ["]
#[doc = "                            \"string\","]
#[doc = "                            \"boolean\","]
#[doc = "                            \"integer\","]
#[doc = "                            \"number\","]
#[doc = "                            \"f32\","]
#[doc = "                            \"f64\","]
#[doc = "                            \"i32\","]
#[doc = "                            \"i64\","]
#[doc = "                            \"u32\","]
#[doc = "                            \"u64\","]
#[doc = "                            \"uuid\","]
#[doc = "                            \"date-time\","]
#[doc = "                            \"duration\","]
#[doc = "                            \"object\","]
#[doc = "                            \"array\""]
#[doc = "                          ]"]
#[doc = "                        },"]
#[doc = "                        {"]
#[doc = "                          \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "                          \"type\": \"object\","]
#[doc = "                          \"required\": ["]
#[doc = "                            \"$ref\""]
#[doc = "                          ],"]
#[doc = "                          \"properties\": {"]
#[doc = "                            \"$ref\": {"]
#[doc = "                              \"type\": \"string\""]
#[doc = "                            }"]
#[doc = "                          },"]
#[doc = "                          \"additionalProperties\": false"]
#[doc = "                        }"]
#[doc = "                      ],"]
#[doc = "                      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                    },"]
#[doc = "                    \"ui_label\": {"]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                }"]
#[doc = "              ]"]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        },"]
#[doc = "        \"physics_properties\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/base/PhysicsProperties.v1.schema.json\","]
#[doc = "          \"title\": \"Base Physics Properties\","]
#[doc = "          \"description\": \"Defines the common physics-related properties for components and laws.\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"required\": ["]
#[doc = "            \"engine\","]
#[doc = "            \"is_quantum\""]
#[doc = "          ],"]
#[doc = "          \"properties\": {"]
#[doc = "            \"collapse_sensitive\": {"]
#[doc = "              \"description\": \"Indicates if the object is affected by or triggers quantum collapse.\","]
#[doc = "              \"type\": \"boolean\""]
#[doc = "            },"]
#[doc = "            \"engine\": {"]
#[doc = "              \"description\": \"The physics engine responsible for this object.\","]
#[doc = "              \"enum\": ["]
#[doc = "                \"quantum\","]
#[doc = "                \"classical\","]
#[doc = "                \"hybrid\""]
#[doc = "              ]"]
#[doc = "            },"]
#[doc = "            \"is_quantum\": {"]
#[doc = "              \"description\": \"Indicates if the object has quantum properties.\","]
#[doc = "              \"type\": \"boolean\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "        },"]
#[doc = "        \"schema_version\": {"]
#[doc = "          \"description\": \"The semantic version of this schema definition (e.g., '1.0.0').\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"title\": {"]
#[doc = "          \"description\": \"The human-readable, PascalCase name of the object (e.g., 'UniversalPhysicsState').\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "      \"physics_properties\": {"]
#[doc = "        \"engine\": \"classical\","]
#[doc = "        \"is_quantum\": false"]
#[doc = "      },"]
#[doc = "      \"schema_version\": \"1.3.0\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct MomentComponents {
    #[doc = "TODO: Re-enable component references when component schemas are available"]
    #[serde(
        rename = "_comment",
        default,
        skip_serializing_if = "::std::option::Option::is_none"
    )]
    pub comment: ::std::option::Option<::std::string::String>,
    pub content: MomentContentComponent,
}
impl ::std::convert::From<&MomentComponents> for MomentComponents {
    fn from(value: &MomentComponents) -> Self {
        value.clone()
    }
}
impl MomentComponents {
    pub fn builder() -> builder::MomentComponents {
        Default::default()
    }
}
#[doc = "Defines the objective, factual content of a Moment entity, representing a specific event in time."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"$id\": \"https://familiar.dev/schemas/components/MomentContent.v1.schema.json\","]
#[doc = "  \"title\": \"Moment Content Component\","]
#[doc = "  \"description\": \"Defines the objective, factual content of a Moment entity, representing a specific event in time.\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"description\","]
#[doc = "    \"fields\","]
#[doc = "    \"physics_properties\","]
#[doc = "    \"schema_version\","]
#[doc = "    \"title\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"description\": {"]
#[doc = "      \"description\": \"A clear, complete sentence explaining the object's purpose and function within the system.\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"fields\": {"]
#[doc = "      \"title\": \"MomentContentFields\","]
#[doc = "      \"description\": \"A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"description\","]
#[doc = "        \"moment_type\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"description\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "          \"title\": \"Description Field\","]
#[doc = "          \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "          \"default\": \"\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"moment_type\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/types/classification/MomentType.v1.json\","]
#[doc = "          \"title\": \"Moment Type\","]
#[doc = "          \"description\": \"A canonical enum for the classification of a Moment entity's content.\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"enum\": ["]
#[doc = "            \"Event\","]
#[doc = "            \"Experience\","]
#[doc = "            \"Observation\","]
#[doc = "            \"Interaction\""]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        \"objective_facts\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/types/StringValueMap.v1.json\","]
#[doc = "          \"title\": \"String Value Map\","]
#[doc = "          \"description\": \"A generic key-value map where keys are strings and values can be any JSON type. Used for flexible data structures like parameters or metadata.\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"patternProperties\": {"]
#[doc = "            \"^[a-zA-Z0-9_]+$\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "              \"title\": \"Any Value\","]
#[doc = "              \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "              \"type\": ["]
#[doc = "                \"string\","]
#[doc = "                \"number\","]
#[doc = "                \"integer\","]
#[doc = "                \"boolean\","]
#[doc = "                \"object\","]
#[doc = "                \"array\","]
#[doc = "                \"null\""]
#[doc = "              ]"]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        },"]
#[doc = "        \"participants\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/types/primitives/EntityIdList.v1.json\","]
#[doc = "          \"title\": \"Entity ID List\","]
#[doc = "          \"description\": \"A canonical definition for a list of unique entity identifiers (UUIDs).\","]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"type\": \"string\""]
#[doc = "          },"]
#[doc = "          \"uniqueItems\": true"]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"patternProperties\": {"]
#[doc = "        \"^[a-z_][a-z0-9_]*$\": {"]
#[doc = "          \"oneOf\": ["]
#[doc = "            {"]
#[doc = "              \"description\": \"A direct reference to a shared definition in SharedDefinitions.schema.json.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"$ref\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"$ref\": {"]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"additionalProperties\": false"]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/base/Field.v1.schema.json\","]
#[doc = "              \"title\": \"Base Field\","]
#[doc = "              \"description\": \"Defines the structure for a single, inline field definition within a component.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"description\","]
#[doc = "                \"type\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"constraints\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "                  \"title\": \"Constraint Definition\","]
#[doc = "                  \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"enum\": {"]
#[doc = "                      \"type\": \"array\","]
#[doc = "                      \"items\": {"]
#[doc = "                        \"type\": \"string\""]
#[doc = "                      }"]
#[doc = "                    },"]
#[doc = "                    \"maxLength\": {"]
#[doc = "                      \"type\": \"integer\""]
#[doc = "                    },"]
#[doc = "                    \"maximum\": {"]
#[doc = "                      \"type\": \"number\""]
#[doc = "                    },"]
#[doc = "                    \"minLength\": {"]
#[doc = "                      \"type\": \"integer\""]
#[doc = "                    },"]
#[doc = "                    \"minimum\": {"]
#[doc = "                      \"type\": \"number\""]
#[doc = "                    },"]
#[doc = "                    \"pattern\": {"]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"additionalProperties\": false"]
#[doc = "                },"]
#[doc = "                \"default_value\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "                  \"title\": \"Any Value\","]
#[doc = "                  \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "                  \"type\": ["]
#[doc = "                    \"string\","]
#[doc = "                    \"number\","]
#[doc = "                    \"integer\","]
#[doc = "                    \"boolean\","]
#[doc = "                    \"object\","]
#[doc = "                    \"array\","]
#[doc = "                    \"null\""]
#[doc = "                  ]"]
#[doc = "                },"]
#[doc = "                \"description\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "                  \"title\": \"Description Field\","]
#[doc = "                  \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "                  \"default\": \"\","]
#[doc = "                  \"type\": \"string\""]
#[doc = "                },"]
#[doc = "                \"type\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "                  \"title\": \"Base Type System\","]
#[doc = "                  \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "                  \"oneOf\": ["]
#[doc = "                    {"]
#[doc = "                      \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "                      \"type\": \"string\","]
#[doc = "                      \"enum\": ["]
#[doc = "                        \"string\","]
#[doc = "                        \"boolean\","]
#[doc = "                        \"integer\","]
#[doc = "                        \"number\","]
#[doc = "                        \"f32\","]
#[doc = "                        \"f64\","]
#[doc = "                        \"i32\","]
#[doc = "                        \"i64\","]
#[doc = "                        \"u32\","]
#[doc = "                        \"u64\","]
#[doc = "                        \"uuid\","]
#[doc = "                        \"date-time\","]
#[doc = "                        \"duration\","]
#[doc = "                        \"object\","]
#[doc = "                        \"array\""]
#[doc = "                      ]"]
#[doc = "                    },"]
#[doc = "                    {"]
#[doc = "                      \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"required\": ["]
#[doc = "                        \"$ref\""]
#[doc = "                      ],"]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"$ref\": {"]
#[doc = "                          \"type\": \"string\""]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"additionalProperties\": false"]
#[doc = "                    }"]
#[doc = "                  ],"]
#[doc = "                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                },"]
#[doc = "                \"ui_label\": {"]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "            }"]
#[doc = "          ]"]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"physics_properties\": {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/base/PhysicsProperties.v1.schema.json\","]
#[doc = "      \"title\": \"Base Physics Properties\","]
#[doc = "      \"description\": \"Defines the common physics-related properties for components and laws.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"engine\","]
#[doc = "        \"is_quantum\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"collapse_sensitive\": {"]
#[doc = "          \"description\": \"Indicates if the object is affected by or triggers quantum collapse.\","]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        \"engine\": {"]
#[doc = "          \"description\": \"The physics engine responsible for this object.\","]
#[doc = "          \"enum\": ["]
#[doc = "            \"quantum\","]
#[doc = "            \"classical\","]
#[doc = "            \"hybrid\""]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        \"is_quantum\": {"]
#[doc = "          \"description\": \"Indicates if the object has quantum properties.\","]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "    },"]
#[doc = "    \"schema_version\": {"]
#[doc = "      \"description\": \"The semantic version of this schema definition (e.g., '1.0.0').\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"title\": {"]
#[doc = "      \"description\": \"The human-readable, PascalCase name of the object (e.g., 'UniversalPhysicsState').\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "  \"physics_properties\": {"]
#[doc = "    \"engine\": \"classical\","]
#[doc = "    \"is_quantum\": false"]
#[doc = "  },"]
#[doc = "  \"schema_version\": \"1.3.0\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct MomentContentComponent {
    #[doc = "A clear, complete sentence explaining the object's purpose and function within the system."]
    pub description: ::std::string::String,
    pub fields: MomentContentFields,
    pub physics_properties: BasePhysicsProperties,
    #[doc = "The semantic version of this schema definition (e.g., '1.0.0')."]
    pub schema_version: ::std::string::String,
    #[doc = "The human-readable, PascalCase name of the object (e.g., 'UniversalPhysicsState')."]
    pub title: ::std::string::String,
}
impl ::std::convert::From<&MomentContentComponent> for MomentContentComponent {
    fn from(value: &MomentContentComponent) -> Self {
        value.clone()
    }
}
impl MomentContentComponent {
    pub fn builder() -> builder::MomentContentComponent {
        Default::default()
    }
}
#[doc = "A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"MomentContentFields\","]
#[doc = "  \"description\": \"A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"description\","]
#[doc = "    \"moment_type\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"description\": {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "      \"title\": \"Description Field\","]
#[doc = "      \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "      \"default\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"moment_type\": {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/types/classification/MomentType.v1.json\","]
#[doc = "      \"title\": \"Moment Type\","]
#[doc = "      \"description\": \"A canonical enum for the classification of a Moment entity's content.\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"enum\": ["]
#[doc = "        \"Event\","]
#[doc = "        \"Experience\","]
#[doc = "        \"Observation\","]
#[doc = "        \"Interaction\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"objective_facts\": {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/types/StringValueMap.v1.json\","]
#[doc = "      \"title\": \"String Value Map\","]
#[doc = "      \"description\": \"A generic key-value map where keys are strings and values can be any JSON type. Used for flexible data structures like parameters or metadata.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"patternProperties\": {"]
#[doc = "        \"^[a-zA-Z0-9_]+$\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "          \"title\": \"Any Value\","]
#[doc = "          \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "          \"type\": ["]
#[doc = "            \"string\","]
#[doc = "            \"number\","]
#[doc = "            \"integer\","]
#[doc = "            \"boolean\","]
#[doc = "            \"object\","]
#[doc = "            \"array\","]
#[doc = "            \"null\""]
#[doc = "          ]"]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"participants\": {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/types/primitives/EntityIdList.v1.json\","]
#[doc = "      \"title\": \"Entity ID List\","]
#[doc = "      \"description\": \"A canonical definition for a list of unique entity identifiers (UUIDs).\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      },"]
#[doc = "      \"uniqueItems\": true"]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"patternProperties\": {"]
#[doc = "    \"^[a-z_][a-z0-9_]*$\": {"]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"description\": \"A direct reference to a shared definition in SharedDefinitions.schema.json.\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"required\": ["]
#[doc = "            \"$ref\""]
#[doc = "          ],"]
#[doc = "          \"properties\": {"]
#[doc = "            \"$ref\": {"]
#[doc = "              \"type\": \"string\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/base/Field.v1.schema.json\","]
#[doc = "          \"title\": \"Base Field\","]
#[doc = "          \"description\": \"Defines the structure for a single, inline field definition within a component.\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"required\": ["]
#[doc = "            \"description\","]
#[doc = "            \"type\""]
#[doc = "          ],"]
#[doc = "          \"properties\": {"]
#[doc = "            \"constraints\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "              \"title\": \"Constraint Definition\","]
#[doc = "              \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"properties\": {"]
#[doc = "                \"enum\": {"]
#[doc = "                  \"type\": \"array\","]
#[doc = "                  \"items\": {"]
#[doc = "                    \"type\": \"string\""]
#[doc = "                  }"]
#[doc = "                },"]
#[doc = "                \"maxLength\": {"]
#[doc = "                  \"type\": \"integer\""]
#[doc = "                },"]
#[doc = "                \"maximum\": {"]
#[doc = "                  \"type\": \"number\""]
#[doc = "                },"]
#[doc = "                \"minLength\": {"]
#[doc = "                  \"type\": \"integer\""]
#[doc = "                },"]
#[doc = "                \"minimum\": {"]
#[doc = "                  \"type\": \"number\""]
#[doc = "                },"]
#[doc = "                \"pattern\": {"]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"additionalProperties\": false"]
#[doc = "            },"]
#[doc = "            \"default_value\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "              \"title\": \"Any Value\","]
#[doc = "              \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "              \"type\": ["]
#[doc = "                \"string\","]
#[doc = "                \"number\","]
#[doc = "                \"integer\","]
#[doc = "                \"boolean\","]
#[doc = "                \"object\","]
#[doc = "                \"array\","]
#[doc = "                \"null\""]
#[doc = "              ]"]
#[doc = "            },"]
#[doc = "            \"description\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "              \"title\": \"Description Field\","]
#[doc = "              \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "              \"default\": \"\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"type\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "              \"title\": \"Base Type System\","]
#[doc = "              \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "              \"oneOf\": ["]
#[doc = "                {"]
#[doc = "                  \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "                  \"type\": \"string\","]
#[doc = "                  \"enum\": ["]
#[doc = "                    \"string\","]
#[doc = "                    \"boolean\","]
#[doc = "                    \"integer\","]
#[doc = "                    \"number\","]
#[doc = "                    \"f32\","]
#[doc = "                    \"f64\","]
#[doc = "                    \"i32\","]
#[doc = "                    \"i64\","]
#[doc = "                    \"u32\","]
#[doc = "                    \"u64\","]
#[doc = "                    \"uuid\","]
#[doc = "                    \"date-time\","]
#[doc = "                    \"duration\","]
#[doc = "                    \"object\","]
#[doc = "                    \"array\""]
#[doc = "                  ]"]
#[doc = "                },"]
#[doc = "                {"]
#[doc = "                  \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"$ref\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"$ref\": {"]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"additionalProperties\": false"]
#[doc = "                }"]
#[doc = "              ],"]
#[doc = "              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "            },"]
#[doc = "            \"ui_label\": {"]
#[doc = "              \"type\": \"string\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
pub struct MomentContentFields {
    #[doc = "A canonical, reusable definition for a human-readable description field."]
    pub description: ::std::string::String,
    #[doc = "A canonical enum for the classification of a Moment entity's content."]
    pub moment_type: MomentType,
    #[doc = "A generic key-value map where keys are strings and values can be any JSON type. Used for flexible data structures like parameters or metadata."]
    #[serde(
        default,
        skip_serializing_if = ":: std :: collections :: HashMap::is_empty"
    )]
    pub objective_facts:
        ::std::collections::HashMap<MomentContentFieldsObjectiveFactsKey, ::serde_json::Value>,
    #[doc = "A canonical definition for a list of unique entity identifiers (UUIDs)."]
    #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
    pub participants: ::std::option::Option<Vec<::std::string::String>>,
}
impl ::std::convert::From<&MomentContentFields> for MomentContentFields {
    fn from(value: &MomentContentFields) -> Self {
        value.clone()
    }
}
impl MomentContentFields {
    pub fn builder() -> builder::MomentContentFields {
        Default::default()
    }
}
#[doc = "`MomentContentFieldsObjectiveFactsKey`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"pattern\": \"^[a-zA-Z0-9_]+$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct MomentContentFieldsObjectiveFactsKey(::std::string::String);
impl ::std::ops::Deref for MomentContentFieldsObjectiveFactsKey {
    type Target = ::std::string::String;
    fn deref(&self) -> &::std::string::String {
        &self.0
    }
}
impl ::std::convert::From<MomentContentFieldsObjectiveFactsKey> for ::std::string::String {
    fn from(value: MomentContentFieldsObjectiveFactsKey) -> Self {
        value.0
    }
}
impl ::std::convert::From<&MomentContentFieldsObjectiveFactsKey>
    for MomentContentFieldsObjectiveFactsKey
{
    fn from(value: &MomentContentFieldsObjectiveFactsKey) -> Self {
        value.clone()
    }
}
impl ::std::str::FromStr for MomentContentFieldsObjectiveFactsKey {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        static PATTERN: ::std::sync::LazyLock<::regress::Regex> =
            ::std::sync::LazyLock::new(|| ::regress::Regex::new("^[a-zA-Z0-9_]+$").unwrap());
        if (&*PATTERN).find(value).is_none() {
            return Err("doesn't match pattern \"^[a-zA-Z0-9_]+$\"".into());
        }
        Ok(Self(value.to_string()))
    }
}
impl ::std::convert::TryFrom<&str> for MomentContentFieldsObjectiveFactsKey {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String> for MomentContentFieldsObjectiveFactsKey {
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String> for MomentContentFieldsObjectiveFactsKey {
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl<'de> ::serde::Deserialize<'de> for MomentContentFieldsObjectiveFactsKey {
    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        ::std::string::String::deserialize(deserializer)?
            .parse()
            .map_err(|e: self::error::ConversionError| {
                <D::Error as ::serde::de::Error>::custom(e.to_string())
            })
    }
}
#[doc = "`MomentPhysicsState`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"MomentPhysicsState\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"manifold_position\","]
#[doc = "    \"universal\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"manifold_position\": {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/components/MemoryManifoldPosition.v1.schema.json\","]
#[doc = "      \"title\": \"Memory Manifold Position Component\","]
#[doc = "      \"description\": \"The entity's position in the 7D cognitive manifold, enforcing quantized spatial coordinates (Rule 8).\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"fields\","]
#[doc = "        \"physics_properties\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"fields\": {"]
#[doc = "          \"title\": \"BaseFields\","]
#[doc = "          \"description\": \"A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"patternProperties\": {"]
#[doc = "            \"^[a-z_][a-z0-9_]*$\": {"]
#[doc = "              \"oneOf\": ["]
#[doc = "                {"]
#[doc = "                  \"description\": \"A direct reference to a shared definition in SharedDefinitions.schema.json.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"$ref\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"$ref\": {"]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"additionalProperties\": false"]
#[doc = "                },"]
#[doc = "                {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/base/Field.v1.schema.json\","]
#[doc = "                  \"title\": \"Base Field\","]
#[doc = "                  \"description\": \"Defines the structure for a single, inline field definition within a component.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"description\","]
#[doc = "                    \"type\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"constraints\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "                      \"title\": \"Constraint Definition\","]
#[doc = "                      \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"enum\": {"]
#[doc = "                          \"type\": \"array\","]
#[doc = "                          \"items\": {"]
#[doc = "                            \"type\": \"string\""]
#[doc = "                          }"]
#[doc = "                        },"]
#[doc = "                        \"maxLength\": {"]
#[doc = "                          \"type\": \"integer\""]
#[doc = "                        },"]
#[doc = "                        \"maximum\": {"]
#[doc = "                          \"type\": \"number\""]
#[doc = "                        },"]
#[doc = "                        \"minLength\": {"]
#[doc = "                          \"type\": \"integer\""]
#[doc = "                        },"]
#[doc = "                        \"minimum\": {"]
#[doc = "                          \"type\": \"number\""]
#[doc = "                        },"]
#[doc = "                        \"pattern\": {"]
#[doc = "                          \"type\": \"string\""]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"additionalProperties\": false"]
#[doc = "                    },"]
#[doc = "                    \"default_value\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "                      \"title\": \"Any Value\","]
#[doc = "                      \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "                      \"type\": ["]
#[doc = "                        \"string\","]
#[doc = "                        \"number\","]
#[doc = "                        \"integer\","]
#[doc = "                        \"boolean\","]
#[doc = "                        \"object\","]
#[doc = "                        \"array\","]
#[doc = "                        \"null\""]
#[doc = "                      ]"]
#[doc = "                    },"]
#[doc = "                    \"description\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "                      \"title\": \"Description Field\","]
#[doc = "                      \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "                      \"default\": \"\","]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    },"]
#[doc = "                    \"type\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "                      \"title\": \"Base Type System\","]
#[doc = "                      \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "                      \"oneOf\": ["]
#[doc = "                        {"]
#[doc = "                          \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "                          \"type\": \"string\","]
#[doc = "                          \"enum\": ["]
#[doc = "                            \"string\","]
#[doc = "                            \"boolean\","]
#[doc = "                            \"integer\","]
#[doc = "                            \"number\","]
#[doc = "                            \"f32\","]
#[doc = "                            \"f64\","]
#[doc = "                            \"i32\","]
#[doc = "                            \"i64\","]
#[doc = "                            \"u32\","]
#[doc = "                            \"u64\","]
#[doc = "                            \"uuid\","]
#[doc = "                            \"date-time\","]
#[doc = "                            \"duration\","]
#[doc = "                            \"object\","]
#[doc = "                            \"array\""]
#[doc = "                          ]"]
#[doc = "                        },"]
#[doc = "                        {"]
#[doc = "                          \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "                          \"type\": \"object\","]
#[doc = "                          \"required\": ["]
#[doc = "                            \"$ref\""]
#[doc = "                          ],"]
#[doc = "                          \"properties\": {"]
#[doc = "                            \"$ref\": {"]
#[doc = "                              \"type\": \"string\""]
#[doc = "                            }"]
#[doc = "                          },"]
#[doc = "                          \"additionalProperties\": false"]
#[doc = "                        }"]
#[doc = "                      ],"]
#[doc = "                      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                    },"]
#[doc = "                    \"ui_label\": {"]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                }"]
#[doc = "              ]"]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        },"]
#[doc = "        \"physics_properties\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/base/PhysicsProperties.v1.schema.json\","]
#[doc = "          \"title\": \"Base Physics Properties\","]
#[doc = "          \"description\": \"Defines the common physics-related properties for components and laws.\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"required\": ["]
#[doc = "            \"engine\","]
#[doc = "            \"is_quantum\""]
#[doc = "          ],"]
#[doc = "          \"properties\": {"]
#[doc = "            \"collapse_sensitive\": {"]
#[doc = "              \"description\": \"Indicates if the object is affected by or triggers quantum collapse.\","]
#[doc = "              \"type\": \"boolean\""]
#[doc = "            },"]
#[doc = "            \"engine\": {"]
#[doc = "              \"description\": \"The physics engine responsible for this object.\","]
#[doc = "              \"enum\": ["]
#[doc = "                \"quantum\","]
#[doc = "                \"classical\","]
#[doc = "                \"hybrid\""]
#[doc = "              ]"]
#[doc = "            },"]
#[doc = "            \"is_quantum\": {"]
#[doc = "              \"description\": \"Indicates if the object has quantum properties.\","]
#[doc = "              \"type\": \"boolean\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "      \"fields\": {"]
#[doc = "        \"autobiographical_coordinate\": {"]
#[doc = "          \"description\": \"Quantized coordinate for External <-> Self-related.\","]
#[doc = "          \"type\": \"integer\""]
#[doc = "        },"]
#[doc = "        \"coherence_coordinate\": {"]
#[doc = "          \"description\": \"Quantized coordinate for Fragmented <-> Unified.\","]
#[doc = "          \"type\": \"integer\""]
#[doc = "        },"]
#[doc = "        \"emotional_coordinate\": {"]
#[doc = "          \"description\": \"Quantized coordinate for Negative <-> Positive.\","]
#[doc = "          \"type\": \"integer\""]
#[doc = "        },"]
#[doc = "        \"episodic_coordinate\": {"]
#[doc = "          \"description\": \"Quantized coordinate for General <-> Specific.\","]
#[doc = "          \"type\": \"integer\""]
#[doc = "        },"]
#[doc = "        \"salience_coordinate\": {"]
#[doc = "          \"description\": \"Quantized coordinate for Background <-> Foreground.\","]
#[doc = "          \"type\": \"integer\""]
#[doc = "        },"]
#[doc = "        \"semantic_coordinate\": {"]
#[doc = "          \"description\": \"Quantized coordinate for Abstract <-> Concrete.\","]
#[doc = "          \"type\": \"integer\""]
#[doc = "        },"]
#[doc = "        \"temporal_coordinate\": {"]
#[doc = "          \"description\": \"Continuous time coordinate (t <= 0).\","]
#[doc = "          \"maximum\": 0,"]
#[doc = "          \"type\": \"number\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"physics_properties\": {"]
#[doc = "        \"engine\": \"classical\","]
#[doc = "        \"is_quantum\": false"]
#[doc = "      },"]
#[doc = "      \"schema_version\": \"1.0.0\""]
#[doc = "    },"]
#[doc = "    \"universal\": {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/components/UniversalPhysicsState.v1.schema.json\","]
#[doc = "      \"title\": \"Universal Physics State Component\","]
#[doc = "      \"description\": \"The transient, mutable physics state of an entity.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"fields\","]
#[doc = "        \"physics_properties\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"fields\": {"]
#[doc = "          \"title\": \"UniversalPhysicsStateFields\","]
#[doc = "          \"description\": \"A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"required\": ["]
#[doc = "            \"cognitive_perspective\","]
#[doc = "            \"consolidation_rate\","]
#[doc = "            \"decay_rate\","]
#[doc = "            \"energy\","]
#[doc = "            \"entanglement_strength\","]
#[doc = "            \"momentum\","]
#[doc = "            \"quantum_coherence\""]
#[doc = "          ],"]
#[doc = "          \"properties\": {"]
#[doc = "            \"cognitive_perspective\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/fields/CognitivePerspective.v1.schema.json\","]
#[doc = "              \"title\": \"Cognitive Perspective Field\","]
#[doc = "              \"description\": \"The intrinsic 'spin' or 'flavor' of the entity, which generates cognitive dissonance (torsion).\","]
#[doc = "              \"type\": \"array\","]
#[doc = "              \"items\": {"]
#[doc = "                \"type\": \"number\""]
#[doc = "              },"]
#[doc = "              \"maxItems\": 3,"]
#[doc = "              \"minItems\": 3,"]
#[doc = "              \"ui_label\": \"Cognitive Perspective\""]
#[doc = "            },"]
#[doc = "            \"consolidation_rate\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/snippets/fields/ConsolidationRate.v1.json\","]
#[doc = "              \"title\": \"Consolidation Rate Field\","]
#[doc = "              \"description\": \"The base rate of memory consolidation for an entity, before multipliers are applied. Represents how quickly an unstable memory becomes stable.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"value\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"value\": {"]
#[doc = "                  \"default\": 0.0,"]
#[doc = "                  \"type\": \"number\","]
#[doc = "                  \"format\": \"double\","]
#[doc = "                  \"maximum\": 1.0,"]
#[doc = "                  \"minimum\": 0.0,"]
#[doc = "                  \"x-python-type\": \"float\","]
#[doc = "                  \"x-rust-type\": \"f64\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"additionalProperties\": false"]
#[doc = "            },"]
#[doc = "            \"decay_rate\": {"]
#[doc = "              \"description\": \"The base rate of energy or coherence decay for an entity, before multipliers are applied.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"value\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"value\": {"]
#[doc = "                  \"default\": 0.01,"]
#[doc = "                  \"type\": \"number\","]
#[doc = "                  \"format\": \"double\","]
#[doc = "                  \"x-python-type\": \"float\","]
#[doc = "                  \"x-rust-type\": \"f64\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"additionalProperties\": false"]
#[doc = "            },"]
#[doc = "            \"energy\": {"]
#[doc = "              \"description\": \"The current energy level of an entity.\","]
#[doc = "              \"default\": 0.1,"]
#[doc = "              \"type\": \"number\""]
#[doc = "            },"]
#[doc = "            \"entanglement_strength\": {"]
#[doc = "              \"description\": \"The overall entanglement strength of this entity with others. Null for classical entities.\","]
#[doc = "              \"default\": null,"]
#[doc = "              \"type\": ["]
#[doc = "                \"number\","]
#[doc = "                \"null\""]
#[doc = "              ],"]
#[doc = "              \"maximum\": 1.0,"]
#[doc = "              \"minimum\": 0.0"]
#[doc = "            },"]
#[doc = "            \"momentum\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/types/physics/Vec6.v1.json\","]
#[doc = "              \"title\": \"6D Physics Vector\","]
#[doc = "              \"description\": \"A reusable data type for a vector of six f64 numbers, used for momentum and forces in the 6 spatial dimensions of the manifold.\","]
#[doc = "              \"type\": \"array\","]
#[doc = "              \"items\": {"]
#[doc = "                \"type\": \"number\""]
#[doc = "              },"]
#[doc = "              \"maxItems\": 6,"]
#[doc = "              \"minItems\": 6"]
#[doc = "            },"]
#[doc = "            \"quantum_coherence\": {"]
#[doc = "              \"description\": \"The quantum coherence level of the entity, representing its degree of superposition. Null for classical entities.\","]
#[doc = "              \"default\": null,"]
#[doc = "              \"type\": ["]
#[doc = "                \"number\","]
#[doc = "                \"null\""]
#[doc = "              ],"]
#[doc = "              \"maximum\": 1.0,"]
#[doc = "              \"minimum\": 0.0"]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"patternProperties\": {"]
#[doc = "            \"^[a-z_][a-z0-9_]*$\": {"]
#[doc = "              \"oneOf\": ["]
#[doc = "                {"]
#[doc = "                  \"description\": \"A direct reference to a shared definition in SharedDefinitions.schema.json.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"$ref\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"$ref\": {"]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"additionalProperties\": false"]
#[doc = "                },"]
#[doc = "                {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/base/Field.v1.schema.json\","]
#[doc = "                  \"title\": \"Base Field\","]
#[doc = "                  \"description\": \"Defines the structure for a single, inline field definition within a component.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"description\","]
#[doc = "                    \"type\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"constraints\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "                      \"title\": \"Constraint Definition\","]
#[doc = "                      \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"enum\": {"]
#[doc = "                          \"type\": \"array\","]
#[doc = "                          \"items\": {"]
#[doc = "                            \"type\": \"string\""]
#[doc = "                          }"]
#[doc = "                        },"]
#[doc = "                        \"maxLength\": {"]
#[doc = "                          \"type\": \"integer\""]
#[doc = "                        },"]
#[doc = "                        \"maximum\": {"]
#[doc = "                          \"type\": \"number\""]
#[doc = "                        },"]
#[doc = "                        \"minLength\": {"]
#[doc = "                          \"type\": \"integer\""]
#[doc = "                        },"]
#[doc = "                        \"minimum\": {"]
#[doc = "                          \"type\": \"number\""]
#[doc = "                        },"]
#[doc = "                        \"pattern\": {"]
#[doc = "                          \"type\": \"string\""]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"additionalProperties\": false"]
#[doc = "                    },"]
#[doc = "                    \"default_value\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "                      \"title\": \"Any Value\","]
#[doc = "                      \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "                      \"type\": ["]
#[doc = "                        \"string\","]
#[doc = "                        \"number\","]
#[doc = "                        \"integer\","]
#[doc = "                        \"boolean\","]
#[doc = "                        \"object\","]
#[doc = "                        \"array\","]
#[doc = "                        \"null\""]
#[doc = "                      ]"]
#[doc = "                    },"]
#[doc = "                    \"description\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "                      \"title\": \"Description Field\","]
#[doc = "                      \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "                      \"default\": \"\","]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    },"]
#[doc = "                    \"type\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "                      \"title\": \"Base Type System\","]
#[doc = "                      \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "                      \"oneOf\": ["]
#[doc = "                        {"]
#[doc = "                          \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "                          \"type\": \"string\","]
#[doc = "                          \"enum\": ["]
#[doc = "                            \"string\","]
#[doc = "                            \"boolean\","]
#[doc = "                            \"integer\","]
#[doc = "                            \"number\","]
#[doc = "                            \"f32\","]
#[doc = "                            \"f64\","]
#[doc = "                            \"i32\","]
#[doc = "                            \"i64\","]
#[doc = "                            \"u32\","]
#[doc = "                            \"u64\","]
#[doc = "                            \"uuid\","]
#[doc = "                            \"date-time\","]
#[doc = "                            \"duration\","]
#[doc = "                            \"object\","]
#[doc = "                            \"array\""]
#[doc = "                          ]"]
#[doc = "                        },"]
#[doc = "                        {"]
#[doc = "                          \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "                          \"type\": \"object\","]
#[doc = "                          \"required\": ["]
#[doc = "                            \"$ref\""]
#[doc = "                          ],"]
#[doc = "                          \"properties\": {"]
#[doc = "                            \"$ref\": {"]
#[doc = "                              \"type\": \"string\""]
#[doc = "                            }"]
#[doc = "                          },"]
#[doc = "                          \"additionalProperties\": false"]
#[doc = "                        }"]
#[doc = "                      ],"]
#[doc = "                      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                    },"]
#[doc = "                    \"ui_label\": {"]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                }"]
#[doc = "              ]"]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        },"]
#[doc = "        \"physics_properties\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/base/PhysicsProperties.v1.schema.json\","]
#[doc = "          \"title\": \"Base Physics Properties\","]
#[doc = "          \"description\": \"Defines the common physics-related properties for components and laws.\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"required\": ["]
#[doc = "            \"engine\","]
#[doc = "            \"is_quantum\""]
#[doc = "          ],"]
#[doc = "          \"properties\": {"]
#[doc = "            \"collapse_sensitive\": {"]
#[doc = "              \"description\": \"Indicates if the object is affected by or triggers quantum collapse.\","]
#[doc = "              \"type\": \"boolean\""]
#[doc = "            },"]
#[doc = "            \"engine\": {"]
#[doc = "              \"description\": \"The physics engine responsible for this object.\","]
#[doc = "              \"enum\": ["]
#[doc = "                \"quantum\","]
#[doc = "                \"classical\","]
#[doc = "                \"hybrid\""]
#[doc = "              ]"]
#[doc = "            },"]
#[doc = "            \"is_quantum\": {"]
#[doc = "              \"description\": \"Indicates if the object has quantum properties.\","]
#[doc = "              \"type\": \"boolean\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "      \"schema_version\": \"3.0.0\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct MomentPhysicsState {
    pub manifold_position: MemoryManifoldPositionComponent,
    pub universal: UniversalPhysicsStateComponent,
}
impl ::std::convert::From<&MomentPhysicsState> for MomentPhysicsState {
    fn from(value: &MomentPhysicsState) -> Self {
        value.clone()
    }
}
impl MomentPhysicsState {
    pub fn builder() -> builder::MomentPhysicsState {
        Default::default()
    }
}
#[doc = "A canonical enum for the classification of a Moment entity's content."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"$id\": \"https://familiar.dev/schemas/types/classification/MomentType.v1.json\","]
#[doc = "  \"title\": \"Moment Type\","]
#[doc = "  \"description\": \"A canonical enum for the classification of a Moment entity's content.\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"Event\","]
#[doc = "    \"Experience\","]
#[doc = "    \"Observation\","]
#[doc = "    \"Interaction\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum MomentType {
    Event,
    Experience,
    Observation,
    Interaction,
}
impl ::std::convert::From<&Self> for MomentType {
    fn from(value: &MomentType) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display for MomentType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Event => write!(f, "Event"),
            Self::Experience => write!(f, "Experience"),
            Self::Observation => write!(f, "Observation"),
            Self::Interaction => write!(f, "Interaction"),
        }
    }
}
impl ::std::str::FromStr for MomentType {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        match value {
            "Event" => Ok(Self::Event),
            "Experience" => Ok(Self::Experience),
            "Observation" => Ok(Self::Observation),
            "Interaction" => Ok(Self::Interaction),
            _ => Err("invalid value".into()),
        }
    }
}
impl ::std::convert::TryFrom<&str> for MomentType {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String> for MomentType {
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String> for MomentType {
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "Component references temporarily disabled for pipeline testing"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"MotifComponents\","]
#[doc = "  \"description\": \"Component references temporarily disabled for pipeline testing\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"consolidation\","]
#[doc = "    \"content\","]
#[doc = "    \"gdpr\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"_comment\": {"]
#[doc = "      \"description\": \"TODO: Re-enable component references when component schemas are available\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"consolidation\": {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/components/ConsolidationState.v1.schema.json\","]
#[doc = "      \"title\": \"Consolidation State Component\","]
#[doc = "      \"description\": \"Tracks the temporal consolidation state of a Motif or Filament.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"fields\","]
#[doc = "        \"physics_properties\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"fields\": {"]
#[doc = "          \"title\": \"ConsolidationStateFields\","]
#[doc = "          \"description\": \"A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"required\": ["]
#[doc = "            \"consolidation_level\","]
#[doc = "            \"last_consolidated_at\","]
#[doc = "            \"next_consolidation_due\","]
#[doc = "            \"source_entity_count\""]
#[doc = "          ],"]
#[doc = "          \"properties\": {"]
#[doc = "            \"consolidation_level\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/types/system/ConsolidationLevel.v1.json\","]
#[doc = "              \"title\": \"Consolidation Level\","]
#[doc = "              \"description\": \"A canonical enum for the temporal consolidation level of a Motif or Filament.\","]
#[doc = "              \"type\": \"string\","]
#[doc = "              \"enum\": ["]
#[doc = "                \"Daily\","]
#[doc = "                \"Weekly\","]
#[doc = "                \"Monthly\","]
#[doc = "                \"Yearly\","]
#[doc = "                \"Archived\""]
#[doc = "              ]"]
#[doc = "            },"]
#[doc = "            \"last_consolidated_at\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/types/primitives/NullableTimestamp.v1.json\","]
#[doc = "              \"title\": \"Nullable Timestamp\","]
#[doc = "              \"description\": \"A canonical definition for an optional ISO 8601 timestamp with timezone.\","]
#[doc = "              \"type\": ["]
#[doc = "                \"string\","]
#[doc = "                \"null\""]
#[doc = "              ]"]
#[doc = "            },"]
#[doc = "            \"next_consolidation_due\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/types/primitives/NullableTimestamp.v1.json\","]
#[doc = "              \"title\": \"Nullable Timestamp\","]
#[doc = "              \"description\": \"A canonical definition for an optional ISO 8601 timestamp with timezone.\","]
#[doc = "              \"type\": ["]
#[doc = "                \"string\","]
#[doc = "                \"null\""]
#[doc = "              ]"]
#[doc = "            },"]
#[doc = "            \"source_entity_count\": {"]
#[doc = "              \"type\": \"integer\","]
#[doc = "              \"minimum\": 1.0"]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"patternProperties\": {"]
#[doc = "            \"^[a-z_][a-z0-9_]*$\": {"]
#[doc = "              \"oneOf\": ["]
#[doc = "                {"]
#[doc = "                  \"description\": \"A direct reference to a shared definition in SharedDefinitions.schema.json.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"$ref\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"$ref\": {"]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"additionalProperties\": false"]
#[doc = "                },"]
#[doc = "                {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/base/Field.v1.schema.json\","]
#[doc = "                  \"title\": \"Base Field\","]
#[doc = "                  \"description\": \"Defines the structure for a single, inline field definition within a component.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"description\","]
#[doc = "                    \"type\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"constraints\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "                      \"title\": \"Constraint Definition\","]
#[doc = "                      \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"enum\": {"]
#[doc = "                          \"type\": \"array\","]
#[doc = "                          \"items\": {"]
#[doc = "                            \"type\": \"string\""]
#[doc = "                          }"]
#[doc = "                        },"]
#[doc = "                        \"maxLength\": {"]
#[doc = "                          \"type\": \"integer\""]
#[doc = "                        },"]
#[doc = "                        \"maximum\": {"]
#[doc = "                          \"type\": \"number\""]
#[doc = "                        },"]
#[doc = "                        \"minLength\": {"]
#[doc = "                          \"type\": \"integer\""]
#[doc = "                        },"]
#[doc = "                        \"minimum\": {"]
#[doc = "                          \"type\": \"number\""]
#[doc = "                        },"]
#[doc = "                        \"pattern\": {"]
#[doc = "                          \"type\": \"string\""]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"additionalProperties\": false"]
#[doc = "                    },"]
#[doc = "                    \"default_value\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "                      \"title\": \"Any Value\","]
#[doc = "                      \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "                      \"type\": ["]
#[doc = "                        \"string\","]
#[doc = "                        \"number\","]
#[doc = "                        \"integer\","]
#[doc = "                        \"boolean\","]
#[doc = "                        \"object\","]
#[doc = "                        \"array\","]
#[doc = "                        \"null\""]
#[doc = "                      ]"]
#[doc = "                    },"]
#[doc = "                    \"description\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "                      \"title\": \"Description Field\","]
#[doc = "                      \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "                      \"default\": \"\","]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    },"]
#[doc = "                    \"type\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "                      \"title\": \"Base Type System\","]
#[doc = "                      \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "                      \"oneOf\": ["]
#[doc = "                        {"]
#[doc = "                          \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "                          \"type\": \"string\","]
#[doc = "                          \"enum\": ["]
#[doc = "                            \"string\","]
#[doc = "                            \"boolean\","]
#[doc = "                            \"integer\","]
#[doc = "                            \"number\","]
#[doc = "                            \"f32\","]
#[doc = "                            \"f64\","]
#[doc = "                            \"i32\","]
#[doc = "                            \"i64\","]
#[doc = "                            \"u32\","]
#[doc = "                            \"u64\","]
#[doc = "                            \"uuid\","]
#[doc = "                            \"date-time\","]
#[doc = "                            \"duration\","]
#[doc = "                            \"object\","]
#[doc = "                            \"array\""]
#[doc = "                          ]"]
#[doc = "                        },"]
#[doc = "                        {"]
#[doc = "                          \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "                          \"type\": \"object\","]
#[doc = "                          \"required\": ["]
#[doc = "                            \"$ref\""]
#[doc = "                          ],"]
#[doc = "                          \"properties\": {"]
#[doc = "                            \"$ref\": {"]
#[doc = "                              \"type\": \"string\""]
#[doc = "                            }"]
#[doc = "                          },"]
#[doc = "                          \"additionalProperties\": false"]
#[doc = "                        }"]
#[doc = "                      ],"]
#[doc = "                      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                    },"]
#[doc = "                    \"ui_label\": {"]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                }"]
#[doc = "              ]"]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        },"]
#[doc = "        \"physics_properties\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/base/PhysicsProperties.v1.schema.json\","]
#[doc = "          \"title\": \"Base Physics Properties\","]
#[doc = "          \"description\": \"Defines the common physics-related properties for components and laws.\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"required\": ["]
#[doc = "            \"engine\","]
#[doc = "            \"is_quantum\""]
#[doc = "          ],"]
#[doc = "          \"properties\": {"]
#[doc = "            \"collapse_sensitive\": {"]
#[doc = "              \"description\": \"Indicates if the object is affected by or triggers quantum collapse.\","]
#[doc = "              \"type\": \"boolean\""]
#[doc = "            },"]
#[doc = "            \"engine\": {"]
#[doc = "              \"description\": \"The physics engine responsible for this object.\","]
#[doc = "              \"enum\": ["]
#[doc = "                \"quantum\","]
#[doc = "                \"classical\","]
#[doc = "                \"hybrid\""]
#[doc = "              ]"]
#[doc = "            },"]
#[doc = "            \"is_quantum\": {"]
#[doc = "              \"description\": \"Indicates if the object has quantum properties.\","]
#[doc = "              \"type\": \"boolean\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "      \"physics_properties\": {"]
#[doc = "        \"engine\": \"classical\","]
#[doc = "        \"is_quantum\": false"]
#[doc = "      },"]
#[doc = "      \"schema_version\": \"1.2.0\""]
#[doc = "    },"]
#[doc = "    \"content\": {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/components/MotifContent.v1.schema.json\","]
#[doc = "      \"title\": \"Motif Content Component\","]
#[doc = "      \"description\": \"Defines the emergent pattern content of a Motif entity. This is a quantum component.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"fields\","]
#[doc = "        \"physics_properties\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"fields\": {"]
#[doc = "          \"title\": \"MotifContentFields\","]
#[doc = "          \"description\": \"A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"required\": ["]
#[doc = "            \"motif_description\","]
#[doc = "            \"motif_type\","]
#[doc = "            \"source_entanglements\""]
#[doc = "          ],"]
#[doc = "          \"properties\": {"]
#[doc = "            \"motif_description\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "              \"title\": \"Description Field\","]
#[doc = "              \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "              \"default\": \"\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"motif_type\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/types/physics/MotifType.v1.json\","]
#[doc = "              \"title\": \"Motif Type\","]
#[doc = "              \"description\": \"A canonical enum of the types of recurring themes or motifs in memory.\","]
#[doc = "              \"type\": \"string\","]
#[doc = "              \"enum\": ["]
#[doc = "                \"Behavioral\","]
#[doc = "                \"Emotional\","]
#[doc = "                \"Situational\","]
#[doc = "                \"Temporal\""]
#[doc = "              ]"]
#[doc = "            },"]
#[doc = "            \"source_entanglements\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/types/primitives/EntityIdList.v1.json\","]
#[doc = "              \"title\": \"Entity ID List\","]
#[doc = "              \"description\": \"A canonical definition for a list of unique entity identifiers (UUIDs).\","]
#[doc = "              \"type\": \"array\","]
#[doc = "              \"items\": {"]
#[doc = "                \"type\": \"string\""]
#[doc = "              },"]
#[doc = "              \"uniqueItems\": true"]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"patternProperties\": {"]
#[doc = "            \"^[a-z_][a-z0-9_]*$\": {"]
#[doc = "              \"oneOf\": ["]
#[doc = "                {"]
#[doc = "                  \"description\": \"A direct reference to a shared definition in SharedDefinitions.schema.json.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"$ref\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"$ref\": {"]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"additionalProperties\": false"]
#[doc = "                },"]
#[doc = "                {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/base/Field.v1.schema.json\","]
#[doc = "                  \"title\": \"Base Field\","]
#[doc = "                  \"description\": \"Defines the structure for a single, inline field definition within a component.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"description\","]
#[doc = "                    \"type\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"constraints\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "                      \"title\": \"Constraint Definition\","]
#[doc = "                      \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"enum\": {"]
#[doc = "                          \"type\": \"array\","]
#[doc = "                          \"items\": {"]
#[doc = "                            \"type\": \"string\""]
#[doc = "                          }"]
#[doc = "                        },"]
#[doc = "                        \"maxLength\": {"]
#[doc = "                          \"type\": \"integer\""]
#[doc = "                        },"]
#[doc = "                        \"maximum\": {"]
#[doc = "                          \"type\": \"number\""]
#[doc = "                        },"]
#[doc = "                        \"minLength\": {"]
#[doc = "                          \"type\": \"integer\""]
#[doc = "                        },"]
#[doc = "                        \"minimum\": {"]
#[doc = "                          \"type\": \"number\""]
#[doc = "                        },"]
#[doc = "                        \"pattern\": {"]
#[doc = "                          \"type\": \"string\""]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"additionalProperties\": false"]
#[doc = "                    },"]
#[doc = "                    \"default_value\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "                      \"title\": \"Any Value\","]
#[doc = "                      \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "                      \"type\": ["]
#[doc = "                        \"string\","]
#[doc = "                        \"number\","]
#[doc = "                        \"integer\","]
#[doc = "                        \"boolean\","]
#[doc = "                        \"object\","]
#[doc = "                        \"array\","]
#[doc = "                        \"null\""]
#[doc = "                      ]"]
#[doc = "                    },"]
#[doc = "                    \"description\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "                      \"title\": \"Description Field\","]
#[doc = "                      \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "                      \"default\": \"\","]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    },"]
#[doc = "                    \"type\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "                      \"title\": \"Base Type System\","]
#[doc = "                      \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "                      \"oneOf\": ["]
#[doc = "                        {"]
#[doc = "                          \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "                          \"type\": \"string\","]
#[doc = "                          \"enum\": ["]
#[doc = "                            \"string\","]
#[doc = "                            \"boolean\","]
#[doc = "                            \"integer\","]
#[doc = "                            \"number\","]
#[doc = "                            \"f32\","]
#[doc = "                            \"f64\","]
#[doc = "                            \"i32\","]
#[doc = "                            \"i64\","]
#[doc = "                            \"u32\","]
#[doc = "                            \"u64\","]
#[doc = "                            \"uuid\","]
#[doc = "                            \"date-time\","]
#[doc = "                            \"duration\","]
#[doc = "                            \"object\","]
#[doc = "                            \"array\""]
#[doc = "                          ]"]
#[doc = "                        },"]
#[doc = "                        {"]
#[doc = "                          \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "                          \"type\": \"object\","]
#[doc = "                          \"required\": ["]
#[doc = "                            \"$ref\""]
#[doc = "                          ],"]
#[doc = "                          \"properties\": {"]
#[doc = "                            \"$ref\": {"]
#[doc = "                              \"type\": \"string\""]
#[doc = "                            }"]
#[doc = "                          },"]
#[doc = "                          \"additionalProperties\": false"]
#[doc = "                        }"]
#[doc = "                      ],"]
#[doc = "                      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                    },"]
#[doc = "                    \"ui_label\": {"]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                }"]
#[doc = "              ]"]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        },"]
#[doc = "        \"physics_properties\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/base/PhysicsProperties.v1.schema.json\","]
#[doc = "          \"title\": \"Base Physics Properties\","]
#[doc = "          \"description\": \"Defines the common physics-related properties for components and laws.\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"required\": ["]
#[doc = "            \"engine\","]
#[doc = "            \"is_quantum\""]
#[doc = "          ],"]
#[doc = "          \"properties\": {"]
#[doc = "            \"collapse_sensitive\": {"]
#[doc = "              \"description\": \"Indicates if the object is affected by or triggers quantum collapse.\","]
#[doc = "              \"type\": \"boolean\""]
#[doc = "            },"]
#[doc = "            \"engine\": {"]
#[doc = "              \"description\": \"The physics engine responsible for this object.\","]
#[doc = "              \"enum\": ["]
#[doc = "                \"quantum\","]
#[doc = "                \"classical\","]
#[doc = "                \"hybrid\""]
#[doc = "              ]"]
#[doc = "            },"]
#[doc = "            \"is_quantum\": {"]
#[doc = "              \"description\": \"Indicates if the object has quantum properties.\","]
#[doc = "              \"type\": \"boolean\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "      \"physics_properties\": {"]
#[doc = "        \"engine\": \"quantum\","]
#[doc = "        \"is_quantum\": true"]
#[doc = "      },"]
#[doc = "      \"schema_version\": \"1.4.0\""]
#[doc = "    },"]
#[doc = "    \"gdpr\": {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/components/GDPRDependency.v1.schema.json\","]
#[doc = "      \"title\": \"GDPR Dependency Component\","]
#[doc = "      \"description\": \"Tracks data provenance to enable compliant cascading deletions for GDPR's Right to Erasure.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"fields\","]
#[doc = "        \"physics_properties\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"fields\": {"]
#[doc = "          \"title\": \"BaseFields\","]
#[doc = "          \"description\": \"A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"patternProperties\": {"]
#[doc = "            \"^[a-z_][a-z0-9_]*$\": {"]
#[doc = "              \"oneOf\": ["]
#[doc = "                {"]
#[doc = "                  \"description\": \"A direct reference to a shared definition in SharedDefinitions.schema.json.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"$ref\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"$ref\": {"]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"additionalProperties\": false"]
#[doc = "                },"]
#[doc = "                {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/base/Field.v1.schema.json\","]
#[doc = "                  \"title\": \"Base Field\","]
#[doc = "                  \"description\": \"Defines the structure for a single, inline field definition within a component.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"description\","]
#[doc = "                    \"type\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"constraints\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "                      \"title\": \"Constraint Definition\","]
#[doc = "                      \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"enum\": {"]
#[doc = "                          \"type\": \"array\","]
#[doc = "                          \"items\": {"]
#[doc = "                            \"type\": \"string\""]
#[doc = "                          }"]
#[doc = "                        },"]
#[doc = "                        \"maxLength\": {"]
#[doc = "                          \"type\": \"integer\""]
#[doc = "                        },"]
#[doc = "                        \"maximum\": {"]
#[doc = "                          \"type\": \"number\""]
#[doc = "                        },"]
#[doc = "                        \"minLength\": {"]
#[doc = "                          \"type\": \"integer\""]
#[doc = "                        },"]
#[doc = "                        \"minimum\": {"]
#[doc = "                          \"type\": \"number\""]
#[doc = "                        },"]
#[doc = "                        \"pattern\": {"]
#[doc = "                          \"type\": \"string\""]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"additionalProperties\": false"]
#[doc = "                    },"]
#[doc = "                    \"default_value\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "                      \"title\": \"Any Value\","]
#[doc = "                      \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "                      \"type\": ["]
#[doc = "                        \"string\","]
#[doc = "                        \"number\","]
#[doc = "                        \"integer\","]
#[doc = "                        \"boolean\","]
#[doc = "                        \"object\","]
#[doc = "                        \"array\","]
#[doc = "                        \"null\""]
#[doc = "                      ]"]
#[doc = "                    },"]
#[doc = "                    \"description\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "                      \"title\": \"Description Field\","]
#[doc = "                      \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "                      \"default\": \"\","]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    },"]
#[doc = "                    \"type\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "                      \"title\": \"Base Type System\","]
#[doc = "                      \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "                      \"oneOf\": ["]
#[doc = "                        {"]
#[doc = "                          \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "                          \"type\": \"string\","]
#[doc = "                          \"enum\": ["]
#[doc = "                            \"string\","]
#[doc = "                            \"boolean\","]
#[doc = "                            \"integer\","]
#[doc = "                            \"number\","]
#[doc = "                            \"f32\","]
#[doc = "                            \"f64\","]
#[doc = "                            \"i32\","]
#[doc = "                            \"i64\","]
#[doc = "                            \"u32\","]
#[doc = "                            \"u64\","]
#[doc = "                            \"uuid\","]
#[doc = "                            \"date-time\","]
#[doc = "                            \"duration\","]
#[doc = "                            \"object\","]
#[doc = "                            \"array\""]
#[doc = "                          ]"]
#[doc = "                        },"]
#[doc = "                        {"]
#[doc = "                          \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "                          \"type\": \"object\","]
#[doc = "                          \"required\": ["]
#[doc = "                            \"$ref\""]
#[doc = "                          ],"]
#[doc = "                          \"properties\": {"]
#[doc = "                            \"$ref\": {"]
#[doc = "                              \"type\": \"string\""]
#[doc = "                            }"]
#[doc = "                          },"]
#[doc = "                          \"additionalProperties\": false"]
#[doc = "                        }"]
#[doc = "                      ],"]
#[doc = "                      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                    },"]
#[doc = "                    \"ui_label\": {"]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                }"]
#[doc = "              ]"]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        },"]
#[doc = "        \"physics_properties\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/base/PhysicsProperties.v1.schema.json\","]
#[doc = "          \"title\": \"Base Physics Properties\","]
#[doc = "          \"description\": \"Defines the common physics-related properties for components and laws.\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"required\": ["]
#[doc = "            \"engine\","]
#[doc = "            \"is_quantum\""]
#[doc = "          ],"]
#[doc = "          \"properties\": {"]
#[doc = "            \"collapse_sensitive\": {"]
#[doc = "              \"description\": \"Indicates if the object is affected by or triggers quantum collapse.\","]
#[doc = "              \"type\": \"boolean\""]
#[doc = "            },"]
#[doc = "            \"engine\": {"]
#[doc = "              \"description\": \"The physics engine responsible for this object.\","]
#[doc = "              \"enum\": ["]
#[doc = "                \"quantum\","]
#[doc = "                \"classical\","]
#[doc = "                \"hybrid\""]
#[doc = "              ]"]
#[doc = "            },"]
#[doc = "            \"is_quantum\": {"]
#[doc = "              \"description\": \"Indicates if the object has quantum properties.\","]
#[doc = "              \"type\": \"boolean\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "      \"fields\": {"]
#[doc = "        \"contributing_users\": {"]
#[doc = "          \"description\": \"A set of User IDs whose data contributed to this entity's existence or state.\","]
#[doc = "          \"items\": {"]
#[doc = "            \"type\": \"uuid\""]
#[doc = "          },"]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"uniqueItems\": true"]
#[doc = "        },"]
#[doc = "        \"upstream_dependencies\": {"]
#[doc = "          \"description\": \"A list of source entity IDs (e.g., Moments) that this entity (e.g., a Motif) depends on.\","]
#[doc = "          \"items\": {"]
#[doc = "            \"type\": \"uuid\""]
#[doc = "          },"]
#[doc = "          \"type\": \"array\""]
#[doc = "        },"]
#[doc = "        \"user_evidence_weights\": {"]
#[doc = "          \"additionalProperties\": {"]
#[doc = "            \"maximum\": 1.0,"]
#[doc = "            \"minimum\": 0.0,"]
#[doc = "            \"type\": \"number\""]
#[doc = "          },"]
#[doc = "          \"type\": \"object\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"physics_properties\": {"]
#[doc = "        \"engine\": \"classical\","]
#[doc = "        \"is_quantum\": false"]
#[doc = "      },"]
#[doc = "      \"schema_version\": \"1.0.0\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct MotifComponents {
    #[doc = "TODO: Re-enable component references when component schemas are available"]
    #[serde(
        rename = "_comment",
        default,
        skip_serializing_if = "::std::option::Option::is_none"
    )]
    pub comment: ::std::option::Option<::std::string::String>,
    pub consolidation: ConsolidationStateComponent,
    pub content: MotifContentComponent,
    pub gdpr: GdprDependencyComponent,
}
impl ::std::convert::From<&MotifComponents> for MotifComponents {
    fn from(value: &MotifComponents) -> Self {
        value.clone()
    }
}
impl MotifComponents {
    pub fn builder() -> builder::MotifComponents {
        Default::default()
    }
}
#[doc = "Defines the emergent pattern content of a Motif entity. This is a quantum component."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"$id\": \"https://familiar.dev/schemas/components/MotifContent.v1.schema.json\","]
#[doc = "  \"title\": \"Motif Content Component\","]
#[doc = "  \"description\": \"Defines the emergent pattern content of a Motif entity. This is a quantum component.\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"fields\","]
#[doc = "    \"physics_properties\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"fields\": {"]
#[doc = "      \"title\": \"MotifContentFields\","]
#[doc = "      \"description\": \"A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"motif_description\","]
#[doc = "        \"motif_type\","]
#[doc = "        \"source_entanglements\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"motif_description\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "          \"title\": \"Description Field\","]
#[doc = "          \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "          \"default\": \"\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"motif_type\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/types/physics/MotifType.v1.json\","]
#[doc = "          \"title\": \"Motif Type\","]
#[doc = "          \"description\": \"A canonical enum of the types of recurring themes or motifs in memory.\","]
#[doc = "          \"type\": \"string\","]
#[doc = "          \"enum\": ["]
#[doc = "            \"Behavioral\","]
#[doc = "            \"Emotional\","]
#[doc = "            \"Situational\","]
#[doc = "            \"Temporal\""]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        \"source_entanglements\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/types/primitives/EntityIdList.v1.json\","]
#[doc = "          \"title\": \"Entity ID List\","]
#[doc = "          \"description\": \"A canonical definition for a list of unique entity identifiers (UUIDs).\","]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"type\": \"string\""]
#[doc = "          },"]
#[doc = "          \"uniqueItems\": true"]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"patternProperties\": {"]
#[doc = "        \"^[a-z_][a-z0-9_]*$\": {"]
#[doc = "          \"oneOf\": ["]
#[doc = "            {"]
#[doc = "              \"description\": \"A direct reference to a shared definition in SharedDefinitions.schema.json.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"$ref\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"$ref\": {"]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"additionalProperties\": false"]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/base/Field.v1.schema.json\","]
#[doc = "              \"title\": \"Base Field\","]
#[doc = "              \"description\": \"Defines the structure for a single, inline field definition within a component.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"description\","]
#[doc = "                \"type\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"constraints\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "                  \"title\": \"Constraint Definition\","]
#[doc = "                  \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"enum\": {"]
#[doc = "                      \"type\": \"array\","]
#[doc = "                      \"items\": {"]
#[doc = "                        \"type\": \"string\""]
#[doc = "                      }"]
#[doc = "                    },"]
#[doc = "                    \"maxLength\": {"]
#[doc = "                      \"type\": \"integer\""]
#[doc = "                    },"]
#[doc = "                    \"maximum\": {"]
#[doc = "                      \"type\": \"number\""]
#[doc = "                    },"]
#[doc = "                    \"minLength\": {"]
#[doc = "                      \"type\": \"integer\""]
#[doc = "                    },"]
#[doc = "                    \"minimum\": {"]
#[doc = "                      \"type\": \"number\""]
#[doc = "                    },"]
#[doc = "                    \"pattern\": {"]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"additionalProperties\": false"]
#[doc = "                },"]
#[doc = "                \"default_value\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "                  \"title\": \"Any Value\","]
#[doc = "                  \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "                  \"type\": ["]
#[doc = "                    \"string\","]
#[doc = "                    \"number\","]
#[doc = "                    \"integer\","]
#[doc = "                    \"boolean\","]
#[doc = "                    \"object\","]
#[doc = "                    \"array\","]
#[doc = "                    \"null\""]
#[doc = "                  ]"]
#[doc = "                },"]
#[doc = "                \"description\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "                  \"title\": \"Description Field\","]
#[doc = "                  \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "                  \"default\": \"\","]
#[doc = "                  \"type\": \"string\""]
#[doc = "                },"]
#[doc = "                \"type\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "                  \"title\": \"Base Type System\","]
#[doc = "                  \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "                  \"oneOf\": ["]
#[doc = "                    {"]
#[doc = "                      \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "                      \"type\": \"string\","]
#[doc = "                      \"enum\": ["]
#[doc = "                        \"string\","]
#[doc = "                        \"boolean\","]
#[doc = "                        \"integer\","]
#[doc = "                        \"number\","]
#[doc = "                        \"f32\","]
#[doc = "                        \"f64\","]
#[doc = "                        \"i32\","]
#[doc = "                        \"i64\","]
#[doc = "                        \"u32\","]
#[doc = "                        \"u64\","]
#[doc = "                        \"uuid\","]
#[doc = "                        \"date-time\","]
#[doc = "                        \"duration\","]
#[doc = "                        \"object\","]
#[doc = "                        \"array\""]
#[doc = "                      ]"]
#[doc = "                    },"]
#[doc = "                    {"]
#[doc = "                      \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"required\": ["]
#[doc = "                        \"$ref\""]
#[doc = "                      ],"]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"$ref\": {"]
#[doc = "                          \"type\": \"string\""]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"additionalProperties\": false"]
#[doc = "                    }"]
#[doc = "                  ],"]
#[doc = "                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                },"]
#[doc = "                \"ui_label\": {"]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "            }"]
#[doc = "          ]"]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"physics_properties\": {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/base/PhysicsProperties.v1.schema.json\","]
#[doc = "      \"title\": \"Base Physics Properties\","]
#[doc = "      \"description\": \"Defines the common physics-related properties for components and laws.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"engine\","]
#[doc = "        \"is_quantum\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"collapse_sensitive\": {"]
#[doc = "          \"description\": \"Indicates if the object is affected by or triggers quantum collapse.\","]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        \"engine\": {"]
#[doc = "          \"description\": \"The physics engine responsible for this object.\","]
#[doc = "          \"enum\": ["]
#[doc = "            \"quantum\","]
#[doc = "            \"classical\","]
#[doc = "            \"hybrid\""]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        \"is_quantum\": {"]
#[doc = "          \"description\": \"Indicates if the object has quantum properties.\","]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "  \"physics_properties\": {"]
#[doc = "    \"engine\": \"quantum\","]
#[doc = "    \"is_quantum\": true"]
#[doc = "  },"]
#[doc = "  \"schema_version\": \"1.4.0\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct MotifContentComponent {
    pub fields: MotifContentFields,
    pub physics_properties: BasePhysicsProperties,
}
impl ::std::convert::From<&MotifContentComponent> for MotifContentComponent {
    fn from(value: &MotifContentComponent) -> Self {
        value.clone()
    }
}
impl MotifContentComponent {
    pub fn builder() -> builder::MotifContentComponent {
        Default::default()
    }
}
#[doc = "A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"MotifContentFields\","]
#[doc = "  \"description\": \"A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"motif_description\","]
#[doc = "    \"motif_type\","]
#[doc = "    \"source_entanglements\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"motif_description\": {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "      \"title\": \"Description Field\","]
#[doc = "      \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "      \"default\": \"\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"motif_type\": {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/types/physics/MotifType.v1.json\","]
#[doc = "      \"title\": \"Motif Type\","]
#[doc = "      \"description\": \"A canonical enum of the types of recurring themes or motifs in memory.\","]
#[doc = "      \"type\": \"string\","]
#[doc = "      \"enum\": ["]
#[doc = "        \"Behavioral\","]
#[doc = "        \"Emotional\","]
#[doc = "        \"Situational\","]
#[doc = "        \"Temporal\""]
#[doc = "      ]"]
#[doc = "    },"]
#[doc = "    \"source_entanglements\": {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/types/primitives/EntityIdList.v1.json\","]
#[doc = "      \"title\": \"Entity ID List\","]
#[doc = "      \"description\": \"A canonical definition for a list of unique entity identifiers (UUIDs).\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      },"]
#[doc = "      \"uniqueItems\": true"]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"patternProperties\": {"]
#[doc = "    \"^[a-z_][a-z0-9_]*$\": {"]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"description\": \"A direct reference to a shared definition in SharedDefinitions.schema.json.\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"required\": ["]
#[doc = "            \"$ref\""]
#[doc = "          ],"]
#[doc = "          \"properties\": {"]
#[doc = "            \"$ref\": {"]
#[doc = "              \"type\": \"string\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/base/Field.v1.schema.json\","]
#[doc = "          \"title\": \"Base Field\","]
#[doc = "          \"description\": \"Defines the structure for a single, inline field definition within a component.\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"required\": ["]
#[doc = "            \"description\","]
#[doc = "            \"type\""]
#[doc = "          ],"]
#[doc = "          \"properties\": {"]
#[doc = "            \"constraints\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "              \"title\": \"Constraint Definition\","]
#[doc = "              \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"properties\": {"]
#[doc = "                \"enum\": {"]
#[doc = "                  \"type\": \"array\","]
#[doc = "                  \"items\": {"]
#[doc = "                    \"type\": \"string\""]
#[doc = "                  }"]
#[doc = "                },"]
#[doc = "                \"maxLength\": {"]
#[doc = "                  \"type\": \"integer\""]
#[doc = "                },"]
#[doc = "                \"maximum\": {"]
#[doc = "                  \"type\": \"number\""]
#[doc = "                },"]
#[doc = "                \"minLength\": {"]
#[doc = "                  \"type\": \"integer\""]
#[doc = "                },"]
#[doc = "                \"minimum\": {"]
#[doc = "                  \"type\": \"number\""]
#[doc = "                },"]
#[doc = "                \"pattern\": {"]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"additionalProperties\": false"]
#[doc = "            },"]
#[doc = "            \"default_value\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "              \"title\": \"Any Value\","]
#[doc = "              \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "              \"type\": ["]
#[doc = "                \"string\","]
#[doc = "                \"number\","]
#[doc = "                \"integer\","]
#[doc = "                \"boolean\","]
#[doc = "                \"object\","]
#[doc = "                \"array\","]
#[doc = "                \"null\""]
#[doc = "              ]"]
#[doc = "            },"]
#[doc = "            \"description\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "              \"title\": \"Description Field\","]
#[doc = "              \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "              \"default\": \"\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"type\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "              \"title\": \"Base Type System\","]
#[doc = "              \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "              \"oneOf\": ["]
#[doc = "                {"]
#[doc = "                  \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "                  \"type\": \"string\","]
#[doc = "                  \"enum\": ["]
#[doc = "                    \"string\","]
#[doc = "                    \"boolean\","]
#[doc = "                    \"integer\","]
#[doc = "                    \"number\","]
#[doc = "                    \"f32\","]
#[doc = "                    \"f64\","]
#[doc = "                    \"i32\","]
#[doc = "                    \"i64\","]
#[doc = "                    \"u32\","]
#[doc = "                    \"u64\","]
#[doc = "                    \"uuid\","]
#[doc = "                    \"date-time\","]
#[doc = "                    \"duration\","]
#[doc = "                    \"object\","]
#[doc = "                    \"array\""]
#[doc = "                  ]"]
#[doc = "                },"]
#[doc = "                {"]
#[doc = "                  \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"$ref\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"$ref\": {"]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"additionalProperties\": false"]
#[doc = "                }"]
#[doc = "              ],"]
#[doc = "              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "            },"]
#[doc = "            \"ui_label\": {"]
#[doc = "              \"type\": \"string\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
pub struct MotifContentFields {
    #[doc = "A canonical, reusable definition for a human-readable description field."]
    pub motif_description: ::std::string::String,
    #[doc = "A canonical enum of the types of recurring themes or motifs in memory."]
    pub motif_type: MotifType,
    #[doc = "A canonical definition for a list of unique entity identifiers (UUIDs)."]
    pub source_entanglements: Vec<::std::string::String>,
}
impl ::std::convert::From<&MotifContentFields> for MotifContentFields {
    fn from(value: &MotifContentFields) -> Self {
        value.clone()
    }
}
impl MotifContentFields {
    pub fn builder() -> builder::MotifContentFields {
        Default::default()
    }
}
#[doc = "`MotifPhysicsState`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"MotifPhysicsState\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"quantum\","]
#[doc = "    \"universal\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"quantum\": {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/components/QuantumState.v1.schema.json\","]
#[doc = "      \"title\": \"Quantum State Component\","]
#[doc = "      \"description\": \"Manages the quantum properties of an entity, including its superposition and entanglement.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"fields\","]
#[doc = "        \"physics_properties\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"fields\": {"]
#[doc = "          \"title\": \"BaseFields\","]
#[doc = "          \"description\": \"A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"patternProperties\": {"]
#[doc = "            \"^[a-z_][a-z0-9_]*$\": {"]
#[doc = "              \"oneOf\": ["]
#[doc = "                {"]
#[doc = "                  \"description\": \"A direct reference to a shared definition in SharedDefinitions.schema.json.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"$ref\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"$ref\": {"]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"additionalProperties\": false"]
#[doc = "                },"]
#[doc = "                {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/base/Field.v1.schema.json\","]
#[doc = "                  \"title\": \"Base Field\","]
#[doc = "                  \"description\": \"Defines the structure for a single, inline field definition within a component.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"description\","]
#[doc = "                    \"type\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"constraints\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "                      \"title\": \"Constraint Definition\","]
#[doc = "                      \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"enum\": {"]
#[doc = "                          \"type\": \"array\","]
#[doc = "                          \"items\": {"]
#[doc = "                            \"type\": \"string\""]
#[doc = "                          }"]
#[doc = "                        },"]
#[doc = "                        \"maxLength\": {"]
#[doc = "                          \"type\": \"integer\""]
#[doc = "                        },"]
#[doc = "                        \"maximum\": {"]
#[doc = "                          \"type\": \"number\""]
#[doc = "                        },"]
#[doc = "                        \"minLength\": {"]
#[doc = "                          \"type\": \"integer\""]
#[doc = "                        },"]
#[doc = "                        \"minimum\": {"]
#[doc = "                          \"type\": \"number\""]
#[doc = "                        },"]
#[doc = "                        \"pattern\": {"]
#[doc = "                          \"type\": \"string\""]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"additionalProperties\": false"]
#[doc = "                    },"]
#[doc = "                    \"default_value\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "                      \"title\": \"Any Value\","]
#[doc = "                      \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "                      \"type\": ["]
#[doc = "                        \"string\","]
#[doc = "                        \"number\","]
#[doc = "                        \"integer\","]
#[doc = "                        \"boolean\","]
#[doc = "                        \"object\","]
#[doc = "                        \"array\","]
#[doc = "                        \"null\""]
#[doc = "                      ]"]
#[doc = "                    },"]
#[doc = "                    \"description\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "                      \"title\": \"Description Field\","]
#[doc = "                      \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "                      \"default\": \"\","]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    },"]
#[doc = "                    \"type\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "                      \"title\": \"Base Type System\","]
#[doc = "                      \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "                      \"oneOf\": ["]
#[doc = "                        {"]
#[doc = "                          \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "                          \"type\": \"string\","]
#[doc = "                          \"enum\": ["]
#[doc = "                            \"string\","]
#[doc = "                            \"boolean\","]
#[doc = "                            \"integer\","]
#[doc = "                            \"number\","]
#[doc = "                            \"f32\","]
#[doc = "                            \"f64\","]
#[doc = "                            \"i32\","]
#[doc = "                            \"i64\","]
#[doc = "                            \"u32\","]
#[doc = "                            \"u64\","]
#[doc = "                            \"uuid\","]
#[doc = "                            \"date-time\","]
#[doc = "                            \"duration\","]
#[doc = "                            \"object\","]
#[doc = "                            \"array\""]
#[doc = "                          ]"]
#[doc = "                        },"]
#[doc = "                        {"]
#[doc = "                          \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "                          \"type\": \"object\","]
#[doc = "                          \"required\": ["]
#[doc = "                            \"$ref\""]
#[doc = "                          ],"]
#[doc = "                          \"properties\": {"]
#[doc = "                            \"$ref\": {"]
#[doc = "                              \"type\": \"string\""]
#[doc = "                            }"]
#[doc = "                          },"]
#[doc = "                          \"additionalProperties\": false"]
#[doc = "                        }"]
#[doc = "                      ],"]
#[doc = "                      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                    },"]
#[doc = "                    \"ui_label\": {"]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                }"]
#[doc = "              ]"]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        },"]
#[doc = "        \"physics_properties\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/base/PhysicsProperties.v1.schema.json\","]
#[doc = "          \"title\": \"Base Physics Properties\","]
#[doc = "          \"description\": \"Defines the common physics-related properties for components and laws.\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"required\": ["]
#[doc = "            \"engine\","]
#[doc = "            \"is_quantum\""]
#[doc = "          ],"]
#[doc = "          \"properties\": {"]
#[doc = "            \"collapse_sensitive\": {"]
#[doc = "              \"description\": \"Indicates if the object is affected by or triggers quantum collapse.\","]
#[doc = "              \"type\": \"boolean\""]
#[doc = "            },"]
#[doc = "            \"engine\": {"]
#[doc = "              \"description\": \"The physics engine responsible for this object.\","]
#[doc = "              \"enum\": ["]
#[doc = "                \"quantum\","]
#[doc = "                \"classical\","]
#[doc = "                \"hybrid\""]
#[doc = "              ]"]
#[doc = "            },"]
#[doc = "            \"is_quantum\": {"]
#[doc = "              \"description\": \"Indicates if the object has quantum properties.\","]
#[doc = "              \"type\": \"boolean\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "      \"fields\": {"]
#[doc = "        \"coherence_score\": {"]
#[doc = "          \"description\": \"The purity of the quantum state (0.0 = maximally mixed, 1.0 = pure).\","]
#[doc = "          \"maximum\": 1.0,"]
#[doc = "          \"minimum\": 0.0,"]
#[doc = "          \"type\": \"number\""]
#[doc = "        },"]
#[doc = "        \"density_matrix\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/types/physics/DensityMatrix.v1.json\","]
#[doc = "          \"description\": \"A 2x2 matrix of complex numbers representing a quantum state.\","]
#[doc = "          \"items\": {"]
#[doc = "            \"items\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/types/physics/ComplexNumber.v1.json\","]
#[doc = "              \"description\": \"Represents a complex number with real and imaginary parts.\","]
#[doc = "              \"properties\": {"]
#[doc = "                \"imaginary\": {"]
#[doc = "                  \"type\": \"number\""]
#[doc = "                },"]
#[doc = "                \"real\": {"]
#[doc = "                  \"type\": \"number\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"required\": ["]
#[doc = "                \"real\","]
#[doc = "                \"imaginary\""]
#[doc = "              ],"]
#[doc = "              \"title\": \"Complex Number\","]
#[doc = "              \"type\": \"object\""]
#[doc = "            },"]
#[doc = "            \"maxItems\": 2,"]
#[doc = "            \"minItems\": 2,"]
#[doc = "            \"type\": \"array\""]
#[doc = "          },"]
#[doc = "          \"maxItems\": 2,"]
#[doc = "          \"minItems\": 2,"]
#[doc = "          \"title\": \"Density Matrix\","]
#[doc = "          \"type\": \"array\""]
#[doc = "        },"]
#[doc = "        \"entanglement_network\": {"]
#[doc = "          \"additionalProperties\": {"]
#[doc = "            \"maximum\": 1.0,"]
#[doc = "            \"minimum\": 0.0,"]
#[doc = "            \"type\": \"number\""]
#[doc = "          },"]
#[doc = "          \"type\": \"object\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"physics_properties\": {"]
#[doc = "        \"engine\": \"quantum\","]
#[doc = "        \"is_quantum\": true"]
#[doc = "      },"]
#[doc = "      \"schema_version\": \"1.0.0\""]
#[doc = "    },"]
#[doc = "    \"universal\": {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/components/UniversalPhysicsState.v1.schema.json\","]
#[doc = "      \"title\": \"Universal Physics State Component\","]
#[doc = "      \"description\": \"The transient, mutable physics state of an entity.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"properties\": {"]
#[doc = "        \"fields\": {"]
#[doc = "          \"title\": \"UniversalPhysicsStateFields\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"required\": ["]
#[doc = "            \"cognitive_perspective\","]
#[doc = "            \"consolidation_rate\","]
#[doc = "            \"decay_rate\","]
#[doc = "            \"energy\","]
#[doc = "            \"entanglement_strength\","]
#[doc = "            \"momentum\","]
#[doc = "            \"quantum_coherence\""]
#[doc = "          ],"]
#[doc = "          \"properties\": {"]
#[doc = "            \"cognitive_perspective\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/fields/CognitivePerspective.v1.schema.json\","]
#[doc = "              \"title\": \"Cognitive Perspective Field\","]
#[doc = "              \"description\": \"The intrinsic 'spin' or 'flavor' of the entity, which generates cognitive dissonance (torsion).\","]
#[doc = "              \"ui_label\": \"Cognitive Perspective\""]
#[doc = "            },"]
#[doc = "            \"consolidation_rate\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/snippets/fields/ConsolidationRate.v1.json\","]
#[doc = "              \"title\": \"Consolidation Rate Field\","]
#[doc = "              \"description\": \"The base rate of memory consolidation for an entity, before multipliers are applied. Represents how quickly an unstable memory becomes stable.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"value\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"value\": {"]
#[doc = "                  \"default\": 0.0,"]
#[doc = "                  \"type\": \"number\","]
#[doc = "                  \"format\": \"double\","]
#[doc = "                  \"maximum\": 1.0,"]
#[doc = "                  \"minimum\": 0.0,"]
#[doc = "                  \"x-python-type\": \"float\","]
#[doc = "                  \"x-rust-type\": \"f64\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"additionalProperties\": false"]
#[doc = "            },"]
#[doc = "            \"decay_rate\": {"]
#[doc = "              \"description\": \"The base rate of energy or coherence decay for an entity, before multipliers are applied.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"value\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"value\": {"]
#[doc = "                  \"default\": 0.01,"]
#[doc = "                  \"type\": \"number\","]
#[doc = "                  \"format\": \"double\","]
#[doc = "                  \"x-python-type\": \"float\","]
#[doc = "                  \"x-rust-type\": \"f64\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"additionalProperties\": false"]
#[doc = "            },"]
#[doc = "            \"energy\": {"]
#[doc = "              \"description\": \"The current energy level of an entity.\","]
#[doc = "              \"default\": 0.1,"]
#[doc = "              \"type\": \"number\""]
#[doc = "            },"]
#[doc = "            \"entanglement_strength\": {"]
#[doc = "              \"description\": \"The overall entanglement strength of this entity with others. Null for classical entities.\","]
#[doc = "              \"default\": null,"]
#[doc = "              \"type\": ["]
#[doc = "                \"number\","]
#[doc = "                \"null\""]
#[doc = "              ],"]
#[doc = "              \"maximum\": 1.0,"]
#[doc = "              \"minimum\": 0.0"]
#[doc = "            },"]
#[doc = "            \"momentum\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/types/physics/Vec6.v1.json\","]
#[doc = "              \"title\": \"6D Physics Vector\","]
#[doc = "              \"description\": \"A reusable data type for a vector of six f64 numbers, used for momentum and forces in the 6 spatial dimensions of the manifold.\","]
#[doc = "              \"type\": \"array\","]
#[doc = "              \"items\": {"]
#[doc = "                \"type\": \"number\""]
#[doc = "              },"]
#[doc = "              \"maxItems\": 6,"]
#[doc = "              \"minItems\": 6"]
#[doc = "            },"]
#[doc = "            \"quantum_coherence\": {"]
#[doc = "              \"description\": \"The quantum coherence level of the entity, representing its degree of superposition. Null for classical entities.\","]
#[doc = "              \"default\": null,"]
#[doc = "              \"type\": ["]
#[doc = "                \"number\","]
#[doc = "                \"null\""]
#[doc = "              ],"]
#[doc = "              \"maximum\": 1.0,"]
#[doc = "              \"minimum\": 0.0"]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "      \"schema_version\": \"3.0.0\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct MotifPhysicsState {
    pub quantum: QuantumStateComponent,
    pub universal: UniversalPhysicsStateComponent,
}
impl ::std::convert::From<&MotifPhysicsState> for MotifPhysicsState {
    fn from(value: &MotifPhysicsState) -> Self {
        value.clone()
    }
}
impl MotifPhysicsState {
    pub fn builder() -> builder::MotifPhysicsState {
        Default::default()
    }
}
#[doc = "A canonical enum of the types of recurring themes or motifs in memory."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"$id\": \"https://familiar.dev/schemas/types/physics/MotifType.v1.json\","]
#[doc = "  \"title\": \"Motif Type\","]
#[doc = "  \"description\": \"A canonical enum of the types of recurring themes or motifs in memory.\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"Behavioral\","]
#[doc = "    \"Emotional\","]
#[doc = "    \"Situational\","]
#[doc = "    \"Temporal\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum MotifType {
    Behavioral,
    Emotional,
    Situational,
    Temporal,
}
impl ::std::convert::From<&Self> for MotifType {
    fn from(value: &MotifType) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display for MotifType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Behavioral => write!(f, "Behavioral"),
            Self::Emotional => write!(f, "Emotional"),
            Self::Situational => write!(f, "Situational"),
            Self::Temporal => write!(f, "Temporal"),
        }
    }
}
impl ::std::str::FromStr for MotifType {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        match value {
            "Behavioral" => Ok(Self::Behavioral),
            "Emotional" => Ok(Self::Emotional),
            "Situational" => Ok(Self::Situational),
            "Temporal" => Ok(Self::Temporal),
            _ => Err("invalid value".into()),
        }
    }
}
impl ::std::convert::TryFrom<&str> for MotifType {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String> for MotifType {
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String> for MotifType {
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "`PersonThreadComponents`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"PersonThreadComponents\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"cognitive_baseline\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"cognitive_baseline\": {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/components/CognitiveBaseline.v1.schema.json\","]
#[doc = "      \"title\": \"Cognitive Baseline Component\","]
#[doc = "      \"description\": \"Defines the innate 'personality' or temperament of a Thread.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"fields\","]
#[doc = "        \"physics_properties\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"fields\": {"]
#[doc = "          \"title\": \"BaseFields\","]
#[doc = "          \"description\": \"A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"patternProperties\": {"]
#[doc = "            \"^[a-z_][a-z0-9_]*$\": {"]
#[doc = "              \"oneOf\": ["]
#[doc = "                {"]
#[doc = "                  \"description\": \"A direct reference to a shared definition in SharedDefinitions.schema.json.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"$ref\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"$ref\": {"]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"additionalProperties\": false"]
#[doc = "                },"]
#[doc = "                {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/base/Field.v1.schema.json\","]
#[doc = "                  \"title\": \"Base Field\","]
#[doc = "                  \"description\": \"Defines the structure for a single, inline field definition within a component.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"description\","]
#[doc = "                    \"type\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"constraints\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "                      \"title\": \"Constraint Definition\","]
#[doc = "                      \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"enum\": {"]
#[doc = "                          \"type\": \"array\","]
#[doc = "                          \"items\": {"]
#[doc = "                            \"type\": \"string\""]
#[doc = "                          }"]
#[doc = "                        },"]
#[doc = "                        \"maxLength\": {"]
#[doc = "                          \"type\": \"integer\""]
#[doc = "                        },"]
#[doc = "                        \"maximum\": {"]
#[doc = "                          \"type\": \"number\""]
#[doc = "                        },"]
#[doc = "                        \"minLength\": {"]
#[doc = "                          \"type\": \"integer\""]
#[doc = "                        },"]
#[doc = "                        \"minimum\": {"]
#[doc = "                          \"type\": \"number\""]
#[doc = "                        },"]
#[doc = "                        \"pattern\": {"]
#[doc = "                          \"type\": \"string\""]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"additionalProperties\": false"]
#[doc = "                    },"]
#[doc = "                    \"default_value\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "                      \"title\": \"Any Value\","]
#[doc = "                      \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "                      \"type\": ["]
#[doc = "                        \"string\","]
#[doc = "                        \"number\","]
#[doc = "                        \"integer\","]
#[doc = "                        \"boolean\","]
#[doc = "                        \"object\","]
#[doc = "                        \"array\","]
#[doc = "                        \"null\""]
#[doc = "                      ]"]
#[doc = "                    },"]
#[doc = "                    \"description\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "                      \"title\": \"Description Field\","]
#[doc = "                      \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "                      \"default\": \"\","]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    },"]
#[doc = "                    \"type\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "                      \"title\": \"Base Type System\","]
#[doc = "                      \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "                      \"oneOf\": ["]
#[doc = "                        {"]
#[doc = "                          \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "                          \"type\": \"string\","]
#[doc = "                          \"enum\": ["]
#[doc = "                            \"string\","]
#[doc = "                            \"boolean\","]
#[doc = "                            \"integer\","]
#[doc = "                            \"number\","]
#[doc = "                            \"f32\","]
#[doc = "                            \"f64\","]
#[doc = "                            \"i32\","]
#[doc = "                            \"i64\","]
#[doc = "                            \"u32\","]
#[doc = "                            \"u64\","]
#[doc = "                            \"uuid\","]
#[doc = "                            \"date-time\","]
#[doc = "                            \"duration\","]
#[doc = "                            \"object\","]
#[doc = "                            \"array\""]
#[doc = "                          ]"]
#[doc = "                        },"]
#[doc = "                        {"]
#[doc = "                          \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "                          \"type\": \"object\","]
#[doc = "                          \"required\": ["]
#[doc = "                            \"$ref\""]
#[doc = "                          ],"]
#[doc = "                          \"properties\": {"]
#[doc = "                            \"$ref\": {"]
#[doc = "                              \"type\": \"string\""]
#[doc = "                            }"]
#[doc = "                          },"]
#[doc = "                          \"additionalProperties\": false"]
#[doc = "                        }"]
#[doc = "                      ],"]
#[doc = "                      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                    },"]
#[doc = "                    \"ui_label\": {"]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                }"]
#[doc = "              ]"]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        },"]
#[doc = "        \"physics_properties\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/base/PhysicsProperties.v1.schema.json\","]
#[doc = "          \"title\": \"Base Physics Properties\","]
#[doc = "          \"description\": \"Defines the common physics-related properties for components and laws.\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"required\": ["]
#[doc = "            \"engine\","]
#[doc = "            \"is_quantum\""]
#[doc = "          ],"]
#[doc = "          \"properties\": {"]
#[doc = "            \"collapse_sensitive\": {"]
#[doc = "              \"description\": \"Indicates if the object is affected by or triggers quantum collapse.\","]
#[doc = "              \"type\": \"boolean\""]
#[doc = "            },"]
#[doc = "            \"engine\": {"]
#[doc = "              \"description\": \"The physics engine responsible for this object.\","]
#[doc = "              \"enum\": ["]
#[doc = "                \"quantum\","]
#[doc = "                \"classical\","]
#[doc = "                \"hybrid\""]
#[doc = "              ]"]
#[doc = "            },"]
#[doc = "            \"is_quantum\": {"]
#[doc = "              \"description\": \"Indicates if the object has quantum properties.\","]
#[doc = "              \"type\": \"boolean\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "      \"fields\": {"]
#[doc = "        \"baseline\": {"]
#[doc = "          \"description\": \"Defines the innate 'personality' or temperament of a Thread, modulating its physics interactions.\","]
#[doc = "          \"properties\": {"]
#[doc = "            \"bond_damping_factor\": {"]
#[doc = "              \"description\": \"How resistant their bonds are to change. (UI Label: Relationship Stability)\","]
#[doc = "              \"maximum\": 2.0,"]
#[doc = "              \"minimum\": 0.5,"]
#[doc = "              \"type\": \"number\""]
#[doc = "            },"]
#[doc = "            \"consolidation_rate_modifier\": {"]
#[doc = "              \"description\": \"How quickly their memories become stable. (UI Label: Memory Consolidation)\","]
#[doc = "              \"maximum\": 1.5,"]
#[doc = "              \"minimum\": 0.8,"]
#[doc = "              \"type\": \"number\""]
#[doc = "            },"]
#[doc = "            \"emotional_volatility\": {"]
#[doc = "              \"description\": \"How strongly emotional events affect this person. (UI Label: Emotional Reactivity)\","]
#[doc = "              \"maximum\": 2.0,"]
#[doc = "              \"minimum\": 0.5,"]
#[doc = "              \"type\": \"number\""]
#[doc = "            },"]
#[doc = "            \"exploration_bias\": {"]
#[doc = "              \"description\": \"Tendency for creative, associative thinking. (UI Label: Openness to Experience)\","]
#[doc = "              \"maximum\": 1.3,"]
#[doc = "              \"minimum\": 0.7,"]
#[doc = "              \"type\": \"number\""]
#[doc = "            },"]
#[doc = "            \"social_energy_factor\": {"]
#[doc = "              \"description\": \"How energized they are by social interactions. (UI Label: Social Energy)\","]
#[doc = "              \"maximum\": 1.2,"]
#[doc = "              \"minimum\": 0.8,"]
#[doc = "              \"type\": \"number\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"required\": ["]
#[doc = "            \"emotional_volatility\","]
#[doc = "            \"social_energy_factor\","]
#[doc = "            \"consolidation_rate_modifier\","]
#[doc = "            \"bond_damping_factor\","]
#[doc = "            \"exploration_bias\""]
#[doc = "          ],"]
#[doc = "          \"type\": \"object\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"physics_properties\": {"]
#[doc = "        \"engine\": \"classical\","]
#[doc = "        \"is_quantum\": false"]
#[doc = "      },"]
#[doc = "      \"schema_version\": \"1.0.0\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct PersonThreadComponents {
    pub cognitive_baseline: CognitiveBaselineComponent,
}
impl ::std::convert::From<&PersonThreadComponents> for PersonThreadComponents {
    fn from(value: &PersonThreadComponents) -> Self {
        value.clone()
    }
}
impl PersonThreadComponents {
    pub fn builder() -> builder::PersonThreadComponents {
        Default::default()
    }
}
#[doc = "`PersonThreadPhysicsState`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"PersonThreadPhysicsState\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"universal\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"universal\": {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/components/UniversalPhysicsState.v1.schema.json\","]
#[doc = "      \"title\": \"Universal Physics State Component\","]
#[doc = "      \"description\": \"The transient, mutable physics state of an entity.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"properties\": {"]
#[doc = "        \"fields\": {"]
#[doc = "          \"title\": \"UniversalPhysicsStateFields\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"required\": ["]
#[doc = "            \"cognitive_perspective\","]
#[doc = "            \"consolidation_rate\","]
#[doc = "            \"decay_rate\","]
#[doc = "            \"energy\","]
#[doc = "            \"entanglement_strength\","]
#[doc = "            \"momentum\","]
#[doc = "            \"quantum_coherence\""]
#[doc = "          ],"]
#[doc = "          \"properties\": {"]
#[doc = "            \"cognitive_perspective\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/fields/CognitivePerspective.v1.schema.json\","]
#[doc = "              \"title\": \"Cognitive Perspective Field\","]
#[doc = "              \"description\": \"The intrinsic 'spin' or 'flavor' of the entity, which generates cognitive dissonance (torsion).\","]
#[doc = "              \"ui_label\": \"Cognitive Perspective\""]
#[doc = "            },"]
#[doc = "            \"consolidation_rate\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/snippets/fields/ConsolidationRate.v1.json\","]
#[doc = "              \"title\": \"Consolidation Rate Field\","]
#[doc = "              \"description\": \"The base rate of memory consolidation for an entity, before multipliers are applied. Represents how quickly an unstable memory becomes stable.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"value\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"value\": {"]
#[doc = "                  \"default\": 0.0,"]
#[doc = "                  \"type\": \"number\","]
#[doc = "                  \"format\": \"double\","]
#[doc = "                  \"maximum\": 1.0,"]
#[doc = "                  \"minimum\": 0.0,"]
#[doc = "                  \"x-python-type\": \"float\","]
#[doc = "                  \"x-rust-type\": \"f64\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"additionalProperties\": false"]
#[doc = "            },"]
#[doc = "            \"decay_rate\": {"]
#[doc = "              \"description\": \"The base rate of energy or coherence decay for an entity, before multipliers are applied.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"value\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"value\": {"]
#[doc = "                  \"default\": 0.01,"]
#[doc = "                  \"type\": \"number\","]
#[doc = "                  \"format\": \"double\","]
#[doc = "                  \"x-python-type\": \"float\","]
#[doc = "                  \"x-rust-type\": \"f64\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"additionalProperties\": false"]
#[doc = "            },"]
#[doc = "            \"energy\": {"]
#[doc = "              \"description\": \"The current energy level of an entity.\","]
#[doc = "              \"default\": 0.1,"]
#[doc = "              \"type\": \"number\""]
#[doc = "            },"]
#[doc = "            \"entanglement_strength\": {"]
#[doc = "              \"description\": \"The overall entanglement strength of this entity with others. Null for classical entities.\","]
#[doc = "              \"default\": null,"]
#[doc = "              \"type\": ["]
#[doc = "                \"number\","]
#[doc = "                \"null\""]
#[doc = "              ],"]
#[doc = "              \"maximum\": 1.0,"]
#[doc = "              \"minimum\": 0.0"]
#[doc = "            },"]
#[doc = "            \"momentum\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/types/physics/Vec6.v1.json\","]
#[doc = "              \"title\": \"6D Physics Vector\","]
#[doc = "              \"description\": \"A reusable data type for a vector of six f64 numbers, used for momentum and forces in the 6 spatial dimensions of the manifold.\","]
#[doc = "              \"type\": \"array\","]
#[doc = "              \"items\": {"]
#[doc = "                \"type\": \"number\""]
#[doc = "              },"]
#[doc = "              \"maxItems\": 6,"]
#[doc = "              \"minItems\": 6"]
#[doc = "            },"]
#[doc = "            \"quantum_coherence\": {"]
#[doc = "              \"description\": \"The quantum coherence level of the entity, representing its degree of superposition. Null for classical entities.\","]
#[doc = "              \"default\": null,"]
#[doc = "              \"type\": ["]
#[doc = "                \"number\","]
#[doc = "                \"null\""]
#[doc = "              ],"]
#[doc = "              \"maximum\": 1.0,"]
#[doc = "              \"minimum\": 0.0"]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "      \"schema_version\": \"3.0.0\""]
#[doc = "    }"]
#[doc = "  }"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct PersonThreadPhysicsState {
    pub universal: UniversalPhysicsStateComponent,
}
impl ::std::convert::From<&PersonThreadPhysicsState> for PersonThreadPhysicsState {
    fn from(value: &PersonThreadPhysicsState) -> Self {
        value.clone()
    }
}
impl PersonThreadPhysicsState {
    pub fn builder() -> builder::PersonThreadPhysicsState {
        Default::default()
    }
}
#[doc = "Manages the quantum properties of an entity, including its superposition and entanglement."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"$id\": \"https://familiar.dev/schemas/components/QuantumState.v1.schema.json\","]
#[doc = "  \"title\": \"Quantum State Component\","]
#[doc = "  \"description\": \"Manages the quantum properties of an entity, including its superposition and entanglement.\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"fields\","]
#[doc = "    \"physics_properties\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"fields\": {"]
#[doc = "      \"title\": \"BaseFields\","]
#[doc = "      \"description\": \"A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"patternProperties\": {"]
#[doc = "        \"^[a-z_][a-z0-9_]*$\": {"]
#[doc = "          \"oneOf\": ["]
#[doc = "            {"]
#[doc = "              \"description\": \"A direct reference to a shared definition in SharedDefinitions.schema.json.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"$ref\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"$ref\": {"]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"additionalProperties\": false"]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/base/Field.v1.schema.json\","]
#[doc = "              \"title\": \"Base Field\","]
#[doc = "              \"description\": \"Defines the structure for a single, inline field definition within a component.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"description\","]
#[doc = "                \"type\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"constraints\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "                  \"title\": \"Constraint Definition\","]
#[doc = "                  \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"enum\": {"]
#[doc = "                      \"type\": \"array\","]
#[doc = "                      \"items\": {"]
#[doc = "                        \"type\": \"string\""]
#[doc = "                      }"]
#[doc = "                    },"]
#[doc = "                    \"maxLength\": {"]
#[doc = "                      \"type\": \"integer\""]
#[doc = "                    },"]
#[doc = "                    \"maximum\": {"]
#[doc = "                      \"type\": \"number\""]
#[doc = "                    },"]
#[doc = "                    \"minLength\": {"]
#[doc = "                      \"type\": \"integer\""]
#[doc = "                    },"]
#[doc = "                    \"minimum\": {"]
#[doc = "                      \"type\": \"number\""]
#[doc = "                    },"]
#[doc = "                    \"pattern\": {"]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"additionalProperties\": false"]
#[doc = "                },"]
#[doc = "                \"default_value\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "                  \"title\": \"Any Value\","]
#[doc = "                  \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "                  \"type\": ["]
#[doc = "                    \"string\","]
#[doc = "                    \"number\","]
#[doc = "                    \"integer\","]
#[doc = "                    \"boolean\","]
#[doc = "                    \"object\","]
#[doc = "                    \"array\","]
#[doc = "                    \"null\""]
#[doc = "                  ]"]
#[doc = "                },"]
#[doc = "                \"description\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "                  \"title\": \"Description Field\","]
#[doc = "                  \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "                  \"default\": \"\","]
#[doc = "                  \"type\": \"string\""]
#[doc = "                },"]
#[doc = "                \"type\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "                  \"title\": \"Base Type System\","]
#[doc = "                  \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "                  \"oneOf\": ["]
#[doc = "                    {"]
#[doc = "                      \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "                      \"type\": \"string\","]
#[doc = "                      \"enum\": ["]
#[doc = "                        \"string\","]
#[doc = "                        \"boolean\","]
#[doc = "                        \"integer\","]
#[doc = "                        \"number\","]
#[doc = "                        \"f32\","]
#[doc = "                        \"f64\","]
#[doc = "                        \"i32\","]
#[doc = "                        \"i64\","]
#[doc = "                        \"u32\","]
#[doc = "                        \"u64\","]
#[doc = "                        \"uuid\","]
#[doc = "                        \"date-time\","]
#[doc = "                        \"duration\","]
#[doc = "                        \"object\","]
#[doc = "                        \"array\""]
#[doc = "                      ]"]
#[doc = "                    },"]
#[doc = "                    {"]
#[doc = "                      \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"required\": ["]
#[doc = "                        \"$ref\""]
#[doc = "                      ],"]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"$ref\": {"]
#[doc = "                          \"type\": \"string\""]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"additionalProperties\": false"]
#[doc = "                    }"]
#[doc = "                  ],"]
#[doc = "                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                },"]
#[doc = "                \"ui_label\": {"]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "            }"]
#[doc = "          ]"]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"physics_properties\": {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/base/PhysicsProperties.v1.schema.json\","]
#[doc = "      \"title\": \"Base Physics Properties\","]
#[doc = "      \"description\": \"Defines the common physics-related properties for components and laws.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"engine\","]
#[doc = "        \"is_quantum\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"collapse_sensitive\": {"]
#[doc = "          \"description\": \"Indicates if the object is affected by or triggers quantum collapse.\","]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        \"engine\": {"]
#[doc = "          \"description\": \"The physics engine responsible for this object.\","]
#[doc = "          \"enum\": ["]
#[doc = "            \"quantum\","]
#[doc = "            \"classical\","]
#[doc = "            \"hybrid\""]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        \"is_quantum\": {"]
#[doc = "          \"description\": \"Indicates if the object has quantum properties.\","]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "  \"fields\": {"]
#[doc = "    \"coherence_score\": {"]
#[doc = "      \"description\": \"The purity of the quantum state (0.0 = maximally mixed, 1.0 = pure).\","]
#[doc = "      \"maximum\": 1.0,"]
#[doc = "      \"minimum\": 0.0,"]
#[doc = "      \"type\": \"number\""]
#[doc = "    },"]
#[doc = "    \"density_matrix\": {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/types/physics/DensityMatrix.v1.json\","]
#[doc = "      \"description\": \"A 2x2 matrix of complex numbers representing a quantum state.\","]
#[doc = "      \"items\": {"]
#[doc = "        \"items\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/types/physics/ComplexNumber.v1.json\","]
#[doc = "          \"description\": \"Represents a complex number with real and imaginary parts.\","]
#[doc = "          \"properties\": {"]
#[doc = "            \"imaginary\": {"]
#[doc = "              \"type\": \"number\""]
#[doc = "            },"]
#[doc = "            \"real\": {"]
#[doc = "              \"type\": \"number\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"required\": ["]
#[doc = "            \"real\","]
#[doc = "            \"imaginary\""]
#[doc = "          ],"]
#[doc = "          \"title\": \"Complex Number\","]
#[doc = "          \"type\": \"object\""]
#[doc = "        },"]
#[doc = "        \"maxItems\": 2,"]
#[doc = "        \"minItems\": 2,"]
#[doc = "        \"type\": \"array\""]
#[doc = "      },"]
#[doc = "      \"maxItems\": 2,"]
#[doc = "      \"minItems\": 2,"]
#[doc = "      \"title\": \"Density Matrix\","]
#[doc = "      \"type\": \"array\""]
#[doc = "    },"]
#[doc = "    \"entanglement_network\": {"]
#[doc = "      \"additionalProperties\": {"]
#[doc = "        \"maximum\": 1.0,"]
#[doc = "        \"minimum\": 0.0,"]
#[doc = "        \"type\": \"number\""]
#[doc = "      },"]
#[doc = "      \"type\": \"object\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"physics_properties\": {"]
#[doc = "    \"engine\": \"quantum\","]
#[doc = "    \"is_quantum\": true"]
#[doc = "  },"]
#[doc = "  \"schema_version\": \"1.0.0\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct QuantumStateComponent {
    #[doc = "A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition."]
    pub fields: ::std::collections::HashMap<
        QuantumStateComponentFieldsKey,
        QuantumStateComponentFieldsValue,
    >,
    pub physics_properties: BasePhysicsProperties,
}
impl ::std::convert::From<&QuantumStateComponent> for QuantumStateComponent {
    fn from(value: &QuantumStateComponent) -> Self {
        value.clone()
    }
}
impl QuantumStateComponent {
    pub fn builder() -> builder::QuantumStateComponent {
        Default::default()
    }
}
#[doc = "`QuantumStateComponentFieldsKey`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"pattern\": \"^[a-z_][a-z0-9_]*$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct QuantumStateComponentFieldsKey(::std::string::String);
impl ::std::ops::Deref for QuantumStateComponentFieldsKey {
    type Target = ::std::string::String;
    fn deref(&self) -> &::std::string::String {
        &self.0
    }
}
impl ::std::convert::From<QuantumStateComponentFieldsKey> for ::std::string::String {
    fn from(value: QuantumStateComponentFieldsKey) -> Self {
        value.0
    }
}
impl ::std::convert::From<&QuantumStateComponentFieldsKey> for QuantumStateComponentFieldsKey {
    fn from(value: &QuantumStateComponentFieldsKey) -> Self {
        value.clone()
    }
}
impl ::std::str::FromStr for QuantumStateComponentFieldsKey {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        static PATTERN: ::std::sync::LazyLock<::regress::Regex> =
            ::std::sync::LazyLock::new(|| ::regress::Regex::new("^[a-z_][a-z0-9_]*$").unwrap());
        if (&*PATTERN).find(value).is_none() {
            return Err("doesn't match pattern \"^[a-z_][a-z0-9_]*$\"".into());
        }
        Ok(Self(value.to_string()))
    }
}
impl ::std::convert::TryFrom<&str> for QuantumStateComponentFieldsKey {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String> for QuantumStateComponentFieldsKey {
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String> for QuantumStateComponentFieldsKey {
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl<'de> ::serde::Deserialize<'de> for QuantumStateComponentFieldsKey {
    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        ::std::string::String::deserialize(deserializer)?
            .parse()
            .map_err(|e: self::error::ConversionError| {
                <D::Error as ::serde::de::Error>::custom(e.to_string())
            })
    }
}
#[doc = "`QuantumStateComponentFieldsValue`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"description\": \"A direct reference to a shared definition in SharedDefinitions.schema.json.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"$ref\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"$ref\": {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/base/Field.v1.schema.json\","]
#[doc = "      \"title\": \"Base Field\","]
#[doc = "      \"description\": \"Defines the structure for a single, inline field definition within a component.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"description\","]
#[doc = "        \"type\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"constraints\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "          \"title\": \"Constraint Definition\","]
#[doc = "          \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"properties\": {"]
#[doc = "            \"enum\": {"]
#[doc = "              \"type\": \"array\","]
#[doc = "              \"items\": {"]
#[doc = "                \"type\": \"string\""]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"maxLength\": {"]
#[doc = "              \"type\": \"integer\""]
#[doc = "            },"]
#[doc = "            \"maximum\": {"]
#[doc = "              \"type\": \"number\""]
#[doc = "            },"]
#[doc = "            \"minLength\": {"]
#[doc = "              \"type\": \"integer\""]
#[doc = "            },"]
#[doc = "            \"minimum\": {"]
#[doc = "              \"type\": \"number\""]
#[doc = "            },"]
#[doc = "            \"pattern\": {"]
#[doc = "              \"type\": \"string\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        },"]
#[doc = "        \"default_value\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "          \"title\": \"Any Value\","]
#[doc = "          \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "          \"type\": ["]
#[doc = "            \"string\","]
#[doc = "            \"number\","]
#[doc = "            \"integer\","]
#[doc = "            \"boolean\","]
#[doc = "            \"object\","]
#[doc = "            \"array\","]
#[doc = "            \"null\""]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        \"description\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "          \"title\": \"Description Field\","]
#[doc = "          \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "          \"default\": \"\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"type\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "          \"title\": \"Base Type System\","]
#[doc = "          \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "          \"oneOf\": ["]
#[doc = "            {"]
#[doc = "              \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "              \"type\": \"string\","]
#[doc = "              \"enum\": ["]
#[doc = "                \"string\","]
#[doc = "                \"boolean\","]
#[doc = "                \"integer\","]
#[doc = "                \"number\","]
#[doc = "                \"f32\","]
#[doc = "                \"f64\","]
#[doc = "                \"i32\","]
#[doc = "                \"i64\","]
#[doc = "                \"u32\","]
#[doc = "                \"u64\","]
#[doc = "                \"uuid\","]
#[doc = "                \"date-time\","]
#[doc = "                \"duration\","]
#[doc = "                \"object\","]
#[doc = "                \"array\""]
#[doc = "              ]"]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"$ref\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"$ref\": {"]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"additionalProperties\": false"]
#[doc = "            }"]
#[doc = "          ],"]
#[doc = "          \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "        },"]
#[doc = "        \"ui_label\": {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(untagged, deny_unknown_fields)]
pub enum QuantumStateComponentFieldsValue {
    Variant0 {
        #[serde(rename = "$ref")]
        ref_: ::std::string::String,
    },
    Variant1 {
        #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
        constraints: ::std::option::Option<ConstraintDefinition>,
        #[doc = "Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values."]
        #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
        default_value: ::std::option::Option<::serde_json::Value>,
        #[doc = "A canonical, reusable definition for a human-readable description field."]
        description: ::std::string::String,
        #[doc = "The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema."]
        #[serde(rename = "type")]
        type_: BaseTypeSystem,
        #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
        ui_label: ::std::option::Option<::std::string::String>,
    },
}
impl ::std::convert::From<&Self> for QuantumStateComponentFieldsValue {
    fn from(value: &QuantumStateComponentFieldsValue) -> Self {
        value.clone()
    }
}
#[doc = "A canonical enum of all possible relationship types between Threads."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"$id\": \"https://familiar.dev/schemas/types/social/RelationshipType.v1.json\","]
#[doc = "  \"title\": \"Relationship Type\","]
#[doc = "  \"description\": \"A canonical enum of all possible relationship types between Threads.\","]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"enum\": ["]
#[doc = "    \"Family\","]
#[doc = "    \"Friend\","]
#[doc = "    \"Romantic\","]
#[doc = "    \"Professional\","]
#[doc = "    \"Acquaintance\","]
#[doc = "    \"Adversarial\""]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(
    :: serde :: Deserialize,
    :: serde :: Serialize,
    Clone,
    Copy,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
)]
pub enum RelationshipType {
    Family,
    Friend,
    Romantic,
    Professional,
    Acquaintance,
    Adversarial,
}
impl ::std::convert::From<&Self> for RelationshipType {
    fn from(value: &RelationshipType) -> Self {
        value.clone()
    }
}
impl ::std::fmt::Display for RelationshipType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match *self {
            Self::Family => write!(f, "Family"),
            Self::Friend => write!(f, "Friend"),
            Self::Romantic => write!(f, "Romantic"),
            Self::Professional => write!(f, "Professional"),
            Self::Acquaintance => write!(f, "Acquaintance"),
            Self::Adversarial => write!(f, "Adversarial"),
        }
    }
}
impl ::std::str::FromStr for RelationshipType {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        match value {
            "Family" => Ok(Self::Family),
            "Friend" => Ok(Self::Friend),
            "Romantic" => Ok(Self::Romantic),
            "Professional" => Ok(Self::Professional),
            "Acquaintance" => Ok(Self::Acquaintance),
            "Adversarial" => Ok(Self::Adversarial),
            _ => Err("invalid value".into()),
        }
    }
}
impl ::std::convert::TryFrom<&str> for RelationshipType {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String> for RelationshipType {
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String> for RelationshipType {
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
#[doc = "Tracks the completion status of an Intent."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"$id\": \"https://familiar.dev/schemas/components/TaskStatus.v1.schema.json\","]
#[doc = "  \"title\": \"Task Status Component\","]
#[doc = "  \"description\": \"Tracks the completion status of an Intent.\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"fields\","]
#[doc = "    \"physics_properties\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"fields\": {"]
#[doc = "      \"title\": \"BaseFields\","]
#[doc = "      \"description\": \"A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"patternProperties\": {"]
#[doc = "        \"^[a-z_][a-z0-9_]*$\": {"]
#[doc = "          \"oneOf\": ["]
#[doc = "            {"]
#[doc = "              \"description\": \"A direct reference to a shared definition in SharedDefinitions.schema.json.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"$ref\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"$ref\": {"]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"additionalProperties\": false"]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/base/Field.v1.schema.json\","]
#[doc = "              \"title\": \"Base Field\","]
#[doc = "              \"description\": \"Defines the structure for a single, inline field definition within a component.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"description\","]
#[doc = "                \"type\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"constraints\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "                  \"title\": \"Constraint Definition\","]
#[doc = "                  \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"enum\": {"]
#[doc = "                      \"type\": \"array\","]
#[doc = "                      \"items\": {"]
#[doc = "                        \"type\": \"string\""]
#[doc = "                      }"]
#[doc = "                    },"]
#[doc = "                    \"maxLength\": {"]
#[doc = "                      \"type\": \"integer\""]
#[doc = "                    },"]
#[doc = "                    \"maximum\": {"]
#[doc = "                      \"type\": \"number\""]
#[doc = "                    },"]
#[doc = "                    \"minLength\": {"]
#[doc = "                      \"type\": \"integer\""]
#[doc = "                    },"]
#[doc = "                    \"minimum\": {"]
#[doc = "                      \"type\": \"number\""]
#[doc = "                    },"]
#[doc = "                    \"pattern\": {"]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"additionalProperties\": false"]
#[doc = "                },"]
#[doc = "                \"default_value\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "                  \"title\": \"Any Value\","]
#[doc = "                  \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "                  \"type\": ["]
#[doc = "                    \"string\","]
#[doc = "                    \"number\","]
#[doc = "                    \"integer\","]
#[doc = "                    \"boolean\","]
#[doc = "                    \"object\","]
#[doc = "                    \"array\","]
#[doc = "                    \"null\""]
#[doc = "                  ]"]
#[doc = "                },"]
#[doc = "                \"description\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "                  \"title\": \"Description Field\","]
#[doc = "                  \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "                  \"default\": \"\","]
#[doc = "                  \"type\": \"string\""]
#[doc = "                },"]
#[doc = "                \"type\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "                  \"title\": \"Base Type System\","]
#[doc = "                  \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "                  \"oneOf\": ["]
#[doc = "                    {"]
#[doc = "                      \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "                      \"type\": \"string\","]
#[doc = "                      \"enum\": ["]
#[doc = "                        \"string\","]
#[doc = "                        \"boolean\","]
#[doc = "                        \"integer\","]
#[doc = "                        \"number\","]
#[doc = "                        \"f32\","]
#[doc = "                        \"f64\","]
#[doc = "                        \"i32\","]
#[doc = "                        \"i64\","]
#[doc = "                        \"u32\","]
#[doc = "                        \"u64\","]
#[doc = "                        \"uuid\","]
#[doc = "                        \"date-time\","]
#[doc = "                        \"duration\","]
#[doc = "                        \"object\","]
#[doc = "                        \"array\""]
#[doc = "                      ]"]
#[doc = "                    },"]
#[doc = "                    {"]
#[doc = "                      \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"required\": ["]
#[doc = "                        \"$ref\""]
#[doc = "                      ],"]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"$ref\": {"]
#[doc = "                          \"type\": \"string\""]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"additionalProperties\": false"]
#[doc = "                    }"]
#[doc = "                  ],"]
#[doc = "                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                },"]
#[doc = "                \"ui_label\": {"]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "            }"]
#[doc = "          ]"]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"physics_properties\": {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/base/PhysicsProperties.v1.schema.json\","]
#[doc = "      \"title\": \"Base Physics Properties\","]
#[doc = "      \"description\": \"Defines the common physics-related properties for components and laws.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"engine\","]
#[doc = "        \"is_quantum\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"collapse_sensitive\": {"]
#[doc = "          \"description\": \"Indicates if the object is affected by or triggers quantum collapse.\","]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        \"engine\": {"]
#[doc = "          \"description\": \"The physics engine responsible for this object.\","]
#[doc = "          \"enum\": ["]
#[doc = "            \"quantum\","]
#[doc = "            \"classical\","]
#[doc = "            \"hybrid\""]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        \"is_quantum\": {"]
#[doc = "          \"description\": \"Indicates if the object has quantum properties.\","]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "  \"fields\": {"]
#[doc = "    \"completed_at\": {"]
#[doc = "      \"description\": \"The timestamp when the task was marked as completed. This triggers its consumption into a Moment.\","]
#[doc = "      \"nullable\": true,"]
#[doc = "      \"type\": \"date-time\""]
#[doc = "    },"]
#[doc = "    \"status\": {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/fields/Status.v1.json\","]
#[doc = "      \"default\": \"Pending\","]
#[doc = "      \"description\": \"The current status of a task or process.\","]
#[doc = "      \"enum\": ["]
#[doc = "        \"Pending\","]
#[doc = "        \"InProgress\","]
#[doc = "        \"Completed\","]
#[doc = "        \"Cancelled\""]
#[doc = "      ],"]
#[doc = "      \"title\": \"Status Field\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"physics_properties\": {"]
#[doc = "    \"engine\": \"classical\","]
#[doc = "    \"is_quantum\": false"]
#[doc = "  },"]
#[doc = "  \"schema_version\": \"1.1.0\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct TaskStatusComponent {
    #[doc = "A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition."]
    pub fields:
        ::std::collections::HashMap<TaskStatusComponentFieldsKey, TaskStatusComponentFieldsValue>,
    pub physics_properties: BasePhysicsProperties,
}
impl ::std::convert::From<&TaskStatusComponent> for TaskStatusComponent {
    fn from(value: &TaskStatusComponent) -> Self {
        value.clone()
    }
}
impl TaskStatusComponent {
    pub fn builder() -> builder::TaskStatusComponent {
        Default::default()
    }
}
#[doc = "`TaskStatusComponentFieldsKey`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"pattern\": \"^[a-z_][a-z0-9_]*$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct TaskStatusComponentFieldsKey(::std::string::String);
impl ::std::ops::Deref for TaskStatusComponentFieldsKey {
    type Target = ::std::string::String;
    fn deref(&self) -> &::std::string::String {
        &self.0
    }
}
impl ::std::convert::From<TaskStatusComponentFieldsKey> for ::std::string::String {
    fn from(value: TaskStatusComponentFieldsKey) -> Self {
        value.0
    }
}
impl ::std::convert::From<&TaskStatusComponentFieldsKey> for TaskStatusComponentFieldsKey {
    fn from(value: &TaskStatusComponentFieldsKey) -> Self {
        value.clone()
    }
}
impl ::std::str::FromStr for TaskStatusComponentFieldsKey {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        static PATTERN: ::std::sync::LazyLock<::regress::Regex> =
            ::std::sync::LazyLock::new(|| ::regress::Regex::new("^[a-z_][a-z0-9_]*$").unwrap());
        if (&*PATTERN).find(value).is_none() {
            return Err("doesn't match pattern \"^[a-z_][a-z0-9_]*$\"".into());
        }
        Ok(Self(value.to_string()))
    }
}
impl ::std::convert::TryFrom<&str> for TaskStatusComponentFieldsKey {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String> for TaskStatusComponentFieldsKey {
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String> for TaskStatusComponentFieldsKey {
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl<'de> ::serde::Deserialize<'de> for TaskStatusComponentFieldsKey {
    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        ::std::string::String::deserialize(deserializer)?
            .parse()
            .map_err(|e: self::error::ConversionError| {
                <D::Error as ::serde::de::Error>::custom(e.to_string())
            })
    }
}
#[doc = "`TaskStatusComponentFieldsValue`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"description\": \"A direct reference to a shared definition in SharedDefinitions.schema.json.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"$ref\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"$ref\": {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/base/Field.v1.schema.json\","]
#[doc = "      \"title\": \"Base Field\","]
#[doc = "      \"description\": \"Defines the structure for a single, inline field definition within a component.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"description\","]
#[doc = "        \"type\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"constraints\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "          \"title\": \"Constraint Definition\","]
#[doc = "          \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"properties\": {"]
#[doc = "            \"enum\": {"]
#[doc = "              \"type\": \"array\","]
#[doc = "              \"items\": {"]
#[doc = "                \"type\": \"string\""]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"maxLength\": {"]
#[doc = "              \"type\": \"integer\""]
#[doc = "            },"]
#[doc = "            \"maximum\": {"]
#[doc = "              \"type\": \"number\""]
#[doc = "            },"]
#[doc = "            \"minLength\": {"]
#[doc = "              \"type\": \"integer\""]
#[doc = "            },"]
#[doc = "            \"minimum\": {"]
#[doc = "              \"type\": \"number\""]
#[doc = "            },"]
#[doc = "            \"pattern\": {"]
#[doc = "              \"type\": \"string\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        },"]
#[doc = "        \"default_value\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "          \"title\": \"Any Value\","]
#[doc = "          \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "          \"type\": ["]
#[doc = "            \"string\","]
#[doc = "            \"number\","]
#[doc = "            \"integer\","]
#[doc = "            \"boolean\","]
#[doc = "            \"object\","]
#[doc = "            \"array\","]
#[doc = "            \"null\""]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        \"description\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "          \"title\": \"Description Field\","]
#[doc = "          \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "          \"default\": \"\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"type\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "          \"title\": \"Base Type System\","]
#[doc = "          \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "          \"oneOf\": ["]
#[doc = "            {"]
#[doc = "              \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "              \"type\": \"string\","]
#[doc = "              \"enum\": ["]
#[doc = "                \"string\","]
#[doc = "                \"boolean\","]
#[doc = "                \"integer\","]
#[doc = "                \"number\","]
#[doc = "                \"f32\","]
#[doc = "                \"f64\","]
#[doc = "                \"i32\","]
#[doc = "                \"i64\","]
#[doc = "                \"u32\","]
#[doc = "                \"u64\","]
#[doc = "                \"uuid\","]
#[doc = "                \"date-time\","]
#[doc = "                \"duration\","]
#[doc = "                \"object\","]
#[doc = "                \"array\""]
#[doc = "              ]"]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"$ref\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"$ref\": {"]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"additionalProperties\": false"]
#[doc = "            }"]
#[doc = "          ],"]
#[doc = "          \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "        },"]
#[doc = "        \"ui_label\": {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(untagged, deny_unknown_fields)]
pub enum TaskStatusComponentFieldsValue {
    Variant0 {
        #[serde(rename = "$ref")]
        ref_: ::std::string::String,
    },
    Variant1 {
        #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
        constraints: ::std::option::Option<ConstraintDefinition>,
        #[doc = "Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values."]
        #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
        default_value: ::std::option::Option<::serde_json::Value>,
        #[doc = "A canonical, reusable definition for a human-readable description field."]
        description: ::std::string::String,
        #[doc = "The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema."]
        #[serde(rename = "type")]
        type_: BaseTypeSystem,
        #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
        ui_label: ::std::option::Option<::std::string::String>,
    },
}
impl ::std::convert::From<&Self> for TaskStatusComponentFieldsValue {
    fn from(value: &TaskStatusComponentFieldsValue) -> Self {
        value.clone()
    }
}
#[doc = "A polymorphic Thread entity that can be either a PersonThread or a GenericThread."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"$id\": \"https://familiar.dev/schemas/entities/thread.v3.schema.json\","]
#[doc = "  \"title\": \"Thread\","]
#[doc = "  \"description\": \"A polymorphic Thread entity that can be either a PersonThread or a GenericThread.\","]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/entities/PersonThread.v1.schema.json\","]
#[doc = "      \"title\": \"Person Thread\","]
#[doc = "      \"description\": \"A Thread representing a person, which MUST have a CognitiveBaseline.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"components\","]
#[doc = "        \"created_at\","]
#[doc = "        \"entity_id\","]
#[doc = "        \"identity\","]
#[doc = "        \"physics_state\","]
#[doc = "        \"tenant_id\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"components\": {"]
#[doc = "          \"title\": \"PersonThreadComponents\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"required\": ["]
#[doc = "            \"cognitive_baseline\""]
#[doc = "          ],"]
#[doc = "          \"properties\": {"]
#[doc = "            \"cognitive_baseline\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/components/CognitiveBaseline.v1.schema.json\","]
#[doc = "              \"title\": \"Cognitive Baseline Component\","]
#[doc = "              \"description\": \"Defines the innate 'personality' or temperament of a Thread.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"fields\","]
#[doc = "                \"physics_properties\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"fields\": {"]
#[doc = "                  \"title\": \"BaseFields\","]
#[doc = "                  \"description\": \"A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"patternProperties\": {"]
#[doc = "                    \"^[a-z_][a-z0-9_]*$\": {"]
#[doc = "                      \"oneOf\": ["]
#[doc = "                        {"]
#[doc = "                          \"description\": \"A direct reference to a shared definition in SharedDefinitions.schema.json.\","]
#[doc = "                          \"type\": \"object\","]
#[doc = "                          \"required\": ["]
#[doc = "                            \"$ref\""]
#[doc = "                          ],"]
#[doc = "                          \"properties\": {"]
#[doc = "                            \"$ref\": {"]
#[doc = "                              \"type\": \"string\""]
#[doc = "                            }"]
#[doc = "                          },"]
#[doc = "                          \"additionalProperties\": false"]
#[doc = "                        },"]
#[doc = "                        {"]
#[doc = "                          \"$id\": \"https://familiar.dev/schemas/base/Field.v1.schema.json\","]
#[doc = "                          \"title\": \"Base Field\","]
#[doc = "                          \"description\": \"Defines the structure for a single, inline field definition within a component.\","]
#[doc = "                          \"type\": \"object\","]
#[doc = "                          \"required\": ["]
#[doc = "                            \"description\","]
#[doc = "                            \"type\""]
#[doc = "                          ],"]
#[doc = "                          \"properties\": {"]
#[doc = "                            \"constraints\": {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "                              \"title\": \"Constraint Definition\","]
#[doc = "                              \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "                              \"type\": \"object\","]
#[doc = "                              \"properties\": {"]
#[doc = "                                \"enum\": {"]
#[doc = "                                  \"type\": \"array\","]
#[doc = "                                  \"items\": {"]
#[doc = "                                    \"type\": \"string\""]
#[doc = "                                  }"]
#[doc = "                                },"]
#[doc = "                                \"maxLength\": {"]
#[doc = "                                  \"type\": \"integer\""]
#[doc = "                                },"]
#[doc = "                                \"maximum\": {"]
#[doc = "                                  \"type\": \"number\""]
#[doc = "                                },"]
#[doc = "                                \"minLength\": {"]
#[doc = "                                  \"type\": \"integer\""]
#[doc = "                                },"]
#[doc = "                                \"minimum\": {"]
#[doc = "                                  \"type\": \"number\""]
#[doc = "                                },"]
#[doc = "                                \"pattern\": {"]
#[doc = "                                  \"type\": \"string\""]
#[doc = "                                }"]
#[doc = "                              },"]
#[doc = "                              \"additionalProperties\": false"]
#[doc = "                            },"]
#[doc = "                            \"default_value\": {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "                              \"title\": \"Any Value\","]
#[doc = "                              \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "                              \"type\": ["]
#[doc = "                                \"string\","]
#[doc = "                                \"number\","]
#[doc = "                                \"integer\","]
#[doc = "                                \"boolean\","]
#[doc = "                                \"object\","]
#[doc = "                                \"array\","]
#[doc = "                                \"null\""]
#[doc = "                              ]"]
#[doc = "                            },"]
#[doc = "                            \"description\": {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "                              \"title\": \"Description Field\","]
#[doc = "                              \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "                              \"default\": \"\","]
#[doc = "                              \"type\": \"string\""]
#[doc = "                            },"]
#[doc = "                            \"type\": {"]
#[doc = "                              \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "                              \"title\": \"Base Type System\","]
#[doc = "                              \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "                              \"oneOf\": ["]
#[doc = "                                {"]
#[doc = "                                  \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "                                  \"type\": \"string\","]
#[doc = "                                  \"enum\": ["]
#[doc = "                                    \"string\","]
#[doc = "                                    \"boolean\","]
#[doc = "                                    \"integer\","]
#[doc = "                                    \"number\","]
#[doc = "                                    \"f32\","]
#[doc = "                                    \"f64\","]
#[doc = "                                    \"i32\","]
#[doc = "                                    \"i64\","]
#[doc = "                                    \"u32\","]
#[doc = "                                    \"u64\","]
#[doc = "                                    \"uuid\","]
#[doc = "                                    \"date-time\","]
#[doc = "                                    \"duration\","]
#[doc = "                                    \"object\","]
#[doc = "                                    \"array\""]
#[doc = "                                  ]"]
#[doc = "                                },"]
#[doc = "                                {"]
#[doc = "                                  \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "                                  \"type\": \"object\","]
#[doc = "                                  \"required\": ["]
#[doc = "                                    \"$ref\""]
#[doc = "                                  ],"]
#[doc = "                                  \"properties\": {"]
#[doc = "                                    \"$ref\": {"]
#[doc = "                                      \"type\": \"string\""]
#[doc = "                                    }"]
#[doc = "                                  },"]
#[doc = "                                  \"additionalProperties\": false"]
#[doc = "                                }"]
#[doc = "                              ],"]
#[doc = "                              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                            },"]
#[doc = "                            \"ui_label\": {"]
#[doc = "                              \"type\": \"string\""]
#[doc = "                            }"]
#[doc = "                          },"]
#[doc = "                          \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                        }"]
#[doc = "                      ]"]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"additionalProperties\": false"]
#[doc = "                },"]
#[doc = "                \"physics_properties\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/base/PhysicsProperties.v1.schema.json\","]
#[doc = "                  \"title\": \"Base Physics Properties\","]
#[doc = "                  \"description\": \"Defines the common physics-related properties for components and laws.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"engine\","]
#[doc = "                    \"is_quantum\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"collapse_sensitive\": {"]
#[doc = "                      \"description\": \"Indicates if the object is affected by or triggers quantum collapse.\","]
#[doc = "                      \"type\": \"boolean\""]
#[doc = "                    },"]
#[doc = "                    \"engine\": {"]
#[doc = "                      \"description\": \"The physics engine responsible for this object.\","]
#[doc = "                      \"enum\": ["]
#[doc = "                        \"quantum\","]
#[doc = "                        \"classical\","]
#[doc = "                        \"hybrid\""]
#[doc = "                      ]"]
#[doc = "                    },"]
#[doc = "                    \"is_quantum\": {"]
#[doc = "                      \"description\": \"Indicates if the object has quantum properties.\","]
#[doc = "                      \"type\": \"boolean\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "              \"fields\": {"]
#[doc = "                \"baseline\": {"]
#[doc = "                  \"description\": \"Defines the innate 'personality' or temperament of a Thread, modulating its physics interactions.\","]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"bond_damping_factor\": {"]
#[doc = "                      \"description\": \"How resistant their bonds are to change. (UI Label: Relationship Stability)\","]
#[doc = "                      \"maximum\": 2.0,"]
#[doc = "                      \"minimum\": 0.5,"]
#[doc = "                      \"type\": \"number\""]
#[doc = "                    },"]
#[doc = "                    \"consolidation_rate_modifier\": {"]
#[doc = "                      \"description\": \"How quickly their memories become stable. (UI Label: Memory Consolidation)\","]
#[doc = "                      \"maximum\": 1.5,"]
#[doc = "                      \"minimum\": 0.8,"]
#[doc = "                      \"type\": \"number\""]
#[doc = "                    },"]
#[doc = "                    \"emotional_volatility\": {"]
#[doc = "                      \"description\": \"How strongly emotional events affect this person. (UI Label: Emotional Reactivity)\","]
#[doc = "                      \"maximum\": 2.0,"]
#[doc = "                      \"minimum\": 0.5,"]
#[doc = "                      \"type\": \"number\""]
#[doc = "                    },"]
#[doc = "                    \"exploration_bias\": {"]
#[doc = "                      \"description\": \"Tendency for creative, associative thinking. (UI Label: Openness to Experience)\","]
#[doc = "                      \"maximum\": 1.3,"]
#[doc = "                      \"minimum\": 0.7,"]
#[doc = "                      \"type\": \"number\""]
#[doc = "                    },"]
#[doc = "                    \"social_energy_factor\": {"]
#[doc = "                      \"description\": \"How energized they are by social interactions. (UI Label: Social Energy)\","]
#[doc = "                      \"maximum\": 1.2,"]
#[doc = "                      \"minimum\": 0.8,"]
#[doc = "                      \"type\": \"number\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"required\": ["]
#[doc = "                    \"emotional_volatility\","]
#[doc = "                    \"social_energy_factor\","]
#[doc = "                    \"consolidation_rate_modifier\","]
#[doc = "                    \"bond_damping_factor\","]
#[doc = "                    \"exploration_bias\""]
#[doc = "                  ],"]
#[doc = "                  \"type\": \"object\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"physics_properties\": {"]
#[doc = "                \"engine\": \"classical\","]
#[doc = "                \"is_quantum\": false"]
#[doc = "              },"]
#[doc = "              \"schema_version\": \"1.0.0\""]
#[doc = "            }"]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"created_at\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/types/primitives/Timestamp.v1.json\","]
#[doc = "          \"title\": \"Timestamp\","]
#[doc = "          \"description\": \"A canonical definition for an ISO 8601 timestamp with timezone.\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"entity_id\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/fields/EntityId.v1.json\","]
#[doc = "          \"title\": \"Entity ID Field\","]
#[doc = "          \"description\": \"A reusable definition for a unique entity identifier.\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"identity\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/components/ThreadContent.v1.schema.json\","]
#[doc = "          \"title\": \"Thread Content Component\","]
#[doc = "          \"description\": \"Defines the core, immutable content of a Thread entity, such as its name and type.\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"required\": ["]
#[doc = "            \"fields\","]
#[doc = "            \"physics_properties\""]
#[doc = "          ],"]
#[doc = "          \"properties\": {"]
#[doc = "            \"fields\": {"]
#[doc = "              \"title\": \"BaseFields\","]
#[doc = "              \"description\": \"A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"patternProperties\": {"]
#[doc = "                \"^[a-z_][a-z0-9_]*$\": {"]
#[doc = "                  \"oneOf\": ["]
#[doc = "                    {"]
#[doc = "                      \"description\": \"A direct reference to a shared definition in SharedDefinitions.schema.json.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"required\": ["]
#[doc = "                        \"$ref\""]
#[doc = "                      ],"]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"$ref\": {"]
#[doc = "                          \"type\": \"string\""]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"additionalProperties\": false"]
#[doc = "                    },"]
#[doc = "                    {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/base/Field.v1.schema.json\","]
#[doc = "                      \"title\": \"Base Field\","]
#[doc = "                      \"description\": \"Defines the structure for a single, inline field definition within a component.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"required\": ["]
#[doc = "                        \"description\","]
#[doc = "                        \"type\""]
#[doc = "                      ],"]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"constraints\": {"]
#[doc = "                          \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "                          \"title\": \"Constraint Definition\","]
#[doc = "                          \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "                          \"type\": \"object\","]
#[doc = "                          \"properties\": {"]
#[doc = "                            \"enum\": {"]
#[doc = "                              \"type\": \"array\","]
#[doc = "                              \"items\": {"]
#[doc = "                                \"type\": \"string\""]
#[doc = "                              }"]
#[doc = "                            },"]
#[doc = "                            \"maxLength\": {"]
#[doc = "                              \"type\": \"integer\""]
#[doc = "                            },"]
#[doc = "                            \"maximum\": {"]
#[doc = "                              \"type\": \"number\""]
#[doc = "                            },"]
#[doc = "                            \"minLength\": {"]
#[doc = "                              \"type\": \"integer\""]
#[doc = "                            },"]
#[doc = "                            \"minimum\": {"]
#[doc = "                              \"type\": \"number\""]
#[doc = "                            },"]
#[doc = "                            \"pattern\": {"]
#[doc = "                              \"type\": \"string\""]
#[doc = "                            }"]
#[doc = "                          },"]
#[doc = "                          \"additionalProperties\": false"]
#[doc = "                        },"]
#[doc = "                        \"default_value\": {"]
#[doc = "                          \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "                          \"title\": \"Any Value\","]
#[doc = "                          \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "                          \"type\": ["]
#[doc = "                            \"string\","]
#[doc = "                            \"number\","]
#[doc = "                            \"integer\","]
#[doc = "                            \"boolean\","]
#[doc = "                            \"object\","]
#[doc = "                            \"array\","]
#[doc = "                            \"null\""]
#[doc = "                          ]"]
#[doc = "                        },"]
#[doc = "                        \"description\": {"]
#[doc = "                          \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "                          \"title\": \"Description Field\","]
#[doc = "                          \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "                          \"default\": \"\","]
#[doc = "                          \"type\": \"string\""]
#[doc = "                        },"]
#[doc = "                        \"type\": {"]
#[doc = "                          \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "                          \"title\": \"Base Type System\","]
#[doc = "                          \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "                          \"oneOf\": ["]
#[doc = "                            {"]
#[doc = "                              \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "                              \"type\": \"string\","]
#[doc = "                              \"enum\": ["]
#[doc = "                                \"string\","]
#[doc = "                                \"boolean\","]
#[doc = "                                \"integer\","]
#[doc = "                                \"number\","]
#[doc = "                                \"f32\","]
#[doc = "                                \"f64\","]
#[doc = "                                \"i32\","]
#[doc = "                                \"i64\","]
#[doc = "                                \"u32\","]
#[doc = "                                \"u64\","]
#[doc = "                                \"uuid\","]
#[doc = "                                \"date-time\","]
#[doc = "                                \"duration\","]
#[doc = "                                \"object\","]
#[doc = "                                \"array\""]
#[doc = "                              ]"]
#[doc = "                            },"]
#[doc = "                            {"]
#[doc = "                              \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "                              \"type\": \"object\","]
#[doc = "                              \"required\": ["]
#[doc = "                                \"$ref\""]
#[doc = "                              ],"]
#[doc = "                              \"properties\": {"]
#[doc = "                                \"$ref\": {"]
#[doc = "                                  \"type\": \"string\""]
#[doc = "                                }"]
#[doc = "                              },"]
#[doc = "                              \"additionalProperties\": false"]
#[doc = "                            }"]
#[doc = "                          ],"]
#[doc = "                          \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                        },"]
#[doc = "                        \"ui_label\": {"]
#[doc = "                          \"type\": \"string\""]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                    }"]
#[doc = "                  ]"]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"additionalProperties\": false"]
#[doc = "            },"]
#[doc = "            \"physics_properties\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/base/PhysicsProperties.v1.schema.json\","]
#[doc = "              \"title\": \"Base Physics Properties\","]
#[doc = "              \"description\": \"Defines the common physics-related properties for components and laws.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"engine\","]
#[doc = "                \"is_quantum\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"collapse_sensitive\": {"]
#[doc = "                  \"description\": \"Indicates if the object is affected by or triggers quantum collapse.\","]
#[doc = "                  \"type\": \"boolean\""]
#[doc = "                },"]
#[doc = "                \"engine\": {"]
#[doc = "                  \"description\": \"The physics engine responsible for this object.\","]
#[doc = "                  \"enum\": ["]
#[doc = "                    \"quantum\","]
#[doc = "                    \"classical\","]
#[doc = "                    \"hybrid\""]
#[doc = "                  ]"]
#[doc = "                },"]
#[doc = "                \"is_quantum\": {"]
#[doc = "                  \"description\": \"Indicates if the object has quantum properties.\","]
#[doc = "                  \"type\": \"boolean\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "          \"fields\": {"]
#[doc = "            \"aliases\": {"]
#[doc = "              \"description\": \"A list of alternative names for this Thread (e.g., nicknames).\","]
#[doc = "              \"items\": {"]
#[doc = "                \"type\": \"string\""]
#[doc = "              },"]
#[doc = "              \"type\": \"array\""]
#[doc = "            },"]
#[doc = "            \"description\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "              \"default\": \"\","]
#[doc = "              \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "              \"title\": \"Description Field\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"name\": {"]
#[doc = "              \"description\": \"The primary, human-readable name of an entity.\","]
#[doc = "              \"title\": \"Name Field\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"thread_type\": {"]
#[doc = "              \"description\": \"The Platonic Form of the Thread, enforcing abstract relationships.\","]
#[doc = "              \"enum\": ["]
#[doc = "                \"Person\","]
#[doc = "                \"Place\","]
#[doc = "                \"Concept\","]
#[doc = "                \"GenericObject\""]
#[doc = "              ],"]
#[doc = "              \"type\": \"string\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"physics_properties\": {"]
#[doc = "            \"engine\": \"classical\","]
#[doc = "            \"is_quantum\": false"]
#[doc = "          },"]
#[doc = "          \"schema_version\": \"1.2.0\""]
#[doc = "        },"]
#[doc = "        \"physics_state\": {"]
#[doc = "          \"title\": \"PersonThreadPhysicsState\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"required\": ["]
#[doc = "            \"universal\""]
#[doc = "          ],"]
#[doc = "          \"properties\": {"]
#[doc = "            \"universal\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/components/UniversalPhysicsState.v1.schema.json\","]
#[doc = "              \"title\": \"Universal Physics State Component\","]
#[doc = "              \"description\": \"The transient, mutable physics state of an entity.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"properties\": {"]
#[doc = "                \"fields\": {"]
#[doc = "                  \"title\": \"UniversalPhysicsStateFields\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"cognitive_perspective\","]
#[doc = "                    \"consolidation_rate\","]
#[doc = "                    \"decay_rate\","]
#[doc = "                    \"energy\","]
#[doc = "                    \"entanglement_strength\","]
#[doc = "                    \"momentum\","]
#[doc = "                    \"quantum_coherence\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"cognitive_perspective\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/fields/CognitivePerspective.v1.schema.json\","]
#[doc = "                      \"title\": \"Cognitive Perspective Field\","]
#[doc = "                      \"description\": \"The intrinsic 'spin' or 'flavor' of the entity, which generates cognitive dissonance (torsion).\","]
#[doc = "                      \"ui_label\": \"Cognitive Perspective\""]
#[doc = "                    },"]
#[doc = "                    \"consolidation_rate\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/snippets/fields/ConsolidationRate.v1.json\","]
#[doc = "                      \"title\": \"Consolidation Rate Field\","]
#[doc = "                      \"description\": \"The base rate of memory consolidation for an entity, before multipliers are applied. Represents how quickly an unstable memory becomes stable.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"required\": ["]
#[doc = "                        \"value\""]
#[doc = "                      ],"]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"value\": {"]
#[doc = "                          \"default\": 0.0,"]
#[doc = "                          \"type\": \"number\","]
#[doc = "                          \"format\": \"double\","]
#[doc = "                          \"maximum\": 1.0,"]
#[doc = "                          \"minimum\": 0.0,"]
#[doc = "                          \"x-python-type\": \"float\","]
#[doc = "                          \"x-rust-type\": \"f64\""]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"additionalProperties\": false"]
#[doc = "                    },"]
#[doc = "                    \"decay_rate\": {"]
#[doc = "                      \"description\": \"The base rate of energy or coherence decay for an entity, before multipliers are applied.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"required\": ["]
#[doc = "                        \"value\""]
#[doc = "                      ],"]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"value\": {"]
#[doc = "                          \"default\": 0.01,"]
#[doc = "                          \"type\": \"number\","]
#[doc = "                          \"format\": \"double\","]
#[doc = "                          \"x-python-type\": \"float\","]
#[doc = "                          \"x-rust-type\": \"f64\""]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"additionalProperties\": false"]
#[doc = "                    },"]
#[doc = "                    \"energy\": {"]
#[doc = "                      \"description\": \"The current energy level of an entity.\","]
#[doc = "                      \"default\": 0.1,"]
#[doc = "                      \"type\": \"number\""]
#[doc = "                    },"]
#[doc = "                    \"entanglement_strength\": {"]
#[doc = "                      \"description\": \"The overall entanglement strength of this entity with others. Null for classical entities.\","]
#[doc = "                      \"default\": null,"]
#[doc = "                      \"type\": ["]
#[doc = "                        \"number\","]
#[doc = "                        \"null\""]
#[doc = "                      ],"]
#[doc = "                      \"maximum\": 1.0,"]
#[doc = "                      \"minimum\": 0.0"]
#[doc = "                    },"]
#[doc = "                    \"momentum\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/types/physics/Vec6.v1.json\","]
#[doc = "                      \"title\": \"6D Physics Vector\","]
#[doc = "                      \"description\": \"A reusable data type for a vector of six f64 numbers, used for momentum and forces in the 6 spatial dimensions of the manifold.\","]
#[doc = "                      \"type\": \"array\","]
#[doc = "                      \"items\": {"]
#[doc = "                        \"type\": \"number\""]
#[doc = "                      },"]
#[doc = "                      \"maxItems\": 6,"]
#[doc = "                      \"minItems\": 6"]
#[doc = "                    },"]
#[doc = "                    \"quantum_coherence\": {"]
#[doc = "                      \"description\": \"The quantum coherence level of the entity, representing its degree of superposition. Null for classical entities.\","]
#[doc = "                      \"default\": null,"]
#[doc = "                      \"type\": ["]
#[doc = "                        \"number\","]
#[doc = "                        \"null\""]
#[doc = "                      ],"]
#[doc = "                      \"maximum\": 1.0,"]
#[doc = "                      \"minimum\": 0.0"]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"additionalProperties\": false"]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "              \"schema_version\": \"3.0.0\""]
#[doc = "            }"]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"tenant_id\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/types/primitives/UUID.v1.json\","]
#[doc = "          \"title\": \"UUID\","]
#[doc = "          \"description\": \"A canonical definition for a Universally Unique Identifier (UUID).\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "      \"schema_version\": \"1.1.0\""]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/entities/GenericThread.v1.schema.json\","]
#[doc = "      \"title\": \"Generic Thread\","]
#[doc = "      \"description\": \"A Thread representing a Place, Concept, or GenericObject, which MUST NOT have a CognitiveBaseline.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"created_at\","]
#[doc = "        \"entity_id\","]
#[doc = "        \"identity\","]
#[doc = "        \"physics_state\","]
#[doc = "        \"tenant_id\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"created_at\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/types/primitives/Timestamp.v1.json\","]
#[doc = "          \"title\": \"Timestamp\","]
#[doc = "          \"description\": \"A canonical definition for an ISO 8601 timestamp with timezone.\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"entity_id\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/fields/EntityId.v1.json\","]
#[doc = "          \"title\": \"Entity ID Field\","]
#[doc = "          \"description\": \"A reusable definition for a unique entity identifier.\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"identity\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/components/ThreadContent.v1.schema.json\","]
#[doc = "          \"title\": \"Thread Content Component\","]
#[doc = "          \"description\": \"Defines the core, immutable content of a Thread entity, such as its name and type.\","]
#[doc = "          \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "          \"fields\": {"]
#[doc = "            \"aliases\": {"]
#[doc = "              \"description\": \"A list of alternative names for this Thread (e.g., nicknames).\","]
#[doc = "              \"items\": {"]
#[doc = "                \"type\": \"string\""]
#[doc = "              },"]
#[doc = "              \"type\": \"array\""]
#[doc = "            },"]
#[doc = "            \"description\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "              \"default\": \"\","]
#[doc = "              \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "              \"title\": \"Description Field\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"name\": {"]
#[doc = "              \"description\": \"The primary, human-readable name of an entity.\","]
#[doc = "              \"title\": \"Name Field\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"thread_type\": {"]
#[doc = "              \"description\": \"The Platonic Form of the Thread, enforcing abstract relationships.\","]
#[doc = "              \"enum\": ["]
#[doc = "                \"Person\","]
#[doc = "                \"Place\","]
#[doc = "                \"Concept\","]
#[doc = "                \"GenericObject\""]
#[doc = "              ],"]
#[doc = "              \"type\": \"string\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"physics_properties\": {"]
#[doc = "            \"engine\": \"classical\","]
#[doc = "            \"is_quantum\": false"]
#[doc = "          },"]
#[doc = "          \"schema_version\": \"1.2.0\""]
#[doc = "        },"]
#[doc = "        \"physics_state\": {"]
#[doc = "          \"title\": \"GenericThreadPhysicsState\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"required\": ["]
#[doc = "            \"universal\""]
#[doc = "          ],"]
#[doc = "          \"properties\": {"]
#[doc = "            \"universal\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/components/UniversalPhysicsState.v1.schema.json\","]
#[doc = "              \"title\": \"Universal Physics State Component\","]
#[doc = "              \"description\": \"The transient, mutable physics state of an entity.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"properties\": {"]
#[doc = "                \"fields\": {"]
#[doc = "                  \"title\": \"UniversalPhysicsStateFields\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"cognitive_perspective\","]
#[doc = "                    \"consolidation_rate\","]
#[doc = "                    \"decay_rate\","]
#[doc = "                    \"energy\","]
#[doc = "                    \"entanglement_strength\","]
#[doc = "                    \"momentum\","]
#[doc = "                    \"quantum_coherence\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"cognitive_perspective\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/fields/CognitivePerspective.v1.schema.json\","]
#[doc = "                      \"title\": \"Cognitive Perspective Field\","]
#[doc = "                      \"description\": \"The intrinsic 'spin' or 'flavor' of the entity, which generates cognitive dissonance (torsion).\","]
#[doc = "                      \"ui_label\": \"Cognitive Perspective\""]
#[doc = "                    },"]
#[doc = "                    \"consolidation_rate\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/snippets/fields/ConsolidationRate.v1.json\","]
#[doc = "                      \"title\": \"Consolidation Rate Field\","]
#[doc = "                      \"description\": \"The base rate of memory consolidation for an entity, before multipliers are applied. Represents how quickly an unstable memory becomes stable.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"required\": ["]
#[doc = "                        \"value\""]
#[doc = "                      ],"]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"value\": {"]
#[doc = "                          \"default\": 0.0,"]
#[doc = "                          \"type\": \"number\","]
#[doc = "                          \"format\": \"double\","]
#[doc = "                          \"maximum\": 1.0,"]
#[doc = "                          \"minimum\": 0.0,"]
#[doc = "                          \"x-python-type\": \"float\","]
#[doc = "                          \"x-rust-type\": \"f64\""]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"additionalProperties\": false"]
#[doc = "                    },"]
#[doc = "                    \"decay_rate\": {"]
#[doc = "                      \"description\": \"The base rate of energy or coherence decay for an entity, before multipliers are applied.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"required\": ["]
#[doc = "                        \"value\""]
#[doc = "                      ],"]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"value\": {"]
#[doc = "                          \"default\": 0.01,"]
#[doc = "                          \"type\": \"number\","]
#[doc = "                          \"format\": \"double\","]
#[doc = "                          \"x-python-type\": \"float\","]
#[doc = "                          \"x-rust-type\": \"f64\""]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"additionalProperties\": false"]
#[doc = "                    },"]
#[doc = "                    \"energy\": {"]
#[doc = "                      \"description\": \"The current energy level of an entity.\","]
#[doc = "                      \"default\": 0.1,"]
#[doc = "                      \"type\": \"number\""]
#[doc = "                    },"]
#[doc = "                    \"entanglement_strength\": {"]
#[doc = "                      \"description\": \"The overall entanglement strength of this entity with others. Null for classical entities.\","]
#[doc = "                      \"default\": null,"]
#[doc = "                      \"type\": ["]
#[doc = "                        \"number\","]
#[doc = "                        \"null\""]
#[doc = "                      ],"]
#[doc = "                      \"maximum\": 1.0,"]
#[doc = "                      \"minimum\": 0.0"]
#[doc = "                    },"]
#[doc = "                    \"momentum\": {"]
#[doc = "                      \"$id\": \"https://familiar.dev/schemas/types/physics/Vec6.v1.json\","]
#[doc = "                      \"title\": \"6D Physics Vector\","]
#[doc = "                      \"description\": \"A reusable data type for a vector of six f64 numbers, used for momentum and forces in the 6 spatial dimensions of the manifold.\","]
#[doc = "                      \"type\": \"array\","]
#[doc = "                      \"items\": {"]
#[doc = "                        \"type\": \"number\""]
#[doc = "                      },"]
#[doc = "                      \"maxItems\": 6,"]
#[doc = "                      \"minItems\": 6"]
#[doc = "                    },"]
#[doc = "                    \"quantum_coherence\": {"]
#[doc = "                      \"description\": \"The quantum coherence level of the entity, representing its degree of superposition. Null for classical entities.\","]
#[doc = "                      \"default\": null,"]
#[doc = "                      \"type\": ["]
#[doc = "                        \"number\","]
#[doc = "                        \"null\""]
#[doc = "                      ],"]
#[doc = "                      \"maximum\": 1.0,"]
#[doc = "                      \"minimum\": 0.0"]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"additionalProperties\": false"]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "              \"schema_version\": \"3.0.0\""]
#[doc = "            }"]
#[doc = "          }"]
#[doc = "        },"]
#[doc = "        \"tenant_id\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/types/primitives/UUID.v1.json\","]
#[doc = "          \"title\": \"UUID\","]
#[doc = "          \"description\": \"A canonical definition for a Universally Unique Identifier (UUID).\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "      \"schema_version\": \"1.1.0\""]
#[doc = "    }"]
#[doc = "  ],"]
#[doc = "  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(untagged)]
pub enum Thread {
    PersonThread {
        components: PersonThreadComponents,
        #[doc = "A canonical definition for an ISO 8601 timestamp with timezone."]
        created_at: ::std::string::String,
        #[doc = "A reusable definition for a unique entity identifier."]
        entity_id: ::std::string::String,
        identity: ThreadContentComponent,
        physics_state: PersonThreadPhysicsState,
        #[doc = "A canonical definition for a Universally Unique Identifier (UUID)."]
        tenant_id: ::std::string::String,
    },
    GenericThread {
        #[doc = "A canonical definition for an ISO 8601 timestamp with timezone."]
        created_at: ::std::string::String,
        #[doc = "A reusable definition for a unique entity identifier."]
        entity_id: ::std::string::String,
        #[doc = "Defines the core, immutable content of a Thread entity, such as its name and type."]
        identity: ::serde_json::Value,
        physics_state: GenericThreadPhysicsState,
        #[doc = "A canonical definition for a Universally Unique Identifier (UUID)."]
        tenant_id: ::std::string::String,
    },
}
impl ::std::convert::From<&Self> for Thread {
    fn from(value: &Thread) -> Self {
        value.clone()
    }
}
#[doc = "Defines the core, immutable content of a Thread entity, such as its name and type."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"$id\": \"https://familiar.dev/schemas/components/ThreadContent.v1.schema.json\","]
#[doc = "  \"title\": \"Thread Content Component\","]
#[doc = "  \"description\": \"Defines the core, immutable content of a Thread entity, such as its name and type.\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"fields\","]
#[doc = "    \"physics_properties\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"fields\": {"]
#[doc = "      \"title\": \"BaseFields\","]
#[doc = "      \"description\": \"A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"patternProperties\": {"]
#[doc = "        \"^[a-z_][a-z0-9_]*$\": {"]
#[doc = "          \"oneOf\": ["]
#[doc = "            {"]
#[doc = "              \"description\": \"A direct reference to a shared definition in SharedDefinitions.schema.json.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"$ref\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"$ref\": {"]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"additionalProperties\": false"]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/base/Field.v1.schema.json\","]
#[doc = "              \"title\": \"Base Field\","]
#[doc = "              \"description\": \"Defines the structure for a single, inline field definition within a component.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"description\","]
#[doc = "                \"type\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"constraints\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "                  \"title\": \"Constraint Definition\","]
#[doc = "                  \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"enum\": {"]
#[doc = "                      \"type\": \"array\","]
#[doc = "                      \"items\": {"]
#[doc = "                        \"type\": \"string\""]
#[doc = "                      }"]
#[doc = "                    },"]
#[doc = "                    \"maxLength\": {"]
#[doc = "                      \"type\": \"integer\""]
#[doc = "                    },"]
#[doc = "                    \"maximum\": {"]
#[doc = "                      \"type\": \"number\""]
#[doc = "                    },"]
#[doc = "                    \"minLength\": {"]
#[doc = "                      \"type\": \"integer\""]
#[doc = "                    },"]
#[doc = "                    \"minimum\": {"]
#[doc = "                      \"type\": \"number\""]
#[doc = "                    },"]
#[doc = "                    \"pattern\": {"]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"additionalProperties\": false"]
#[doc = "                },"]
#[doc = "                \"default_value\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "                  \"title\": \"Any Value\","]
#[doc = "                  \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "                  \"type\": ["]
#[doc = "                    \"string\","]
#[doc = "                    \"number\","]
#[doc = "                    \"integer\","]
#[doc = "                    \"boolean\","]
#[doc = "                    \"object\","]
#[doc = "                    \"array\","]
#[doc = "                    \"null\""]
#[doc = "                  ]"]
#[doc = "                },"]
#[doc = "                \"description\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "                  \"title\": \"Description Field\","]
#[doc = "                  \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "                  \"default\": \"\","]
#[doc = "                  \"type\": \"string\""]
#[doc = "                },"]
#[doc = "                \"type\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "                  \"title\": \"Base Type System\","]
#[doc = "                  \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "                  \"oneOf\": ["]
#[doc = "                    {"]
#[doc = "                      \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "                      \"type\": \"string\","]
#[doc = "                      \"enum\": ["]
#[doc = "                        \"string\","]
#[doc = "                        \"boolean\","]
#[doc = "                        \"integer\","]
#[doc = "                        \"number\","]
#[doc = "                        \"f32\","]
#[doc = "                        \"f64\","]
#[doc = "                        \"i32\","]
#[doc = "                        \"i64\","]
#[doc = "                        \"u32\","]
#[doc = "                        \"u64\","]
#[doc = "                        \"uuid\","]
#[doc = "                        \"date-time\","]
#[doc = "                        \"duration\","]
#[doc = "                        \"object\","]
#[doc = "                        \"array\""]
#[doc = "                      ]"]
#[doc = "                    },"]
#[doc = "                    {"]
#[doc = "                      \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"required\": ["]
#[doc = "                        \"$ref\""]
#[doc = "                      ],"]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"$ref\": {"]
#[doc = "                          \"type\": \"string\""]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"additionalProperties\": false"]
#[doc = "                    }"]
#[doc = "                  ],"]
#[doc = "                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                },"]
#[doc = "                \"ui_label\": {"]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "            }"]
#[doc = "          ]"]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"physics_properties\": {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/base/PhysicsProperties.v1.schema.json\","]
#[doc = "      \"title\": \"Base Physics Properties\","]
#[doc = "      \"description\": \"Defines the common physics-related properties for components and laws.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"engine\","]
#[doc = "        \"is_quantum\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"collapse_sensitive\": {"]
#[doc = "          \"description\": \"Indicates if the object is affected by or triggers quantum collapse.\","]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        \"engine\": {"]
#[doc = "          \"description\": \"The physics engine responsible for this object.\","]
#[doc = "          \"enum\": ["]
#[doc = "            \"quantum\","]
#[doc = "            \"classical\","]
#[doc = "            \"hybrid\""]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        \"is_quantum\": {"]
#[doc = "          \"description\": \"Indicates if the object has quantum properties.\","]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "  \"fields\": {"]
#[doc = "    \"aliases\": {"]
#[doc = "      \"description\": \"A list of alternative names for this Thread (e.g., nicknames).\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"string\""]
#[doc = "      },"]
#[doc = "      \"type\": \"array\""]
#[doc = "    },"]
#[doc = "    \"description\": {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "      \"default\": \"\","]
#[doc = "      \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "      \"title\": \"Description Field\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"name\": {"]
#[doc = "      \"description\": \"The primary, human-readable name of an entity.\","]
#[doc = "      \"title\": \"Name Field\","]
#[doc = "      \"type\": \"string\""]
#[doc = "    },"]
#[doc = "    \"thread_type\": {"]
#[doc = "      \"description\": \"The Platonic Form of the Thread, enforcing abstract relationships.\","]
#[doc = "      \"enum\": ["]
#[doc = "        \"Person\","]
#[doc = "        \"Place\","]
#[doc = "        \"Concept\","]
#[doc = "        \"GenericObject\""]
#[doc = "      ],"]
#[doc = "      \"type\": \"string\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"physics_properties\": {"]
#[doc = "    \"engine\": \"classical\","]
#[doc = "    \"is_quantum\": false"]
#[doc = "  },"]
#[doc = "  \"schema_version\": \"1.2.0\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct ThreadContentComponent {
    #[doc = "A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition."]
    pub fields: ::std::collections::HashMap<
        ThreadContentComponentFieldsKey,
        ThreadContentComponentFieldsValue,
    >,
    pub physics_properties: BasePhysicsProperties,
}
impl ::std::convert::From<&ThreadContentComponent> for ThreadContentComponent {
    fn from(value: &ThreadContentComponent) -> Self {
        value.clone()
    }
}
impl ThreadContentComponent {
    pub fn builder() -> builder::ThreadContentComponent {
        Default::default()
    }
}
#[doc = "`ThreadContentComponentFieldsKey`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"type\": \"string\","]
#[doc = "  \"pattern\": \"^[a-z_][a-z0-9_]*$\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Serialize, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
#[serde(transparent)]
pub struct ThreadContentComponentFieldsKey(::std::string::String);
impl ::std::ops::Deref for ThreadContentComponentFieldsKey {
    type Target = ::std::string::String;
    fn deref(&self) -> &::std::string::String {
        &self.0
    }
}
impl ::std::convert::From<ThreadContentComponentFieldsKey> for ::std::string::String {
    fn from(value: ThreadContentComponentFieldsKey) -> Self {
        value.0
    }
}
impl ::std::convert::From<&ThreadContentComponentFieldsKey> for ThreadContentComponentFieldsKey {
    fn from(value: &ThreadContentComponentFieldsKey) -> Self {
        value.clone()
    }
}
impl ::std::str::FromStr for ThreadContentComponentFieldsKey {
    type Err = self::error::ConversionError;
    fn from_str(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        static PATTERN: ::std::sync::LazyLock<::regress::Regex> =
            ::std::sync::LazyLock::new(|| ::regress::Regex::new("^[a-z_][a-z0-9_]*$").unwrap());
        if (&*PATTERN).find(value).is_none() {
            return Err("doesn't match pattern \"^[a-z_][a-z0-9_]*$\"".into());
        }
        Ok(Self(value.to_string()))
    }
}
impl ::std::convert::TryFrom<&str> for ThreadContentComponentFieldsKey {
    type Error = self::error::ConversionError;
    fn try_from(value: &str) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<&::std::string::String> for ThreadContentComponentFieldsKey {
    type Error = self::error::ConversionError;
    fn try_from(
        value: &::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl ::std::convert::TryFrom<::std::string::String> for ThreadContentComponentFieldsKey {
    type Error = self::error::ConversionError;
    fn try_from(
        value: ::std::string::String,
    ) -> ::std::result::Result<Self, self::error::ConversionError> {
        value.parse()
    }
}
impl<'de> ::serde::Deserialize<'de> for ThreadContentComponentFieldsKey {
    fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
    where
        D: ::serde::Deserializer<'de>,
    {
        ::std::string::String::deserialize(deserializer)?
            .parse()
            .map_err(|e: self::error::ConversionError| {
                <D::Error as ::serde::de::Error>::custom(e.to_string())
            })
    }
}
#[doc = "`ThreadContentComponentFieldsValue`"]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"oneOf\": ["]
#[doc = "    {"]
#[doc = "      \"description\": \"A direct reference to a shared definition in SharedDefinitions.schema.json.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"$ref\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"$ref\": {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/base/Field.v1.schema.json\","]
#[doc = "      \"title\": \"Base Field\","]
#[doc = "      \"description\": \"Defines the structure for a single, inline field definition within a component.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"description\","]
#[doc = "        \"type\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"constraints\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "          \"title\": \"Constraint Definition\","]
#[doc = "          \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"properties\": {"]
#[doc = "            \"enum\": {"]
#[doc = "              \"type\": \"array\","]
#[doc = "              \"items\": {"]
#[doc = "                \"type\": \"string\""]
#[doc = "              }"]
#[doc = "            },"]
#[doc = "            \"maxLength\": {"]
#[doc = "              \"type\": \"integer\""]
#[doc = "            },"]
#[doc = "            \"maximum\": {"]
#[doc = "              \"type\": \"number\""]
#[doc = "            },"]
#[doc = "            \"minLength\": {"]
#[doc = "              \"type\": \"integer\""]
#[doc = "            },"]
#[doc = "            \"minimum\": {"]
#[doc = "              \"type\": \"number\""]
#[doc = "            },"]
#[doc = "            \"pattern\": {"]
#[doc = "              \"type\": \"string\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        },"]
#[doc = "        \"default_value\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "          \"title\": \"Any Value\","]
#[doc = "          \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "          \"type\": ["]
#[doc = "            \"string\","]
#[doc = "            \"number\","]
#[doc = "            \"integer\","]
#[doc = "            \"boolean\","]
#[doc = "            \"object\","]
#[doc = "            \"array\","]
#[doc = "            \"null\""]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        \"description\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "          \"title\": \"Description Field\","]
#[doc = "          \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "          \"default\": \"\","]
#[doc = "          \"type\": \"string\""]
#[doc = "        },"]
#[doc = "        \"type\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "          \"title\": \"Base Type System\","]
#[doc = "          \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "          \"oneOf\": ["]
#[doc = "            {"]
#[doc = "              \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "              \"type\": \"string\","]
#[doc = "              \"enum\": ["]
#[doc = "                \"string\","]
#[doc = "                \"boolean\","]
#[doc = "                \"integer\","]
#[doc = "                \"number\","]
#[doc = "                \"f32\","]
#[doc = "                \"f64\","]
#[doc = "                \"i32\","]
#[doc = "                \"i64\","]
#[doc = "                \"u32\","]
#[doc = "                \"u64\","]
#[doc = "                \"uuid\","]
#[doc = "                \"date-time\","]
#[doc = "                \"duration\","]
#[doc = "                \"object\","]
#[doc = "                \"array\""]
#[doc = "              ]"]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"$ref\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"$ref\": {"]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"additionalProperties\": false"]
#[doc = "            }"]
#[doc = "          ],"]
#[doc = "          \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "        },"]
#[doc = "        \"ui_label\": {"]
#[doc = "          \"type\": \"string\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "    }"]
#[doc = "  ]"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(untagged, deny_unknown_fields)]
pub enum ThreadContentComponentFieldsValue {
    Variant0 {
        #[serde(rename = "$ref")]
        ref_: ::std::string::String,
    },
    Variant1 {
        #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
        constraints: ::std::option::Option<ConstraintDefinition>,
        #[doc = "Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values."]
        #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
        default_value: ::std::option::Option<::serde_json::Value>,
        #[doc = "A canonical, reusable definition for a human-readable description field."]
        description: ::std::string::String,
        #[doc = "The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema."]
        #[serde(rename = "type")]
        type_: BaseTypeSystem,
        #[serde(default, skip_serializing_if = "::std::option::Option::is_none")]
        ui_label: ::std::option::Option<::std::string::String>,
    },
}
impl ::std::convert::From<&Self> for ThreadContentComponentFieldsValue {
    fn from(value: &ThreadContentComponentFieldsValue) -> Self {
        value.clone()
    }
}
#[doc = "The transient, mutable physics state of an entity."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"$id\": \"https://familiar.dev/schemas/components/UniversalPhysicsState.v1.schema.json\","]
#[doc = "  \"title\": \"Universal Physics State Component\","]
#[doc = "  \"description\": \"The transient, mutable physics state of an entity.\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"fields\","]
#[doc = "    \"physics_properties\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"fields\": {"]
#[doc = "      \"title\": \"UniversalPhysicsStateFields\","]
#[doc = "      \"description\": \"A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"cognitive_perspective\","]
#[doc = "        \"consolidation_rate\","]
#[doc = "        \"decay_rate\","]
#[doc = "        \"energy\","]
#[doc = "        \"entanglement_strength\","]
#[doc = "        \"momentum\","]
#[doc = "        \"quantum_coherence\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"cognitive_perspective\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/fields/CognitivePerspective.v1.schema.json\","]
#[doc = "          \"title\": \"Cognitive Perspective Field\","]
#[doc = "          \"description\": \"The intrinsic 'spin' or 'flavor' of the entity, which generates cognitive dissonance (torsion).\","]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"type\": \"number\""]
#[doc = "          },"]
#[doc = "          \"maxItems\": 3,"]
#[doc = "          \"minItems\": 3,"]
#[doc = "          \"ui_label\": \"Cognitive Perspective\""]
#[doc = "        },"]
#[doc = "        \"consolidation_rate\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/snippets/fields/ConsolidationRate.v1.json\","]
#[doc = "          \"title\": \"Consolidation Rate Field\","]
#[doc = "          \"description\": \"The base rate of memory consolidation for an entity, before multipliers are applied. Represents how quickly an unstable memory becomes stable.\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"required\": ["]
#[doc = "            \"value\""]
#[doc = "          ],"]
#[doc = "          \"properties\": {"]
#[doc = "            \"value\": {"]
#[doc = "              \"default\": 0.0,"]
#[doc = "              \"type\": \"number\","]
#[doc = "              \"format\": \"double\","]
#[doc = "              \"maximum\": 1.0,"]
#[doc = "              \"minimum\": 0.0,"]
#[doc = "              \"x-python-type\": \"float\","]
#[doc = "              \"x-rust-type\": \"f64\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        },"]
#[doc = "        \"decay_rate\": {"]
#[doc = "          \"description\": \"The base rate of energy or coherence decay for an entity, before multipliers are applied.\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"required\": ["]
#[doc = "            \"value\""]
#[doc = "          ],"]
#[doc = "          \"properties\": {"]
#[doc = "            \"value\": {"]
#[doc = "              \"default\": 0.01,"]
#[doc = "              \"type\": \"number\","]
#[doc = "              \"format\": \"double\","]
#[doc = "              \"x-python-type\": \"float\","]
#[doc = "              \"x-rust-type\": \"f64\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        },"]
#[doc = "        \"energy\": {"]
#[doc = "          \"description\": \"The current energy level of an entity.\","]
#[doc = "          \"default\": 0.1,"]
#[doc = "          \"type\": \"number\""]
#[doc = "        },"]
#[doc = "        \"entanglement_strength\": {"]
#[doc = "          \"description\": \"The overall entanglement strength of this entity with others. Null for classical entities.\","]
#[doc = "          \"default\": null,"]
#[doc = "          \"type\": ["]
#[doc = "            \"number\","]
#[doc = "            \"null\""]
#[doc = "          ],"]
#[doc = "          \"maximum\": 1.0,"]
#[doc = "          \"minimum\": 0.0"]
#[doc = "        },"]
#[doc = "        \"momentum\": {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/types/physics/Vec6.v1.json\","]
#[doc = "          \"title\": \"6D Physics Vector\","]
#[doc = "          \"description\": \"A reusable data type for a vector of six f64 numbers, used for momentum and forces in the 6 spatial dimensions of the manifold.\","]
#[doc = "          \"type\": \"array\","]
#[doc = "          \"items\": {"]
#[doc = "            \"type\": \"number\""]
#[doc = "          },"]
#[doc = "          \"maxItems\": 6,"]
#[doc = "          \"minItems\": 6"]
#[doc = "        },"]
#[doc = "        \"quantum_coherence\": {"]
#[doc = "          \"description\": \"The quantum coherence level of the entity, representing its degree of superposition. Null for classical entities.\","]
#[doc = "          \"default\": null,"]
#[doc = "          \"type\": ["]
#[doc = "            \"number\","]
#[doc = "            \"null\""]
#[doc = "          ],"]
#[doc = "          \"maximum\": 1.0,"]
#[doc = "          \"minimum\": 0.0"]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"patternProperties\": {"]
#[doc = "        \"^[a-z_][a-z0-9_]*$\": {"]
#[doc = "          \"oneOf\": ["]
#[doc = "            {"]
#[doc = "              \"description\": \"A direct reference to a shared definition in SharedDefinitions.schema.json.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"$ref\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"$ref\": {"]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"additionalProperties\": false"]
#[doc = "            },"]
#[doc = "            {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/base/Field.v1.schema.json\","]
#[doc = "              \"title\": \"Base Field\","]
#[doc = "              \"description\": \"Defines the structure for a single, inline field definition within a component.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"required\": ["]
#[doc = "                \"description\","]
#[doc = "                \"type\""]
#[doc = "              ],"]
#[doc = "              \"properties\": {"]
#[doc = "                \"constraints\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "                  \"title\": \"Constraint Definition\","]
#[doc = "                  \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"enum\": {"]
#[doc = "                      \"type\": \"array\","]
#[doc = "                      \"items\": {"]
#[doc = "                        \"type\": \"string\""]
#[doc = "                      }"]
#[doc = "                    },"]
#[doc = "                    \"maxLength\": {"]
#[doc = "                      \"type\": \"integer\""]
#[doc = "                    },"]
#[doc = "                    \"maximum\": {"]
#[doc = "                      \"type\": \"number\""]
#[doc = "                    },"]
#[doc = "                    \"minLength\": {"]
#[doc = "                      \"type\": \"integer\""]
#[doc = "                    },"]
#[doc = "                    \"minimum\": {"]
#[doc = "                      \"type\": \"number\""]
#[doc = "                    },"]
#[doc = "                    \"pattern\": {"]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"additionalProperties\": false"]
#[doc = "                },"]
#[doc = "                \"default_value\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "                  \"title\": \"Any Value\","]
#[doc = "                  \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "                  \"type\": ["]
#[doc = "                    \"string\","]
#[doc = "                    \"number\","]
#[doc = "                    \"integer\","]
#[doc = "                    \"boolean\","]
#[doc = "                    \"object\","]
#[doc = "                    \"array\","]
#[doc = "                    \"null\""]
#[doc = "                  ]"]
#[doc = "                },"]
#[doc = "                \"description\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "                  \"title\": \"Description Field\","]
#[doc = "                  \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "                  \"default\": \"\","]
#[doc = "                  \"type\": \"string\""]
#[doc = "                },"]
#[doc = "                \"type\": {"]
#[doc = "                  \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "                  \"title\": \"Base Type System\","]
#[doc = "                  \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "                  \"oneOf\": ["]
#[doc = "                    {"]
#[doc = "                      \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "                      \"type\": \"string\","]
#[doc = "                      \"enum\": ["]
#[doc = "                        \"string\","]
#[doc = "                        \"boolean\","]
#[doc = "                        \"integer\","]
#[doc = "                        \"number\","]
#[doc = "                        \"f32\","]
#[doc = "                        \"f64\","]
#[doc = "                        \"i32\","]
#[doc = "                        \"i64\","]
#[doc = "                        \"u32\","]
#[doc = "                        \"u64\","]
#[doc = "                        \"uuid\","]
#[doc = "                        \"date-time\","]
#[doc = "                        \"duration\","]
#[doc = "                        \"object\","]
#[doc = "                        \"array\""]
#[doc = "                      ]"]
#[doc = "                    },"]
#[doc = "                    {"]
#[doc = "                      \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "                      \"type\": \"object\","]
#[doc = "                      \"required\": ["]
#[doc = "                        \"$ref\""]
#[doc = "                      ],"]
#[doc = "                      \"properties\": {"]
#[doc = "                        \"$ref\": {"]
#[doc = "                          \"type\": \"string\""]
#[doc = "                        }"]
#[doc = "                      },"]
#[doc = "                      \"additionalProperties\": false"]
#[doc = "                    }"]
#[doc = "                  ],"]
#[doc = "                  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "                },"]
#[doc = "                \"ui_label\": {"]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "            }"]
#[doc = "          ]"]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"physics_properties\": {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/base/PhysicsProperties.v1.schema.json\","]
#[doc = "      \"title\": \"Base Physics Properties\","]
#[doc = "      \"description\": \"Defines the common physics-related properties for components and laws.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"engine\","]
#[doc = "        \"is_quantum\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"collapse_sensitive\": {"]
#[doc = "          \"description\": \"Indicates if the object is affected by or triggers quantum collapse.\","]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        },"]
#[doc = "        \"engine\": {"]
#[doc = "          \"description\": \"The physics engine responsible for this object.\","]
#[doc = "          \"enum\": ["]
#[doc = "            \"quantum\","]
#[doc = "            \"classical\","]
#[doc = "            \"hybrid\""]
#[doc = "          ]"]
#[doc = "        },"]
#[doc = "        \"is_quantum\": {"]
#[doc = "          \"description\": \"Indicates if the object has quantum properties.\","]
#[doc = "          \"type\": \"boolean\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\","]
#[doc = "  \"schema_version\": \"3.0.0\""]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
pub struct UniversalPhysicsStateComponent {
    pub fields: UniversalPhysicsStateFields,
    pub physics_properties: BasePhysicsProperties,
}
impl ::std::convert::From<&UniversalPhysicsStateComponent> for UniversalPhysicsStateComponent {
    fn from(value: &UniversalPhysicsStateComponent) -> Self {
        value.clone()
    }
}
impl UniversalPhysicsStateComponent {
    pub fn builder() -> builder::UniversalPhysicsStateComponent {
        Default::default()
    }
}
#[doc = "A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"title\": \"UniversalPhysicsStateFields\","]
#[doc = "  \"description\": \"A map of field names to their definitions. Each field can be defined inline or by referencing a shared definition.\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"cognitive_perspective\","]
#[doc = "    \"consolidation_rate\","]
#[doc = "    \"decay_rate\","]
#[doc = "    \"energy\","]
#[doc = "    \"entanglement_strength\","]
#[doc = "    \"momentum\","]
#[doc = "    \"quantum_coherence\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"cognitive_perspective\": {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/fields/CognitivePerspective.v1.schema.json\","]
#[doc = "      \"title\": \"Cognitive Perspective Field\","]
#[doc = "      \"description\": \"The intrinsic 'spin' or 'flavor' of the entity, which generates cognitive dissonance (torsion).\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"number\""]
#[doc = "      },"]
#[doc = "      \"maxItems\": 3,"]
#[doc = "      \"minItems\": 3,"]
#[doc = "      \"ui_label\": \"Cognitive Perspective\""]
#[doc = "    },"]
#[doc = "    \"consolidation_rate\": {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/snippets/fields/ConsolidationRate.v1.json\","]
#[doc = "      \"title\": \"Consolidation Rate Field\","]
#[doc = "      \"description\": \"The base rate of memory consolidation for an entity, before multipliers are applied. Represents how quickly an unstable memory becomes stable.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"value\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"value\": {"]
#[doc = "          \"default\": 0.0,"]
#[doc = "          \"type\": \"number\","]
#[doc = "          \"format\": \"double\","]
#[doc = "          \"maximum\": 1.0,"]
#[doc = "          \"minimum\": 0.0,"]
#[doc = "          \"x-python-type\": \"float\","]
#[doc = "          \"x-rust-type\": \"f64\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"decay_rate\": {"]
#[doc = "      \"description\": \"The base rate of energy or coherence decay for an entity, before multipliers are applied.\","]
#[doc = "      \"type\": \"object\","]
#[doc = "      \"required\": ["]
#[doc = "        \"value\""]
#[doc = "      ],"]
#[doc = "      \"properties\": {"]
#[doc = "        \"value\": {"]
#[doc = "          \"default\": 0.01,"]
#[doc = "          \"type\": \"number\","]
#[doc = "          \"format\": \"double\","]
#[doc = "          \"x-python-type\": \"float\","]
#[doc = "          \"x-rust-type\": \"f64\""]
#[doc = "        }"]
#[doc = "      },"]
#[doc = "      \"additionalProperties\": false"]
#[doc = "    },"]
#[doc = "    \"energy\": {"]
#[doc = "      \"description\": \"The current energy level of an entity.\","]
#[doc = "      \"default\": 0.1,"]
#[doc = "      \"type\": \"number\""]
#[doc = "    },"]
#[doc = "    \"entanglement_strength\": {"]
#[doc = "      \"description\": \"The overall entanglement strength of this entity with others. Null for classical entities.\","]
#[doc = "      \"default\": null,"]
#[doc = "      \"type\": ["]
#[doc = "        \"number\","]
#[doc = "        \"null\""]
#[doc = "      ],"]
#[doc = "      \"maximum\": 1.0,"]
#[doc = "      \"minimum\": 0.0"]
#[doc = "    },"]
#[doc = "    \"momentum\": {"]
#[doc = "      \"$id\": \"https://familiar.dev/schemas/types/physics/Vec6.v1.json\","]
#[doc = "      \"title\": \"6D Physics Vector\","]
#[doc = "      \"description\": \"A reusable data type for a vector of six f64 numbers, used for momentum and forces in the 6 spatial dimensions of the manifold.\","]
#[doc = "      \"type\": \"array\","]
#[doc = "      \"items\": {"]
#[doc = "        \"type\": \"number\""]
#[doc = "      },"]
#[doc = "      \"maxItems\": 6,"]
#[doc = "      \"minItems\": 6"]
#[doc = "    },"]
#[doc = "    \"quantum_coherence\": {"]
#[doc = "      \"description\": \"The quantum coherence level of the entity, representing its degree of superposition. Null for classical entities.\","]
#[doc = "      \"default\": null,"]
#[doc = "      \"type\": ["]
#[doc = "        \"number\","]
#[doc = "        \"null\""]
#[doc = "      ],"]
#[doc = "      \"maximum\": 1.0,"]
#[doc = "      \"minimum\": 0.0"]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"patternProperties\": {"]
#[doc = "    \"^[a-z_][a-z0-9_]*$\": {"]
#[doc = "      \"oneOf\": ["]
#[doc = "        {"]
#[doc = "          \"description\": \"A direct reference to a shared definition in SharedDefinitions.schema.json.\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"required\": ["]
#[doc = "            \"$ref\""]
#[doc = "          ],"]
#[doc = "          \"properties\": {"]
#[doc = "            \"$ref\": {"]
#[doc = "              \"type\": \"string\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"additionalProperties\": false"]
#[doc = "        },"]
#[doc = "        {"]
#[doc = "          \"$id\": \"https://familiar.dev/schemas/base/Field.v1.schema.json\","]
#[doc = "          \"title\": \"Base Field\","]
#[doc = "          \"description\": \"Defines the structure for a single, inline field definition within a component.\","]
#[doc = "          \"type\": \"object\","]
#[doc = "          \"required\": ["]
#[doc = "            \"description\","]
#[doc = "            \"type\""]
#[doc = "          ],"]
#[doc = "          \"properties\": {"]
#[doc = "            \"constraints\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/types/validation/ConstraintDefinition.v1.json\","]
#[doc = "              \"title\": \"Constraint Definition\","]
#[doc = "              \"description\": \"A canonical definition for field validation constraints.\","]
#[doc = "              \"type\": \"object\","]
#[doc = "              \"properties\": {"]
#[doc = "                \"enum\": {"]
#[doc = "                  \"type\": \"array\","]
#[doc = "                  \"items\": {"]
#[doc = "                    \"type\": \"string\""]
#[doc = "                  }"]
#[doc = "                },"]
#[doc = "                \"maxLength\": {"]
#[doc = "                  \"type\": \"integer\""]
#[doc = "                },"]
#[doc = "                \"maximum\": {"]
#[doc = "                  \"type\": \"number\""]
#[doc = "                },"]
#[doc = "                \"minLength\": {"]
#[doc = "                  \"type\": \"integer\""]
#[doc = "                },"]
#[doc = "                \"minimum\": {"]
#[doc = "                  \"type\": \"number\""]
#[doc = "                },"]
#[doc = "                \"pattern\": {"]
#[doc = "                  \"type\": \"string\""]
#[doc = "                }"]
#[doc = "              },"]
#[doc = "              \"additionalProperties\": false"]
#[doc = "            },"]
#[doc = "            \"default_value\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/types/AnyValue.v1.json\","]
#[doc = "              \"title\": \"Any Value\","]
#[doc = "              \"description\": \"Represents any valid JSON value. Used for fields with dynamic or unknown types, like 'default' values.\","]
#[doc = "              \"type\": ["]
#[doc = "                \"string\","]
#[doc = "                \"number\","]
#[doc = "                \"integer\","]
#[doc = "                \"boolean\","]
#[doc = "                \"object\","]
#[doc = "                \"array\","]
#[doc = "                \"null\""]
#[doc = "              ]"]
#[doc = "            },"]
#[doc = "            \"description\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/fields/Description.v1.json\","]
#[doc = "              \"title\": \"Description Field\","]
#[doc = "              \"description\": \"A canonical, reusable definition for a human-readable description field.\","]
#[doc = "              \"default\": \"\","]
#[doc = "              \"type\": \"string\""]
#[doc = "            },"]
#[doc = "            \"type\": {"]
#[doc = "              \"$id\": \"https://familiar.dev/schemas/base/TypeSystem.v1.schema.json\","]
#[doc = "              \"title\": \"Base Type System\","]
#[doc = "              \"description\": \"The canonical list of all valid primitive and complex data types used within the Familiar engine. A type can be a primitive string or a reference to a complex type schema.\","]
#[doc = "              \"oneOf\": ["]
#[doc = "                {"]
#[doc = "                  \"description\": \"A primitive type, represented as a string from a controlled vocabulary.\","]
#[doc = "                  \"type\": \"string\","]
#[doc = "                  \"enum\": ["]
#[doc = "                    \"string\","]
#[doc = "                    \"boolean\","]
#[doc = "                    \"integer\","]
#[doc = "                    \"number\","]
#[doc = "                    \"f32\","]
#[doc = "                    \"f64\","]
#[doc = "                    \"i32\","]
#[doc = "                    \"i64\","]
#[doc = "                    \"u32\","]
#[doc = "                    \"u64\","]
#[doc = "                    \"uuid\","]
#[doc = "                    \"date-time\","]
#[doc = "                    \"duration\","]
#[doc = "                    \"object\","]
#[doc = "                    \"array\""]
#[doc = "                  ]"]
#[doc = "                },"]
#[doc = "                {"]
#[doc = "                  \"description\": \"A complex, contrived meta-type, represented by a reference to its canonical schema file.\","]
#[doc = "                  \"type\": \"object\","]
#[doc = "                  \"required\": ["]
#[doc = "                    \"$ref\""]
#[doc = "                  ],"]
#[doc = "                  \"properties\": {"]
#[doc = "                    \"$ref\": {"]
#[doc = "                      \"type\": \"string\""]
#[doc = "                    }"]
#[doc = "                  },"]
#[doc = "                  \"additionalProperties\": false"]
#[doc = "                }"]
#[doc = "              ],"]
#[doc = "              \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "            },"]
#[doc = "            \"ui_label\": {"]
#[doc = "              \"type\": \"string\""]
#[doc = "            }"]
#[doc = "          },"]
#[doc = "          \"$schema\": \"https://json-schema.org/draft/2020-12/schema\""]
#[doc = "        }"]
#[doc = "      ]"]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
pub struct UniversalPhysicsStateFields {
    #[doc = "The intrinsic 'spin' or 'flavor' of the entity, which generates cognitive dissonance (torsion)."]
    pub cognitive_perspective: [f64; 3usize],
    pub consolidation_rate: ConsolidationRateField,
    pub decay_rate: UniversalPhysicsStateFieldsDecayRate,
    pub energy: f64,
    #[doc = "The overall entanglement strength of this entity with others. Null for classical entities."]
    pub entanglement_strength: ::std::option::Option<f64>,
    #[doc = "A reusable data type for a vector of six f64 numbers, used for momentum and forces in the 6 spatial dimensions of the manifold."]
    pub momentum: [f64; 6usize],
    #[doc = "The quantum coherence level of the entity, representing its degree of superposition. Null for classical entities."]
    pub quantum_coherence: ::std::option::Option<f64>,
}
impl ::std::convert::From<&UniversalPhysicsStateFields> for UniversalPhysicsStateFields {
    fn from(value: &UniversalPhysicsStateFields) -> Self {
        value.clone()
    }
}
impl UniversalPhysicsStateFields {
    pub fn builder() -> builder::UniversalPhysicsStateFields {
        Default::default()
    }
}
#[doc = "The base rate of energy or coherence decay for an entity, before multipliers are applied."]
#[doc = r""]
#[doc = r" <details><summary>JSON schema</summary>"]
#[doc = r""]
#[doc = r" ```json"]
#[doc = "{"]
#[doc = "  \"description\": \"The base rate of energy or coherence decay for an entity, before multipliers are applied.\","]
#[doc = "  \"type\": \"object\","]
#[doc = "  \"required\": ["]
#[doc = "    \"value\""]
#[doc = "  ],"]
#[doc = "  \"properties\": {"]
#[doc = "    \"value\": {"]
#[doc = "      \"default\": 0.01,"]
#[doc = "      \"type\": \"number\","]
#[doc = "      \"format\": \"double\","]
#[doc = "      \"x-python-type\": \"float\","]
#[doc = "      \"x-rust-type\": \"f64\""]
#[doc = "    }"]
#[doc = "  },"]
#[doc = "  \"additionalProperties\": false"]
#[doc = "}"]
#[doc = r" ```"]
#[doc = r" </details>"]
#[derive(:: serde :: Deserialize, :: serde :: Serialize, Clone, Debug)]
#[serde(deny_unknown_fields)]
pub struct UniversalPhysicsStateFieldsDecayRate {
    pub value: f64,
}
impl ::std::convert::From<&UniversalPhysicsStateFieldsDecayRate>
    for UniversalPhysicsStateFieldsDecayRate
{
    fn from(value: &UniversalPhysicsStateFieldsDecayRate) -> Self {
        value.clone()
    }
}
impl UniversalPhysicsStateFieldsDecayRate {
    pub fn builder() -> builder::UniversalPhysicsStateFieldsDecayRate {
        Default::default()
    }
}
#[doc = r" Types for composing complex structures."]
pub mod builder {
    #[derive(Clone, Debug)]
    pub struct BasePhysicsProperties {
        collapse_sensitive:
            ::std::result::Result<::std::option::Option<bool>, ::std::string::String>,
        engine: ::std::result::Result<super::BasePhysicsPropertiesEngine, ::std::string::String>,
        is_quantum: ::std::result::Result<bool, ::std::string::String>,
    }
    impl ::std::default::Default for BasePhysicsProperties {
        fn default() -> Self {
            Self {
                collapse_sensitive: Ok(Default::default()),
                engine: Err("no value supplied for engine".to_string()),
                is_quantum: Err("no value supplied for is_quantum".to_string()),
            }
        }
    }
    impl BasePhysicsProperties {
        pub fn collapse_sensitive<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<bool>>,
            T::Error: ::std::fmt::Display,
        {
            self.collapse_sensitive = value.try_into().map_err(|e| {
                format!(
                    "error converting supplied value for collapse_sensitive: {}",
                    e
                )
            });
            self
        }
        pub fn engine<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<super::BasePhysicsPropertiesEngine>,
            T::Error: ::std::fmt::Display,
        {
            self.engine = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for engine: {}", e));
            self
        }
        pub fn is_quantum<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<bool>,
            T::Error: ::std::fmt::Display,
        {
            self.is_quantum = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for is_quantum: {}", e));
            self
        }
    }
    impl ::std::convert::TryFrom<BasePhysicsProperties> for super::BasePhysicsProperties {
        type Error = super::error::ConversionError;
        fn try_from(
            value: BasePhysicsProperties,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                collapse_sensitive: value.collapse_sensitive?,
                engine: value.engine?,
                is_quantum: value.is_quantum?,
            })
        }
    }
    impl ::std::convert::From<super::BasePhysicsProperties> for BasePhysicsProperties {
        fn from(value: super::BasePhysicsProperties) -> Self {
            Self {
                collapse_sensitive: Ok(value.collapse_sensitive),
                engine: Ok(value.engine),
                is_quantum: Ok(value.is_quantum),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct BaseUserContext {
        session_id: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
        user_id: ::std::result::Result<::std::string::String, ::std::string::String>,
    }
    impl ::std::default::Default for BaseUserContext {
        fn default() -> Self {
            Self {
                session_id: Ok(Default::default()),
                user_id: Err("no value supplied for user_id".to_string()),
            }
        }
    }
    impl BaseUserContext {
        pub fn session_id<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.session_id = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for session_id: {}", e));
            self
        }
        pub fn user_id<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::string::String>,
            T::Error: ::std::fmt::Display,
        {
            self.user_id = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for user_id: {}", e));
            self
        }
    }
    impl ::std::convert::TryFrom<BaseUserContext> for super::BaseUserContext {
        type Error = super::error::ConversionError;
        fn try_from(
            value: BaseUserContext,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                session_id: value.session_id?,
                user_id: value.user_id?,
            })
        }
    }
    impl ::std::convert::From<super::BaseUserContext> for BaseUserContext {
        fn from(value: super::BaseUserContext) -> Self {
            Self {
                session_id: Ok(value.session_id),
                user_id: Ok(value.user_id),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct BondComponents {
        comment: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
        content: ::std::result::Result<super::BondContentComponent, ::std::string::String>,
        permissions: ::std::result::Result<super::BondPermissionsComponent, ::std::string::String>,
        physics_config:
            ::std::result::Result<super::BondPhysicsConfigComponent, ::std::string::String>,
    }
    impl ::std::default::Default for BondComponents {
        fn default() -> Self {
            Self {
                comment: Ok(Default::default()),
                content: Err("no value supplied for content".to_string()),
                permissions: Err("no value supplied for permissions".to_string()),
                physics_config: Err("no value supplied for physics_config".to_string()),
            }
        }
    }
    impl BondComponents {
        pub fn comment<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.comment = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for comment: {}", e));
            self
        }
        pub fn content<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<super::BondContentComponent>,
            T::Error: ::std::fmt::Display,
        {
            self.content = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for content: {}", e));
            self
        }
        pub fn permissions<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<super::BondPermissionsComponent>,
            T::Error: ::std::fmt::Display,
        {
            self.permissions = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for permissions: {}", e));
            self
        }
        pub fn physics_config<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<super::BondPhysicsConfigComponent>,
            T::Error: ::std::fmt::Display,
        {
            self.physics_config = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for physics_config: {}", e));
            self
        }
    }
    impl ::std::convert::TryFrom<BondComponents> for super::BondComponents {
        type Error = super::error::ConversionError;
        fn try_from(
            value: BondComponents,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                comment: value.comment?,
                content: value.content?,
                permissions: value.permissions?,
                physics_config: value.physics_config?,
            })
        }
    }
    impl ::std::convert::From<super::BondComponents> for BondComponents {
        fn from(value: super::BondComponents) -> Self {
            Self {
                comment: Ok(value.comment),
                content: Ok(value.content),
                permissions: Ok(value.permissions),
                physics_config: Ok(value.physics_config),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct BondContentComponent {
        fields: ::std::result::Result<super::BondContentFields, ::std::string::String>,
        physics_properties:
            ::std::result::Result<super::BasePhysicsProperties, ::std::string::String>,
    }
    impl ::std::default::Default for BondContentComponent {
        fn default() -> Self {
            Self {
                fields: Err("no value supplied for fields".to_string()),
                physics_properties: Err("no value supplied for physics_properties".to_string()),
            }
        }
    }
    impl BondContentComponent {
        pub fn fields<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<super::BondContentFields>,
            T::Error: ::std::fmt::Display,
        {
            self.fields = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for fields: {}", e));
            self
        }
        pub fn physics_properties<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<super::BasePhysicsProperties>,
            T::Error: ::std::fmt::Display,
        {
            self.physics_properties = value.try_into().map_err(|e| {
                format!(
                    "error converting supplied value for physics_properties: {}",
                    e
                )
            });
            self
        }
    }
    impl ::std::convert::TryFrom<BondContentComponent> for super::BondContentComponent {
        type Error = super::error::ConversionError;
        fn try_from(
            value: BondContentComponent,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                fields: value.fields?,
                physics_properties: value.physics_properties?,
            })
        }
    }
    impl ::std::convert::From<super::BondContentComponent> for BondContentComponent {
        fn from(value: super::BondContentComponent) -> Self {
            Self {
                fields: Ok(value.fields),
                physics_properties: Ok(value.physics_properties),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct BondContentFields {
        description: ::std::result::Result<::std::string::String, ::std::string::String>,
        history:
            ::std::result::Result<::std::vec::Vec<super::BondEventType>, ::std::string::String>,
        relationship_type: ::std::result::Result<super::RelationshipType, ::std::string::String>,
    }
    impl ::std::default::Default for BondContentFields {
        fn default() -> Self {
            Self {
                description: Ok(Default::default()),
                history: Ok(Default::default()),
                relationship_type: Err("no value supplied for relationship_type".to_string()),
            }
        }
    }
    impl BondContentFields {
        pub fn description<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::string::String>,
            T::Error: ::std::fmt::Display,
        {
            self.description = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for description: {}", e));
            self
        }
        pub fn history<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::vec::Vec<super::BondEventType>>,
            T::Error: ::std::fmt::Display,
        {
            self.history = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for history: {}", e));
            self
        }
        pub fn relationship_type<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<super::RelationshipType>,
            T::Error: ::std::fmt::Display,
        {
            self.relationship_type = value.try_into().map_err(|e| {
                format!(
                    "error converting supplied value for relationship_type: {}",
                    e
                )
            });
            self
        }
    }
    impl ::std::convert::TryFrom<BondContentFields> for super::BondContentFields {
        type Error = super::error::ConversionError;
        fn try_from(
            value: BondContentFields,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                description: value.description?,
                history: value.history?,
                relationship_type: value.relationship_type?,
            })
        }
    }
    impl ::std::convert::From<super::BondContentFields> for BondContentFields {
        fn from(value: super::BondContentFields) -> Self {
            Self {
                description: Ok(value.description),
                history: Ok(value.history),
                relationship_type: Ok(value.relationship_type),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct BondEventType {
        impact: ::std::result::Result<f64, ::std::string::String>,
        moment_id: ::std::result::Result<::std::string::String, ::std::string::String>,
        timestamp: ::std::result::Result<::std::string::String, ::std::string::String>,
    }
    impl ::std::default::Default for BondEventType {
        fn default() -> Self {
            Self {
                impact: Err("no value supplied for impact".to_string()),
                moment_id: Err("no value supplied for moment_id".to_string()),
                timestamp: Err("no value supplied for timestamp".to_string()),
            }
        }
    }
    impl BondEventType {
        pub fn impact<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<f64>,
            T::Error: ::std::fmt::Display,
        {
            self.impact = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for impact: {}", e));
            self
        }
        pub fn moment_id<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::string::String>,
            T::Error: ::std::fmt::Display,
        {
            self.moment_id = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for moment_id: {}", e));
            self
        }
        pub fn timestamp<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::string::String>,
            T::Error: ::std::fmt::Display,
        {
            self.timestamp = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for timestamp: {}", e));
            self
        }
    }
    impl ::std::convert::TryFrom<BondEventType> for super::BondEventType {
        type Error = super::error::ConversionError;
        fn try_from(
            value: BondEventType,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                impact: value.impact?,
                moment_id: value.moment_id?,
                timestamp: value.timestamp?,
            })
        }
    }
    impl ::std::convert::From<super::BondEventType> for BondEventType {
        fn from(value: super::BondEventType) -> Self {
            Self {
                impact: Ok(value.impact),
                moment_id: Ok(value.moment_id),
                timestamp: Ok(value.timestamp),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct BondPermissionsComponent {
        fields: ::std::result::Result<
            ::std::collections::HashMap<
                super::BondPermissionsComponentFieldsKey,
                super::BondPermissionsComponentFieldsValue,
            >,
            ::std::string::String,
        >,
        physics_properties:
            ::std::result::Result<super::BasePhysicsProperties, ::std::string::String>,
    }
    impl ::std::default::Default for BondPermissionsComponent {
        fn default() -> Self {
            Self {
                fields: Err("no value supplied for fields".to_string()),
                physics_properties: Err("no value supplied for physics_properties".to_string()),
            }
        }
    }
    impl BondPermissionsComponent {
        pub fn fields<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::collections::HashMap<
                    super::BondPermissionsComponentFieldsKey,
                    super::BondPermissionsComponentFieldsValue,
                >,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.fields = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for fields: {}", e));
            self
        }
        pub fn physics_properties<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<super::BasePhysicsProperties>,
            T::Error: ::std::fmt::Display,
        {
            self.physics_properties = value.try_into().map_err(|e| {
                format!(
                    "error converting supplied value for physics_properties: {}",
                    e
                )
            });
            self
        }
    }
    impl ::std::convert::TryFrom<BondPermissionsComponent> for super::BondPermissionsComponent {
        type Error = super::error::ConversionError;
        fn try_from(
            value: BondPermissionsComponent,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                fields: value.fields?,
                physics_properties: value.physics_properties?,
            })
        }
    }
    impl ::std::convert::From<super::BondPermissionsComponent> for BondPermissionsComponent {
        fn from(value: super::BondPermissionsComponent) -> Self {
            Self {
                fields: Ok(value.fields),
                physics_properties: Ok(value.physics_properties),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct BondPhysicsConfigComponent {
        fields: ::std::result::Result<
            ::std::collections::HashMap<
                super::BondPhysicsConfigComponentFieldsKey,
                super::BondPhysicsConfigComponentFieldsValue,
            >,
            ::std::string::String,
        >,
        physics_properties:
            ::std::result::Result<super::BasePhysicsProperties, ::std::string::String>,
    }
    impl ::std::default::Default for BondPhysicsConfigComponent {
        fn default() -> Self {
            Self {
                fields: Err("no value supplied for fields".to_string()),
                physics_properties: Err("no value supplied for physics_properties".to_string()),
            }
        }
    }
    impl BondPhysicsConfigComponent {
        pub fn fields<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::collections::HashMap<
                    super::BondPhysicsConfigComponentFieldsKey,
                    super::BondPhysicsConfigComponentFieldsValue,
                >,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.fields = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for fields: {}", e));
            self
        }
        pub fn physics_properties<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<super::BasePhysicsProperties>,
            T::Error: ::std::fmt::Display,
        {
            self.physics_properties = value.try_into().map_err(|e| {
                format!(
                    "error converting supplied value for physics_properties: {}",
                    e
                )
            });
            self
        }
    }
    impl ::std::convert::TryFrom<BondPhysicsConfigComponent> for super::BondPhysicsConfigComponent {
        type Error = super::error::ConversionError;
        fn try_from(
            value: BondPhysicsConfigComponent,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                fields: value.fields?,
                physics_properties: value.physics_properties?,
            })
        }
    }
    impl ::std::convert::From<super::BondPhysicsConfigComponent> for BondPhysicsConfigComponent {
        fn from(value: super::BondPhysicsConfigComponent) -> Self {
            Self {
                fields: Ok(value.fields),
                physics_properties: Ok(value.physics_properties),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct BondPhysicsState {
        tension: ::std::result::Result<super::BondTensionComponent, ::std::string::String>,
        universal:
            ::std::result::Result<super::UniversalPhysicsStateComponent, ::std::string::String>,
    }
    impl ::std::default::Default for BondPhysicsState {
        fn default() -> Self {
            Self {
                tension: Err("no value supplied for tension".to_string()),
                universal: Err("no value supplied for universal".to_string()),
            }
        }
    }
    impl BondPhysicsState {
        pub fn tension<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<super::BondTensionComponent>,
            T::Error: ::std::fmt::Display,
        {
            self.tension = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for tension: {}", e));
            self
        }
        pub fn universal<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<super::UniversalPhysicsStateComponent>,
            T::Error: ::std::fmt::Display,
        {
            self.universal = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for universal: {}", e));
            self
        }
    }
    impl ::std::convert::TryFrom<BondPhysicsState> for super::BondPhysicsState {
        type Error = super::error::ConversionError;
        fn try_from(
            value: BondPhysicsState,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                tension: value.tension?,
                universal: value.universal?,
            })
        }
    }
    impl ::std::convert::From<super::BondPhysicsState> for BondPhysicsState {
        fn from(value: super::BondPhysicsState) -> Self {
            Self {
                tension: Ok(value.tension),
                universal: Ok(value.universal),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct BondTensionComponent {
        fields: ::std::result::Result<
            ::std::collections::HashMap<
                super::BondTensionComponentFieldsKey,
                super::BondTensionComponentFieldsValue,
            >,
            ::std::string::String,
        >,
        physics_properties:
            ::std::result::Result<super::BasePhysicsProperties, ::std::string::String>,
    }
    impl ::std::default::Default for BondTensionComponent {
        fn default() -> Self {
            Self {
                fields: Err("no value supplied for fields".to_string()),
                physics_properties: Err("no value supplied for physics_properties".to_string()),
            }
        }
    }
    impl BondTensionComponent {
        pub fn fields<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::collections::HashMap<
                    super::BondTensionComponentFieldsKey,
                    super::BondTensionComponentFieldsValue,
                >,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.fields = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for fields: {}", e));
            self
        }
        pub fn physics_properties<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<super::BasePhysicsProperties>,
            T::Error: ::std::fmt::Display,
        {
            self.physics_properties = value.try_into().map_err(|e| {
                format!(
                    "error converting supplied value for physics_properties: {}",
                    e
                )
            });
            self
        }
    }
    impl ::std::convert::TryFrom<BondTensionComponent> for super::BondTensionComponent {
        type Error = super::error::ConversionError;
        fn try_from(
            value: BondTensionComponent,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                fields: value.fields?,
                physics_properties: value.physics_properties?,
            })
        }
    }
    impl ::std::convert::From<super::BondTensionComponent> for BondTensionComponent {
        fn from(value: super::BondTensionComponent) -> Self {
            Self {
                fields: Ok(value.fields),
                physics_properties: Ok(value.physics_properties),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct CognitiveBaselineComponent {
        fields: ::std::result::Result<
            ::std::collections::HashMap<
                super::CognitiveBaselineComponentFieldsKey,
                super::CognitiveBaselineComponentFieldsValue,
            >,
            ::std::string::String,
        >,
        physics_properties:
            ::std::result::Result<super::BasePhysicsProperties, ::std::string::String>,
    }
    impl ::std::default::Default for CognitiveBaselineComponent {
        fn default() -> Self {
            Self {
                fields: Err("no value supplied for fields".to_string()),
                physics_properties: Err("no value supplied for physics_properties".to_string()),
            }
        }
    }
    impl CognitiveBaselineComponent {
        pub fn fields<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::collections::HashMap<
                    super::CognitiveBaselineComponentFieldsKey,
                    super::CognitiveBaselineComponentFieldsValue,
                >,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.fields = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for fields: {}", e));
            self
        }
        pub fn physics_properties<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<super::BasePhysicsProperties>,
            T::Error: ::std::fmt::Display,
        {
            self.physics_properties = value.try_into().map_err(|e| {
                format!(
                    "error converting supplied value for physics_properties: {}",
                    e
                )
            });
            self
        }
    }
    impl ::std::convert::TryFrom<CognitiveBaselineComponent> for super::CognitiveBaselineComponent {
        type Error = super::error::ConversionError;
        fn try_from(
            value: CognitiveBaselineComponent,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                fields: value.fields?,
                physics_properties: value.physics_properties?,
            })
        }
    }
    impl ::std::convert::From<super::CognitiveBaselineComponent> for CognitiveBaselineComponent {
        fn from(value: super::CognitiveBaselineComponent) -> Self {
            Self {
                fields: Ok(value.fields),
                physics_properties: Ok(value.physics_properties),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct ConsolidationRateField {
        value: ::std::result::Result<f64, ::std::string::String>,
    }
    impl ::std::default::Default for ConsolidationRateField {
        fn default() -> Self {
            Self {
                value: Err("no value supplied for value".to_string()),
            }
        }
    }
    impl ConsolidationRateField {
        pub fn value<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<f64>,
            T::Error: ::std::fmt::Display,
        {
            self.value = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for value: {}", e));
            self
        }
    }
    impl ::std::convert::TryFrom<ConsolidationRateField> for super::ConsolidationRateField {
        type Error = super::error::ConversionError;
        fn try_from(
            value: ConsolidationRateField,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                value: value.value?,
            })
        }
    }
    impl ::std::convert::From<super::ConsolidationRateField> for ConsolidationRateField {
        fn from(value: super::ConsolidationRateField) -> Self {
            Self {
                value: Ok(value.value),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct ConsolidationStateComponent {
        fields: ::std::result::Result<super::ConsolidationStateFields, ::std::string::String>,
        physics_properties:
            ::std::result::Result<super::BasePhysicsProperties, ::std::string::String>,
    }
    impl ::std::default::Default for ConsolidationStateComponent {
        fn default() -> Self {
            Self {
                fields: Err("no value supplied for fields".to_string()),
                physics_properties: Err("no value supplied for physics_properties".to_string()),
            }
        }
    }
    impl ConsolidationStateComponent {
        pub fn fields<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<super::ConsolidationStateFields>,
            T::Error: ::std::fmt::Display,
        {
            self.fields = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for fields: {}", e));
            self
        }
        pub fn physics_properties<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<super::BasePhysicsProperties>,
            T::Error: ::std::fmt::Display,
        {
            self.physics_properties = value.try_into().map_err(|e| {
                format!(
                    "error converting supplied value for physics_properties: {}",
                    e
                )
            });
            self
        }
    }
    impl ::std::convert::TryFrom<ConsolidationStateComponent> for super::ConsolidationStateComponent {
        type Error = super::error::ConversionError;
        fn try_from(
            value: ConsolidationStateComponent,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                fields: value.fields?,
                physics_properties: value.physics_properties?,
            })
        }
    }
    impl ::std::convert::From<super::ConsolidationStateComponent> for ConsolidationStateComponent {
        fn from(value: super::ConsolidationStateComponent) -> Self {
            Self {
                fields: Ok(value.fields),
                physics_properties: Ok(value.physics_properties),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct ConsolidationStateFields {
        consolidation_level:
            ::std::result::Result<super::ConsolidationLevel, ::std::string::String>,
        last_consolidated_at: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
        next_consolidation_due: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
        source_entity_count: ::std::result::Result<::std::num::NonZeroU64, ::std::string::String>,
    }
    impl ::std::default::Default for ConsolidationStateFields {
        fn default() -> Self {
            Self {
                consolidation_level: Err("no value supplied for consolidation_level".to_string()),
                last_consolidated_at: Err("no value supplied for last_consolidated_at".to_string()),
                next_consolidation_due: Err(
                    "no value supplied for next_consolidation_due".to_string()
                ),
                source_entity_count: Err("no value supplied for source_entity_count".to_string()),
            }
        }
    }
    impl ConsolidationStateFields {
        pub fn consolidation_level<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<super::ConsolidationLevel>,
            T::Error: ::std::fmt::Display,
        {
            self.consolidation_level = value.try_into().map_err(|e| {
                format!(
                    "error converting supplied value for consolidation_level: {}",
                    e
                )
            });
            self
        }
        pub fn last_consolidated_at<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.last_consolidated_at = value.try_into().map_err(|e| {
                format!(
                    "error converting supplied value for last_consolidated_at: {}",
                    e
                )
            });
            self
        }
        pub fn next_consolidation_due<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.next_consolidation_due = value.try_into().map_err(|e| {
                format!(
                    "error converting supplied value for next_consolidation_due: {}",
                    e
                )
            });
            self
        }
        pub fn source_entity_count<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::num::NonZeroU64>,
            T::Error: ::std::fmt::Display,
        {
            self.source_entity_count = value.try_into().map_err(|e| {
                format!(
                    "error converting supplied value for source_entity_count: {}",
                    e
                )
            });
            self
        }
    }
    impl ::std::convert::TryFrom<ConsolidationStateFields> for super::ConsolidationStateFields {
        type Error = super::error::ConversionError;
        fn try_from(
            value: ConsolidationStateFields,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                consolidation_level: value.consolidation_level?,
                last_consolidated_at: value.last_consolidated_at?,
                next_consolidation_due: value.next_consolidation_due?,
                source_entity_count: value.source_entity_count?,
            })
        }
    }
    impl ::std::convert::From<super::ConsolidationStateFields> for ConsolidationStateFields {
        fn from(value: super::ConsolidationStateFields) -> Self {
            Self {
                consolidation_level: Ok(value.consolidation_level),
                last_consolidated_at: Ok(value.last_consolidated_at),
                next_consolidation_due: Ok(value.next_consolidation_due),
                source_entity_count: Ok(value.source_entity_count),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct ConstraintDefinition {
        enum_: ::std::result::Result<::std::vec::Vec<::std::string::String>, ::std::string::String>,
        max_length: ::std::result::Result<::std::option::Option<i64>, ::std::string::String>,
        maximum: ::std::result::Result<::std::option::Option<f64>, ::std::string::String>,
        min_length: ::std::result::Result<::std::option::Option<i64>, ::std::string::String>,
        minimum: ::std::result::Result<::std::option::Option<f64>, ::std::string::String>,
        pattern: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
    }
    impl ::std::default::Default for ConstraintDefinition {
        fn default() -> Self {
            Self {
                enum_: Ok(Default::default()),
                max_length: Ok(Default::default()),
                maximum: Ok(Default::default()),
                min_length: Ok(Default::default()),
                minimum: Ok(Default::default()),
                pattern: Ok(Default::default()),
            }
        }
    }
    impl ConstraintDefinition {
        pub fn enum_<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::vec::Vec<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.enum_ = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for enum_: {}", e));
            self
        }
        pub fn max_length<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<i64>>,
            T::Error: ::std::fmt::Display,
        {
            self.max_length = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for max_length: {}", e));
            self
        }
        pub fn maximum<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<f64>>,
            T::Error: ::std::fmt::Display,
        {
            self.maximum = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for maximum: {}", e));
            self
        }
        pub fn min_length<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<i64>>,
            T::Error: ::std::fmt::Display,
        {
            self.min_length = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for min_length: {}", e));
            self
        }
        pub fn minimum<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<f64>>,
            T::Error: ::std::fmt::Display,
        {
            self.minimum = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for minimum: {}", e));
            self
        }
        pub fn pattern<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.pattern = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for pattern: {}", e));
            self
        }
    }
    impl ::std::convert::TryFrom<ConstraintDefinition> for super::ConstraintDefinition {
        type Error = super::error::ConversionError;
        fn try_from(
            value: ConstraintDefinition,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                enum_: value.enum_?,
                max_length: value.max_length?,
                maximum: value.maximum?,
                min_length: value.min_length?,
                minimum: value.minimum?,
                pattern: value.pattern?,
            })
        }
    }
    impl ::std::convert::From<super::ConstraintDefinition> for ConstraintDefinition {
        fn from(value: super::ConstraintDefinition) -> Self {
            Self {
                enum_: Ok(value.enum_),
                max_length: Ok(value.max_length),
                maximum: Ok(value.maximum),
                min_length: Ok(value.min_length),
                minimum: Ok(value.minimum),
                pattern: Ok(value.pattern),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct EntityDraftPayload {
        data: ::std::result::Result<super::EntityDraftPayloadData, ::std::string::String>,
        description: ::std::result::Result<::std::string::String, ::std::string::String>,
        schema_version: ::std::result::Result<::std::string::String, ::std::string::String>,
        title: ::std::result::Result<::std::string::String, ::std::string::String>,
        user_context: ::std::result::Result<super::BaseUserContext, ::std::string::String>,
    }
    impl ::std::default::Default for EntityDraftPayload {
        fn default() -> Self {
            Self {
                data: Err("no value supplied for data".to_string()),
                description: Err("no value supplied for description".to_string()),
                schema_version: Err("no value supplied for schema_version".to_string()),
                title: Err("no value supplied for title".to_string()),
                user_context: Err("no value supplied for user_context".to_string()),
            }
        }
    }
    impl EntityDraftPayload {
        pub fn data<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<super::EntityDraftPayloadData>,
            T::Error: ::std::fmt::Display,
        {
            self.data = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for data: {}", e));
            self
        }
        pub fn description<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::string::String>,
            T::Error: ::std::fmt::Display,
        {
            self.description = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for description: {}", e));
            self
        }
        pub fn schema_version<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::string::String>,
            T::Error: ::std::fmt::Display,
        {
            self.schema_version = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for schema_version: {}", e));
            self
        }
        pub fn title<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::string::String>,
            T::Error: ::std::fmt::Display,
        {
            self.title = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for title: {}", e));
            self
        }
        pub fn user_context<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<super::BaseUserContext>,
            T::Error: ::std::fmt::Display,
        {
            self.user_context = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for user_context: {}", e));
            self
        }
    }
    impl ::std::convert::TryFrom<EntityDraftPayload> for super::EntityDraftPayload {
        type Error = super::error::ConversionError;
        fn try_from(
            value: EntityDraftPayload,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                data: value.data?,
                description: value.description?,
                schema_version: value.schema_version?,
                title: value.title?,
                user_context: value.user_context?,
            })
        }
    }
    impl ::std::convert::From<super::EntityDraftPayload> for EntityDraftPayload {
        fn from(value: super::EntityDraftPayload) -> Self {
            Self {
                data: Ok(value.data),
                description: Ok(value.description),
                schema_version: Ok(value.schema_version),
                title: Ok(value.title),
                user_context: Ok(value.user_context),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct FilamentComponents {
        comment: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
        consolidation:
            ::std::result::Result<super::ConsolidationStateComponent, ::std::string::String>,
        content: ::std::result::Result<super::FilamentContentComponent, ::std::string::String>,
        gdpr: ::std::result::Result<::serde_json::Value, ::std::string::String>,
    }
    impl ::std::default::Default for FilamentComponents {
        fn default() -> Self {
            Self {
                comment: Ok(Default::default()),
                consolidation: Err("no value supplied for consolidation".to_string()),
                content: Err("no value supplied for content".to_string()),
                gdpr: Err("no value supplied for gdpr".to_string()),
            }
        }
    }
    impl FilamentComponents {
        pub fn comment<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.comment = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for comment: {}", e));
            self
        }
        pub fn consolidation<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<super::ConsolidationStateComponent>,
            T::Error: ::std::fmt::Display,
        {
            self.consolidation = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for consolidation: {}", e));
            self
        }
        pub fn content<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<super::FilamentContentComponent>,
            T::Error: ::std::fmt::Display,
        {
            self.content = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for content: {}", e));
            self
        }
        pub fn gdpr<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::serde_json::Value>,
            T::Error: ::std::fmt::Display,
        {
            self.gdpr = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for gdpr: {}", e));
            self
        }
    }
    impl ::std::convert::TryFrom<FilamentComponents> for super::FilamentComponents {
        type Error = super::error::ConversionError;
        fn try_from(
            value: FilamentComponents,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                comment: value.comment?,
                consolidation: value.consolidation?,
                content: value.content?,
                gdpr: value.gdpr?,
            })
        }
    }
    impl ::std::convert::From<super::FilamentComponents> for FilamentComponents {
        fn from(value: super::FilamentComponents) -> Self {
            Self {
                comment: Ok(value.comment),
                consolidation: Ok(value.consolidation),
                content: Ok(value.content),
                gdpr: Ok(value.gdpr),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct FilamentContentComponent {
        fields: ::std::result::Result<super::FilamentContentFields, ::std::string::String>,
        physics_properties:
            ::std::result::Result<super::BasePhysicsProperties, ::std::string::String>,
    }
    impl ::std::default::Default for FilamentContentComponent {
        fn default() -> Self {
            Self {
                fields: Err("no value supplied for fields".to_string()),
                physics_properties: Err("no value supplied for physics_properties".to_string()),
            }
        }
    }
    impl FilamentContentComponent {
        pub fn fields<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<super::FilamentContentFields>,
            T::Error: ::std::fmt::Display,
        {
            self.fields = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for fields: {}", e));
            self
        }
        pub fn physics_properties<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<super::BasePhysicsProperties>,
            T::Error: ::std::fmt::Display,
        {
            self.physics_properties = value.try_into().map_err(|e| {
                format!(
                    "error converting supplied value for physics_properties: {}",
                    e
                )
            });
            self
        }
    }
    impl ::std::convert::TryFrom<FilamentContentComponent> for super::FilamentContentComponent {
        type Error = super::error::ConversionError;
        fn try_from(
            value: FilamentContentComponent,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                fields: value.fields?,
                physics_properties: value.physics_properties?,
            })
        }
    }
    impl ::std::convert::From<super::FilamentContentComponent> for FilamentContentComponent {
        fn from(value: super::FilamentContentComponent) -> Self {
            Self {
                fields: Ok(value.fields),
                physics_properties: Ok(value.physics_properties),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct FilamentContentFields {
        abstraction_level: ::std::result::Result<super::AbstractionLevel, ::std::string::String>,
        filament_type: ::std::result::Result<super::FilamentType, ::std::string::String>,
        narrative_description: ::std::result::Result<::std::string::String, ::std::string::String>,
        source_threads_and_bonds:
            ::std::result::Result<::std::vec::Vec<::std::string::String>, ::std::string::String>,
    }
    impl ::std::default::Default for FilamentContentFields {
        fn default() -> Self {
            Self {
                abstraction_level: Err("no value supplied for abstraction_level".to_string()),
                filament_type: Err("no value supplied for filament_type".to_string()),
                narrative_description: Err(
                    "no value supplied for narrative_description".to_string()
                ),
                source_threads_and_bonds: Err(
                    "no value supplied for source_threads_and_bonds".to_string()
                ),
            }
        }
    }
    impl FilamentContentFields {
        pub fn abstraction_level<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<super::AbstractionLevel>,
            T::Error: ::std::fmt::Display,
        {
            self.abstraction_level = value.try_into().map_err(|e| {
                format!(
                    "error converting supplied value for abstraction_level: {}",
                    e
                )
            });
            self
        }
        pub fn filament_type<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<super::FilamentType>,
            T::Error: ::std::fmt::Display,
        {
            self.filament_type = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for filament_type: {}", e));
            self
        }
        pub fn narrative_description<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::string::String>,
            T::Error: ::std::fmt::Display,
        {
            self.narrative_description = value.try_into().map_err(|e| {
                format!(
                    "error converting supplied value for narrative_description: {}",
                    e
                )
            });
            self
        }
        pub fn source_threads_and_bonds<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::vec::Vec<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.source_threads_and_bonds = value.try_into().map_err(|e| {
                format!(
                    "error converting supplied value for source_threads_and_bonds: {}",
                    e
                )
            });
            self
        }
    }
    impl ::std::convert::TryFrom<FilamentContentFields> for super::FilamentContentFields {
        type Error = super::error::ConversionError;
        fn try_from(
            value: FilamentContentFields,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                abstraction_level: value.abstraction_level?,
                filament_type: value.filament_type?,
                narrative_description: value.narrative_description?,
                source_threads_and_bonds: value.source_threads_and_bonds?,
            })
        }
    }
    impl ::std::convert::From<super::FilamentContentFields> for FilamentContentFields {
        fn from(value: super::FilamentContentFields) -> Self {
            Self {
                abstraction_level: Ok(value.abstraction_level),
                filament_type: Ok(value.filament_type),
                narrative_description: Ok(value.narrative_description),
                source_threads_and_bonds: Ok(value.source_threads_and_bonds),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct FilamentPhysicsState {
        quantum: ::std::result::Result<::serde_json::Value, ::std::string::String>,
        universal:
            ::std::result::Result<super::UniversalPhysicsStateComponent, ::std::string::String>,
    }
    impl ::std::default::Default for FilamentPhysicsState {
        fn default() -> Self {
            Self {
                quantum: Err("no value supplied for quantum".to_string()),
                universal: Err("no value supplied for universal".to_string()),
            }
        }
    }
    impl FilamentPhysicsState {
        pub fn quantum<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::serde_json::Value>,
            T::Error: ::std::fmt::Display,
        {
            self.quantum = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for quantum: {}", e));
            self
        }
        pub fn universal<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<super::UniversalPhysicsStateComponent>,
            T::Error: ::std::fmt::Display,
        {
            self.universal = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for universal: {}", e));
            self
        }
    }
    impl ::std::convert::TryFrom<FilamentPhysicsState> for super::FilamentPhysicsState {
        type Error = super::error::ConversionError;
        fn try_from(
            value: FilamentPhysicsState,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                quantum: value.quantum?,
                universal: value.universal?,
            })
        }
    }
    impl ::std::convert::From<super::FilamentPhysicsState> for FilamentPhysicsState {
        fn from(value: super::FilamentPhysicsState) -> Self {
            Self {
                quantum: Ok(value.quantum),
                universal: Ok(value.universal),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct FocusComponents {
        comment: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
        content: ::std::result::Result<super::FocusContentComponent, ::std::string::String>,
    }
    impl ::std::default::Default for FocusComponents {
        fn default() -> Self {
            Self {
                comment: Ok(Default::default()),
                content: Err("no value supplied for content".to_string()),
            }
        }
    }
    impl FocusComponents {
        pub fn comment<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.comment = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for comment: {}", e));
            self
        }
        pub fn content<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<super::FocusContentComponent>,
            T::Error: ::std::fmt::Display,
        {
            self.content = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for content: {}", e));
            self
        }
    }
    impl ::std::convert::TryFrom<FocusComponents> for super::FocusComponents {
        type Error = super::error::ConversionError;
        fn try_from(
            value: FocusComponents,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                comment: value.comment?,
                content: value.content?,
            })
        }
    }
    impl ::std::convert::From<super::FocusComponents> for FocusComponents {
        fn from(value: super::FocusComponents) -> Self {
            Self {
                comment: Ok(value.comment),
                content: Ok(value.content),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct FocusContentComponent {
        fields: ::std::result::Result<
            ::std::collections::HashMap<
                super::FocusContentComponentFieldsKey,
                super::FocusContentComponentFieldsValue,
            >,
            ::std::string::String,
        >,
        physics_properties:
            ::std::result::Result<super::BasePhysicsProperties, ::std::string::String>,
    }
    impl ::std::default::Default for FocusContentComponent {
        fn default() -> Self {
            Self {
                fields: Err("no value supplied for fields".to_string()),
                physics_properties: Err("no value supplied for physics_properties".to_string()),
            }
        }
    }
    impl FocusContentComponent {
        pub fn fields<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::collections::HashMap<
                    super::FocusContentComponentFieldsKey,
                    super::FocusContentComponentFieldsValue,
                >,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.fields = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for fields: {}", e));
            self
        }
        pub fn physics_properties<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<super::BasePhysicsProperties>,
            T::Error: ::std::fmt::Display,
        {
            self.physics_properties = value.try_into().map_err(|e| {
                format!(
                    "error converting supplied value for physics_properties: {}",
                    e
                )
            });
            self
        }
    }
    impl ::std::convert::TryFrom<FocusContentComponent> for super::FocusContentComponent {
        type Error = super::error::ConversionError;
        fn try_from(
            value: FocusContentComponent,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                fields: value.fields?,
                physics_properties: value.physics_properties?,
            })
        }
    }
    impl ::std::convert::From<super::FocusContentComponent> for FocusContentComponent {
        fn from(value: super::FocusContentComponent) -> Self {
            Self {
                fields: Ok(value.fields),
                physics_properties: Ok(value.physics_properties),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct FocusPhysicsState {
        quantum: ::std::result::Result<::serde_json::Value, ::std::string::String>,
        universal:
            ::std::result::Result<super::UniversalPhysicsStateComponent, ::std::string::String>,
    }
    impl ::std::default::Default for FocusPhysicsState {
        fn default() -> Self {
            Self {
                quantum: Err("no value supplied for quantum".to_string()),
                universal: Err("no value supplied for universal".to_string()),
            }
        }
    }
    impl FocusPhysicsState {
        pub fn quantum<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::serde_json::Value>,
            T::Error: ::std::fmt::Display,
        {
            self.quantum = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for quantum: {}", e));
            self
        }
        pub fn universal<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<super::UniversalPhysicsStateComponent>,
            T::Error: ::std::fmt::Display,
        {
            self.universal = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for universal: {}", e));
            self
        }
    }
    impl ::std::convert::TryFrom<FocusPhysicsState> for super::FocusPhysicsState {
        type Error = super::error::ConversionError;
        fn try_from(
            value: FocusPhysicsState,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                quantum: value.quantum?,
                universal: value.universal?,
            })
        }
    }
    impl ::std::convert::From<super::FocusPhysicsState> for FocusPhysicsState {
        fn from(value: super::FocusPhysicsState) -> Self {
            Self {
                quantum: Ok(value.quantum),
                universal: Ok(value.universal),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct GdprDependencyComponent {
        fields: ::std::result::Result<
            ::std::collections::HashMap<
                super::GdprDependencyComponentFieldsKey,
                super::GdprDependencyComponentFieldsValue,
            >,
            ::std::string::String,
        >,
        physics_properties:
            ::std::result::Result<super::BasePhysicsProperties, ::std::string::String>,
    }
    impl ::std::default::Default for GdprDependencyComponent {
        fn default() -> Self {
            Self {
                fields: Err("no value supplied for fields".to_string()),
                physics_properties: Err("no value supplied for physics_properties".to_string()),
            }
        }
    }
    impl GdprDependencyComponent {
        pub fn fields<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::collections::HashMap<
                    super::GdprDependencyComponentFieldsKey,
                    super::GdprDependencyComponentFieldsValue,
                >,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.fields = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for fields: {}", e));
            self
        }
        pub fn physics_properties<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<super::BasePhysicsProperties>,
            T::Error: ::std::fmt::Display,
        {
            self.physics_properties = value.try_into().map_err(|e| {
                format!(
                    "error converting supplied value for physics_properties: {}",
                    e
                )
            });
            self
        }
    }
    impl ::std::convert::TryFrom<GdprDependencyComponent> for super::GdprDependencyComponent {
        type Error = super::error::ConversionError;
        fn try_from(
            value: GdprDependencyComponent,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                fields: value.fields?,
                physics_properties: value.physics_properties?,
            })
        }
    }
    impl ::std::convert::From<super::GdprDependencyComponent> for GdprDependencyComponent {
        fn from(value: super::GdprDependencyComponent) -> Self {
            Self {
                fields: Ok(value.fields),
                physics_properties: Ok(value.physics_properties),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct GenericThreadPhysicsState {
        universal:
            ::std::result::Result<super::UniversalPhysicsStateComponent, ::std::string::String>,
    }
    impl ::std::default::Default for GenericThreadPhysicsState {
        fn default() -> Self {
            Self {
                universal: Err("no value supplied for universal".to_string()),
            }
        }
    }
    impl GenericThreadPhysicsState {
        pub fn universal<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<super::UniversalPhysicsStateComponent>,
            T::Error: ::std::fmt::Display,
        {
            self.universal = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for universal: {}", e));
            self
        }
    }
    impl ::std::convert::TryFrom<GenericThreadPhysicsState> for super::GenericThreadPhysicsState {
        type Error = super::error::ConversionError;
        fn try_from(
            value: GenericThreadPhysicsState,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                universal: value.universal?,
            })
        }
    }
    impl ::std::convert::From<super::GenericThreadPhysicsState> for GenericThreadPhysicsState {
        fn from(value: super::GenericThreadPhysicsState) -> Self {
            Self {
                universal: Ok(value.universal),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct IntentComponents {
        comment: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
        content: ::std::result::Result<super::IntentContentComponent, ::std::string::String>,
        status: ::std::result::Result<super::TaskStatusComponent, ::std::string::String>,
    }
    impl ::std::default::Default for IntentComponents {
        fn default() -> Self {
            Self {
                comment: Ok(Default::default()),
                content: Err("no value supplied for content".to_string()),
                status: Err("no value supplied for status".to_string()),
            }
        }
    }
    impl IntentComponents {
        pub fn comment<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.comment = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for comment: {}", e));
            self
        }
        pub fn content<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<super::IntentContentComponent>,
            T::Error: ::std::fmt::Display,
        {
            self.content = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for content: {}", e));
            self
        }
        pub fn status<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<super::TaskStatusComponent>,
            T::Error: ::std::fmt::Display,
        {
            self.status = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for status: {}", e));
            self
        }
    }
    impl ::std::convert::TryFrom<IntentComponents> for super::IntentComponents {
        type Error = super::error::ConversionError;
        fn try_from(
            value: IntentComponents,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                comment: value.comment?,
                content: value.content?,
                status: value.status?,
            })
        }
    }
    impl ::std::convert::From<super::IntentComponents> for IntentComponents {
        fn from(value: super::IntentComponents) -> Self {
            Self {
                comment: Ok(value.comment),
                content: Ok(value.content),
                status: Ok(value.status),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct IntentContentComponent {
        fields: ::std::result::Result<
            ::std::collections::HashMap<
                super::IntentContentComponentFieldsKey,
                super::IntentContentComponentFieldsValue,
            >,
            ::std::string::String,
        >,
        physics_properties:
            ::std::result::Result<super::BasePhysicsProperties, ::std::string::String>,
    }
    impl ::std::default::Default for IntentContentComponent {
        fn default() -> Self {
            Self {
                fields: Err("no value supplied for fields".to_string()),
                physics_properties: Err("no value supplied for physics_properties".to_string()),
            }
        }
    }
    impl IntentContentComponent {
        pub fn fields<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::collections::HashMap<
                    super::IntentContentComponentFieldsKey,
                    super::IntentContentComponentFieldsValue,
                >,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.fields = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for fields: {}", e));
            self
        }
        pub fn physics_properties<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<super::BasePhysicsProperties>,
            T::Error: ::std::fmt::Display,
        {
            self.physics_properties = value.try_into().map_err(|e| {
                format!(
                    "error converting supplied value for physics_properties: {}",
                    e
                )
            });
            self
        }
    }
    impl ::std::convert::TryFrom<IntentContentComponent> for super::IntentContentComponent {
        type Error = super::error::ConversionError;
        fn try_from(
            value: IntentContentComponent,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                fields: value.fields?,
                physics_properties: value.physics_properties?,
            })
        }
    }
    impl ::std::convert::From<super::IntentContentComponent> for IntentContentComponent {
        fn from(value: super::IntentContentComponent) -> Self {
            Self {
                fields: Ok(value.fields),
                physics_properties: Ok(value.physics_properties),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct IntentPhysicsState {
        manifold_position: ::std::result::Result<::serde_json::Value, ::std::string::String>,
        universal:
            ::std::result::Result<super::UniversalPhysicsStateComponent, ::std::string::String>,
    }
    impl ::std::default::Default for IntentPhysicsState {
        fn default() -> Self {
            Self {
                manifold_position: Err("no value supplied for manifold_position".to_string()),
                universal: Err("no value supplied for universal".to_string()),
            }
        }
    }
    impl IntentPhysicsState {
        pub fn manifold_position<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::serde_json::Value>,
            T::Error: ::std::fmt::Display,
        {
            self.manifold_position = value.try_into().map_err(|e| {
                format!(
                    "error converting supplied value for manifold_position: {}",
                    e
                )
            });
            self
        }
        pub fn universal<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<super::UniversalPhysicsStateComponent>,
            T::Error: ::std::fmt::Display,
        {
            self.universal = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for universal: {}", e));
            self
        }
    }
    impl ::std::convert::TryFrom<IntentPhysicsState> for super::IntentPhysicsState {
        type Error = super::error::ConversionError;
        fn try_from(
            value: IntentPhysicsState,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                manifold_position: value.manifold_position?,
                universal: value.universal?,
            })
        }
    }
    impl ::std::convert::From<super::IntentPhysicsState> for IntentPhysicsState {
        fn from(value: super::IntentPhysicsState) -> Self {
            Self {
                manifold_position: Ok(value.manifold_position),
                universal: Ok(value.universal),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct MemoryManifoldPositionComponent {
        fields: ::std::result::Result<
            ::std::collections::HashMap<
                super::MemoryManifoldPositionComponentFieldsKey,
                super::MemoryManifoldPositionComponentFieldsValue,
            >,
            ::std::string::String,
        >,
        physics_properties:
            ::std::result::Result<super::BasePhysicsProperties, ::std::string::String>,
    }
    impl ::std::default::Default for MemoryManifoldPositionComponent {
        fn default() -> Self {
            Self {
                fields: Err("no value supplied for fields".to_string()),
                physics_properties: Err("no value supplied for physics_properties".to_string()),
            }
        }
    }
    impl MemoryManifoldPositionComponent {
        pub fn fields<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::collections::HashMap<
                    super::MemoryManifoldPositionComponentFieldsKey,
                    super::MemoryManifoldPositionComponentFieldsValue,
                >,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.fields = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for fields: {}", e));
            self
        }
        pub fn physics_properties<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<super::BasePhysicsProperties>,
            T::Error: ::std::fmt::Display,
        {
            self.physics_properties = value.try_into().map_err(|e| {
                format!(
                    "error converting supplied value for physics_properties: {}",
                    e
                )
            });
            self
        }
    }
    impl ::std::convert::TryFrom<MemoryManifoldPositionComponent>
        for super::MemoryManifoldPositionComponent
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: MemoryManifoldPositionComponent,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                fields: value.fields?,
                physics_properties: value.physics_properties?,
            })
        }
    }
    impl ::std::convert::From<super::MemoryManifoldPositionComponent>
        for MemoryManifoldPositionComponent
    {
        fn from(value: super::MemoryManifoldPositionComponent) -> Self {
            Self {
                fields: Ok(value.fields),
                physics_properties: Ok(value.physics_properties),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct MomentComponents {
        comment: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
        content: ::std::result::Result<super::MomentContentComponent, ::std::string::String>,
    }
    impl ::std::default::Default for MomentComponents {
        fn default() -> Self {
            Self {
                comment: Ok(Default::default()),
                content: Err("no value supplied for content".to_string()),
            }
        }
    }
    impl MomentComponents {
        pub fn comment<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.comment = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for comment: {}", e));
            self
        }
        pub fn content<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<super::MomentContentComponent>,
            T::Error: ::std::fmt::Display,
        {
            self.content = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for content: {}", e));
            self
        }
    }
    impl ::std::convert::TryFrom<MomentComponents> for super::MomentComponents {
        type Error = super::error::ConversionError;
        fn try_from(
            value: MomentComponents,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                comment: value.comment?,
                content: value.content?,
            })
        }
    }
    impl ::std::convert::From<super::MomentComponents> for MomentComponents {
        fn from(value: super::MomentComponents) -> Self {
            Self {
                comment: Ok(value.comment),
                content: Ok(value.content),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct MomentContentComponent {
        description: ::std::result::Result<::std::string::String, ::std::string::String>,
        fields: ::std::result::Result<super::MomentContentFields, ::std::string::String>,
        physics_properties:
            ::std::result::Result<super::BasePhysicsProperties, ::std::string::String>,
        schema_version: ::std::result::Result<::std::string::String, ::std::string::String>,
        title: ::std::result::Result<::std::string::String, ::std::string::String>,
    }
    impl ::std::default::Default for MomentContentComponent {
        fn default() -> Self {
            Self {
                description: Err("no value supplied for description".to_string()),
                fields: Err("no value supplied for fields".to_string()),
                physics_properties: Err("no value supplied for physics_properties".to_string()),
                schema_version: Err("no value supplied for schema_version".to_string()),
                title: Err("no value supplied for title".to_string()),
            }
        }
    }
    impl MomentContentComponent {
        pub fn description<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::string::String>,
            T::Error: ::std::fmt::Display,
        {
            self.description = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for description: {}", e));
            self
        }
        pub fn fields<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<super::MomentContentFields>,
            T::Error: ::std::fmt::Display,
        {
            self.fields = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for fields: {}", e));
            self
        }
        pub fn physics_properties<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<super::BasePhysicsProperties>,
            T::Error: ::std::fmt::Display,
        {
            self.physics_properties = value.try_into().map_err(|e| {
                format!(
                    "error converting supplied value for physics_properties: {}",
                    e
                )
            });
            self
        }
        pub fn schema_version<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::string::String>,
            T::Error: ::std::fmt::Display,
        {
            self.schema_version = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for schema_version: {}", e));
            self
        }
        pub fn title<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::string::String>,
            T::Error: ::std::fmt::Display,
        {
            self.title = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for title: {}", e));
            self
        }
    }
    impl ::std::convert::TryFrom<MomentContentComponent> for super::MomentContentComponent {
        type Error = super::error::ConversionError;
        fn try_from(
            value: MomentContentComponent,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                description: value.description?,
                fields: value.fields?,
                physics_properties: value.physics_properties?,
                schema_version: value.schema_version?,
                title: value.title?,
            })
        }
    }
    impl ::std::convert::From<super::MomentContentComponent> for MomentContentComponent {
        fn from(value: super::MomentContentComponent) -> Self {
            Self {
                description: Ok(value.description),
                fields: Ok(value.fields),
                physics_properties: Ok(value.physics_properties),
                schema_version: Ok(value.schema_version),
                title: Ok(value.title),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct MomentContentFields {
        description: ::std::result::Result<::std::string::String, ::std::string::String>,
        moment_type: ::std::result::Result<super::MomentType, ::std::string::String>,
        objective_facts: ::std::result::Result<
            ::std::collections::HashMap<
                super::MomentContentFieldsObjectiveFactsKey,
                ::serde_json::Value,
            >,
            ::std::string::String,
        >,
        participants: ::std::result::Result<
            ::std::option::Option<Vec<::std::string::String>>,
            ::std::string::String,
        >,
    }
    impl ::std::default::Default for MomentContentFields {
        fn default() -> Self {
            Self {
                description: Err("no value supplied for description".to_string()),
                moment_type: Err("no value supplied for moment_type".to_string()),
                objective_facts: Ok(Default::default()),
                participants: Ok(Default::default()),
            }
        }
    }
    impl MomentContentFields {
        pub fn description<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::string::String>,
            T::Error: ::std::fmt::Display,
        {
            self.description = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for description: {}", e));
            self
        }
        pub fn moment_type<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<super::MomentType>,
            T::Error: ::std::fmt::Display,
        {
            self.moment_type = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for moment_type: {}", e));
            self
        }
        pub fn objective_facts<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::collections::HashMap<
                    super::MomentContentFieldsObjectiveFactsKey,
                    ::serde_json::Value,
                >,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.objective_facts = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for objective_facts: {}", e));
            self
        }
        pub fn participants<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<Vec<::std::string::String>>>,
            T::Error: ::std::fmt::Display,
        {
            self.participants = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for participants: {}", e));
            self
        }
    }
    impl ::std::convert::TryFrom<MomentContentFields> for super::MomentContentFields {
        type Error = super::error::ConversionError;
        fn try_from(
            value: MomentContentFields,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                description: value.description?,
                moment_type: value.moment_type?,
                objective_facts: value.objective_facts?,
                participants: value.participants?,
            })
        }
    }
    impl ::std::convert::From<super::MomentContentFields> for MomentContentFields {
        fn from(value: super::MomentContentFields) -> Self {
            Self {
                description: Ok(value.description),
                moment_type: Ok(value.moment_type),
                objective_facts: Ok(value.objective_facts),
                participants: Ok(value.participants),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct MomentPhysicsState {
        manifold_position:
            ::std::result::Result<super::MemoryManifoldPositionComponent, ::std::string::String>,
        universal:
            ::std::result::Result<super::UniversalPhysicsStateComponent, ::std::string::String>,
    }
    impl ::std::default::Default for MomentPhysicsState {
        fn default() -> Self {
            Self {
                manifold_position: Err("no value supplied for manifold_position".to_string()),
                universal: Err("no value supplied for universal".to_string()),
            }
        }
    }
    impl MomentPhysicsState {
        pub fn manifold_position<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<super::MemoryManifoldPositionComponent>,
            T::Error: ::std::fmt::Display,
        {
            self.manifold_position = value.try_into().map_err(|e| {
                format!(
                    "error converting supplied value for manifold_position: {}",
                    e
                )
            });
            self
        }
        pub fn universal<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<super::UniversalPhysicsStateComponent>,
            T::Error: ::std::fmt::Display,
        {
            self.universal = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for universal: {}", e));
            self
        }
    }
    impl ::std::convert::TryFrom<MomentPhysicsState> for super::MomentPhysicsState {
        type Error = super::error::ConversionError;
        fn try_from(
            value: MomentPhysicsState,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                manifold_position: value.manifold_position?,
                universal: value.universal?,
            })
        }
    }
    impl ::std::convert::From<super::MomentPhysicsState> for MomentPhysicsState {
        fn from(value: super::MomentPhysicsState) -> Self {
            Self {
                manifold_position: Ok(value.manifold_position),
                universal: Ok(value.universal),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct MotifComponents {
        comment: ::std::result::Result<
            ::std::option::Option<::std::string::String>,
            ::std::string::String,
        >,
        consolidation:
            ::std::result::Result<super::ConsolidationStateComponent, ::std::string::String>,
        content: ::std::result::Result<super::MotifContentComponent, ::std::string::String>,
        gdpr: ::std::result::Result<super::GdprDependencyComponent, ::std::string::String>,
    }
    impl ::std::default::Default for MotifComponents {
        fn default() -> Self {
            Self {
                comment: Ok(Default::default()),
                consolidation: Err("no value supplied for consolidation".to_string()),
                content: Err("no value supplied for content".to_string()),
                gdpr: Err("no value supplied for gdpr".to_string()),
            }
        }
    }
    impl MotifComponents {
        pub fn comment<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.comment = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for comment: {}", e));
            self
        }
        pub fn consolidation<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<super::ConsolidationStateComponent>,
            T::Error: ::std::fmt::Display,
        {
            self.consolidation = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for consolidation: {}", e));
            self
        }
        pub fn content<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<super::MotifContentComponent>,
            T::Error: ::std::fmt::Display,
        {
            self.content = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for content: {}", e));
            self
        }
        pub fn gdpr<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<super::GdprDependencyComponent>,
            T::Error: ::std::fmt::Display,
        {
            self.gdpr = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for gdpr: {}", e));
            self
        }
    }
    impl ::std::convert::TryFrom<MotifComponents> for super::MotifComponents {
        type Error = super::error::ConversionError;
        fn try_from(
            value: MotifComponents,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                comment: value.comment?,
                consolidation: value.consolidation?,
                content: value.content?,
                gdpr: value.gdpr?,
            })
        }
    }
    impl ::std::convert::From<super::MotifComponents> for MotifComponents {
        fn from(value: super::MotifComponents) -> Self {
            Self {
                comment: Ok(value.comment),
                consolidation: Ok(value.consolidation),
                content: Ok(value.content),
                gdpr: Ok(value.gdpr),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct MotifContentComponent {
        fields: ::std::result::Result<super::MotifContentFields, ::std::string::String>,
        physics_properties:
            ::std::result::Result<super::BasePhysicsProperties, ::std::string::String>,
    }
    impl ::std::default::Default for MotifContentComponent {
        fn default() -> Self {
            Self {
                fields: Err("no value supplied for fields".to_string()),
                physics_properties: Err("no value supplied for physics_properties".to_string()),
            }
        }
    }
    impl MotifContentComponent {
        pub fn fields<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<super::MotifContentFields>,
            T::Error: ::std::fmt::Display,
        {
            self.fields = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for fields: {}", e));
            self
        }
        pub fn physics_properties<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<super::BasePhysicsProperties>,
            T::Error: ::std::fmt::Display,
        {
            self.physics_properties = value.try_into().map_err(|e| {
                format!(
                    "error converting supplied value for physics_properties: {}",
                    e
                )
            });
            self
        }
    }
    impl ::std::convert::TryFrom<MotifContentComponent> for super::MotifContentComponent {
        type Error = super::error::ConversionError;
        fn try_from(
            value: MotifContentComponent,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                fields: value.fields?,
                physics_properties: value.physics_properties?,
            })
        }
    }
    impl ::std::convert::From<super::MotifContentComponent> for MotifContentComponent {
        fn from(value: super::MotifContentComponent) -> Self {
            Self {
                fields: Ok(value.fields),
                physics_properties: Ok(value.physics_properties),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct MotifContentFields {
        motif_description: ::std::result::Result<::std::string::String, ::std::string::String>,
        motif_type: ::std::result::Result<super::MotifType, ::std::string::String>,
        source_entanglements:
            ::std::result::Result<Vec<::std::string::String>, ::std::string::String>,
    }
    impl ::std::default::Default for MotifContentFields {
        fn default() -> Self {
            Self {
                motif_description: Err("no value supplied for motif_description".to_string()),
                motif_type: Err("no value supplied for motif_type".to_string()),
                source_entanglements: Err("no value supplied for source_entanglements".to_string()),
            }
        }
    }
    impl MotifContentFields {
        pub fn motif_description<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::string::String>,
            T::Error: ::std::fmt::Display,
        {
            self.motif_description = value.try_into().map_err(|e| {
                format!(
                    "error converting supplied value for motif_description: {}",
                    e
                )
            });
            self
        }
        pub fn motif_type<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<super::MotifType>,
            T::Error: ::std::fmt::Display,
        {
            self.motif_type = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for motif_type: {}", e));
            self
        }
        pub fn source_entanglements<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<Vec<::std::string::String>>,
            T::Error: ::std::fmt::Display,
        {
            self.source_entanglements = value.try_into().map_err(|e| {
                format!(
                    "error converting supplied value for source_entanglements: {}",
                    e
                )
            });
            self
        }
    }
    impl ::std::convert::TryFrom<MotifContentFields> for super::MotifContentFields {
        type Error = super::error::ConversionError;
        fn try_from(
            value: MotifContentFields,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                motif_description: value.motif_description?,
                motif_type: value.motif_type?,
                source_entanglements: value.source_entanglements?,
            })
        }
    }
    impl ::std::convert::From<super::MotifContentFields> for MotifContentFields {
        fn from(value: super::MotifContentFields) -> Self {
            Self {
                motif_description: Ok(value.motif_description),
                motif_type: Ok(value.motif_type),
                source_entanglements: Ok(value.source_entanglements),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct MotifPhysicsState {
        quantum: ::std::result::Result<super::QuantumStateComponent, ::std::string::String>,
        universal:
            ::std::result::Result<super::UniversalPhysicsStateComponent, ::std::string::String>,
    }
    impl ::std::default::Default for MotifPhysicsState {
        fn default() -> Self {
            Self {
                quantum: Err("no value supplied for quantum".to_string()),
                universal: Err("no value supplied for universal".to_string()),
            }
        }
    }
    impl MotifPhysicsState {
        pub fn quantum<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<super::QuantumStateComponent>,
            T::Error: ::std::fmt::Display,
        {
            self.quantum = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for quantum: {}", e));
            self
        }
        pub fn universal<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<super::UniversalPhysicsStateComponent>,
            T::Error: ::std::fmt::Display,
        {
            self.universal = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for universal: {}", e));
            self
        }
    }
    impl ::std::convert::TryFrom<MotifPhysicsState> for super::MotifPhysicsState {
        type Error = super::error::ConversionError;
        fn try_from(
            value: MotifPhysicsState,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                quantum: value.quantum?,
                universal: value.universal?,
            })
        }
    }
    impl ::std::convert::From<super::MotifPhysicsState> for MotifPhysicsState {
        fn from(value: super::MotifPhysicsState) -> Self {
            Self {
                quantum: Ok(value.quantum),
                universal: Ok(value.universal),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct PersonThreadComponents {
        cognitive_baseline:
            ::std::result::Result<super::CognitiveBaselineComponent, ::std::string::String>,
    }
    impl ::std::default::Default for PersonThreadComponents {
        fn default() -> Self {
            Self {
                cognitive_baseline: Err("no value supplied for cognitive_baseline".to_string()),
            }
        }
    }
    impl PersonThreadComponents {
        pub fn cognitive_baseline<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<super::CognitiveBaselineComponent>,
            T::Error: ::std::fmt::Display,
        {
            self.cognitive_baseline = value.try_into().map_err(|e| {
                format!(
                    "error converting supplied value for cognitive_baseline: {}",
                    e
                )
            });
            self
        }
    }
    impl ::std::convert::TryFrom<PersonThreadComponents> for super::PersonThreadComponents {
        type Error = super::error::ConversionError;
        fn try_from(
            value: PersonThreadComponents,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                cognitive_baseline: value.cognitive_baseline?,
            })
        }
    }
    impl ::std::convert::From<super::PersonThreadComponents> for PersonThreadComponents {
        fn from(value: super::PersonThreadComponents) -> Self {
            Self {
                cognitive_baseline: Ok(value.cognitive_baseline),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct PersonThreadPhysicsState {
        universal:
            ::std::result::Result<super::UniversalPhysicsStateComponent, ::std::string::String>,
    }
    impl ::std::default::Default for PersonThreadPhysicsState {
        fn default() -> Self {
            Self {
                universal: Err("no value supplied for universal".to_string()),
            }
        }
    }
    impl PersonThreadPhysicsState {
        pub fn universal<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<super::UniversalPhysicsStateComponent>,
            T::Error: ::std::fmt::Display,
        {
            self.universal = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for universal: {}", e));
            self
        }
    }
    impl ::std::convert::TryFrom<PersonThreadPhysicsState> for super::PersonThreadPhysicsState {
        type Error = super::error::ConversionError;
        fn try_from(
            value: PersonThreadPhysicsState,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                universal: value.universal?,
            })
        }
    }
    impl ::std::convert::From<super::PersonThreadPhysicsState> for PersonThreadPhysicsState {
        fn from(value: super::PersonThreadPhysicsState) -> Self {
            Self {
                universal: Ok(value.universal),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct QuantumStateComponent {
        fields: ::std::result::Result<
            ::std::collections::HashMap<
                super::QuantumStateComponentFieldsKey,
                super::QuantumStateComponentFieldsValue,
            >,
            ::std::string::String,
        >,
        physics_properties:
            ::std::result::Result<super::BasePhysicsProperties, ::std::string::String>,
    }
    impl ::std::default::Default for QuantumStateComponent {
        fn default() -> Self {
            Self {
                fields: Err("no value supplied for fields".to_string()),
                physics_properties: Err("no value supplied for physics_properties".to_string()),
            }
        }
    }
    impl QuantumStateComponent {
        pub fn fields<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::collections::HashMap<
                    super::QuantumStateComponentFieldsKey,
                    super::QuantumStateComponentFieldsValue,
                >,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.fields = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for fields: {}", e));
            self
        }
        pub fn physics_properties<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<super::BasePhysicsProperties>,
            T::Error: ::std::fmt::Display,
        {
            self.physics_properties = value.try_into().map_err(|e| {
                format!(
                    "error converting supplied value for physics_properties: {}",
                    e
                )
            });
            self
        }
    }
    impl ::std::convert::TryFrom<QuantumStateComponent> for super::QuantumStateComponent {
        type Error = super::error::ConversionError;
        fn try_from(
            value: QuantumStateComponent,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                fields: value.fields?,
                physics_properties: value.physics_properties?,
            })
        }
    }
    impl ::std::convert::From<super::QuantumStateComponent> for QuantumStateComponent {
        fn from(value: super::QuantumStateComponent) -> Self {
            Self {
                fields: Ok(value.fields),
                physics_properties: Ok(value.physics_properties),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct TaskStatusComponent {
        fields: ::std::result::Result<
            ::std::collections::HashMap<
                super::TaskStatusComponentFieldsKey,
                super::TaskStatusComponentFieldsValue,
            >,
            ::std::string::String,
        >,
        physics_properties:
            ::std::result::Result<super::BasePhysicsProperties, ::std::string::String>,
    }
    impl ::std::default::Default for TaskStatusComponent {
        fn default() -> Self {
            Self {
                fields: Err("no value supplied for fields".to_string()),
                physics_properties: Err("no value supplied for physics_properties".to_string()),
            }
        }
    }
    impl TaskStatusComponent {
        pub fn fields<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::collections::HashMap<
                    super::TaskStatusComponentFieldsKey,
                    super::TaskStatusComponentFieldsValue,
                >,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.fields = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for fields: {}", e));
            self
        }
        pub fn physics_properties<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<super::BasePhysicsProperties>,
            T::Error: ::std::fmt::Display,
        {
            self.physics_properties = value.try_into().map_err(|e| {
                format!(
                    "error converting supplied value for physics_properties: {}",
                    e
                )
            });
            self
        }
    }
    impl ::std::convert::TryFrom<TaskStatusComponent> for super::TaskStatusComponent {
        type Error = super::error::ConversionError;
        fn try_from(
            value: TaskStatusComponent,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                fields: value.fields?,
                physics_properties: value.physics_properties?,
            })
        }
    }
    impl ::std::convert::From<super::TaskStatusComponent> for TaskStatusComponent {
        fn from(value: super::TaskStatusComponent) -> Self {
            Self {
                fields: Ok(value.fields),
                physics_properties: Ok(value.physics_properties),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct ThreadContentComponent {
        fields: ::std::result::Result<
            ::std::collections::HashMap<
                super::ThreadContentComponentFieldsKey,
                super::ThreadContentComponentFieldsValue,
            >,
            ::std::string::String,
        >,
        physics_properties:
            ::std::result::Result<super::BasePhysicsProperties, ::std::string::String>,
    }
    impl ::std::default::Default for ThreadContentComponent {
        fn default() -> Self {
            Self {
                fields: Err("no value supplied for fields".to_string()),
                physics_properties: Err("no value supplied for physics_properties".to_string()),
            }
        }
    }
    impl ThreadContentComponent {
        pub fn fields<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<
                ::std::collections::HashMap<
                    super::ThreadContentComponentFieldsKey,
                    super::ThreadContentComponentFieldsValue,
                >,
            >,
            T::Error: ::std::fmt::Display,
        {
            self.fields = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for fields: {}", e));
            self
        }
        pub fn physics_properties<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<super::BasePhysicsProperties>,
            T::Error: ::std::fmt::Display,
        {
            self.physics_properties = value.try_into().map_err(|e| {
                format!(
                    "error converting supplied value for physics_properties: {}",
                    e
                )
            });
            self
        }
    }
    impl ::std::convert::TryFrom<ThreadContentComponent> for super::ThreadContentComponent {
        type Error = super::error::ConversionError;
        fn try_from(
            value: ThreadContentComponent,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                fields: value.fields?,
                physics_properties: value.physics_properties?,
            })
        }
    }
    impl ::std::convert::From<super::ThreadContentComponent> for ThreadContentComponent {
        fn from(value: super::ThreadContentComponent) -> Self {
            Self {
                fields: Ok(value.fields),
                physics_properties: Ok(value.physics_properties),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct UniversalPhysicsStateComponent {
        fields: ::std::result::Result<super::UniversalPhysicsStateFields, ::std::string::String>,
        physics_properties:
            ::std::result::Result<super::BasePhysicsProperties, ::std::string::String>,
    }
    impl ::std::default::Default for UniversalPhysicsStateComponent {
        fn default() -> Self {
            Self {
                fields: Err("no value supplied for fields".to_string()),
                physics_properties: Err("no value supplied for physics_properties".to_string()),
            }
        }
    }
    impl UniversalPhysicsStateComponent {
        pub fn fields<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<super::UniversalPhysicsStateFields>,
            T::Error: ::std::fmt::Display,
        {
            self.fields = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for fields: {}", e));
            self
        }
        pub fn physics_properties<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<super::BasePhysicsProperties>,
            T::Error: ::std::fmt::Display,
        {
            self.physics_properties = value.try_into().map_err(|e| {
                format!(
                    "error converting supplied value for physics_properties: {}",
                    e
                )
            });
            self
        }
    }
    impl ::std::convert::TryFrom<UniversalPhysicsStateComponent>
        for super::UniversalPhysicsStateComponent
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: UniversalPhysicsStateComponent,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                fields: value.fields?,
                physics_properties: value.physics_properties?,
            })
        }
    }
    impl ::std::convert::From<super::UniversalPhysicsStateComponent>
        for UniversalPhysicsStateComponent
    {
        fn from(value: super::UniversalPhysicsStateComponent) -> Self {
            Self {
                fields: Ok(value.fields),
                physics_properties: Ok(value.physics_properties),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct UniversalPhysicsStateFields {
        cognitive_perspective: ::std::result::Result<[f64; 3usize], ::std::string::String>,
        consolidation_rate:
            ::std::result::Result<super::ConsolidationRateField, ::std::string::String>,
        decay_rate: ::std::result::Result<
            super::UniversalPhysicsStateFieldsDecayRate,
            ::std::string::String,
        >,
        energy: ::std::result::Result<f64, ::std::string::String>,
        entanglement_strength:
            ::std::result::Result<::std::option::Option<f64>, ::std::string::String>,
        momentum: ::std::result::Result<[f64; 6usize], ::std::string::String>,
        quantum_coherence: ::std::result::Result<::std::option::Option<f64>, ::std::string::String>,
    }
    impl ::std::default::Default for UniversalPhysicsStateFields {
        fn default() -> Self {
            Self {
                cognitive_perspective: Err(
                    "no value supplied for cognitive_perspective".to_string()
                ),
                consolidation_rate: Err("no value supplied for consolidation_rate".to_string()),
                decay_rate: Err("no value supplied for decay_rate".to_string()),
                energy: Err("no value supplied for energy".to_string()),
                entanglement_strength: Err(
                    "no value supplied for entanglement_strength".to_string()
                ),
                momentum: Err("no value supplied for momentum".to_string()),
                quantum_coherence: Err("no value supplied for quantum_coherence".to_string()),
            }
        }
    }
    impl UniversalPhysicsStateFields {
        pub fn cognitive_perspective<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<[f64; 3usize]>,
            T::Error: ::std::fmt::Display,
        {
            self.cognitive_perspective = value.try_into().map_err(|e| {
                format!(
                    "error converting supplied value for cognitive_perspective: {}",
                    e
                )
            });
            self
        }
        pub fn consolidation_rate<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<super::ConsolidationRateField>,
            T::Error: ::std::fmt::Display,
        {
            self.consolidation_rate = value.try_into().map_err(|e| {
                format!(
                    "error converting supplied value for consolidation_rate: {}",
                    e
                )
            });
            self
        }
        pub fn decay_rate<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<super::UniversalPhysicsStateFieldsDecayRate>,
            T::Error: ::std::fmt::Display,
        {
            self.decay_rate = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for decay_rate: {}", e));
            self
        }
        pub fn energy<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<f64>,
            T::Error: ::std::fmt::Display,
        {
            self.energy = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for energy: {}", e));
            self
        }
        pub fn entanglement_strength<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<f64>>,
            T::Error: ::std::fmt::Display,
        {
            self.entanglement_strength = value.try_into().map_err(|e| {
                format!(
                    "error converting supplied value for entanglement_strength: {}",
                    e
                )
            });
            self
        }
        pub fn momentum<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<[f64; 6usize]>,
            T::Error: ::std::fmt::Display,
        {
            self.momentum = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for momentum: {}", e));
            self
        }
        pub fn quantum_coherence<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<::std::option::Option<f64>>,
            T::Error: ::std::fmt::Display,
        {
            self.quantum_coherence = value.try_into().map_err(|e| {
                format!(
                    "error converting supplied value for quantum_coherence: {}",
                    e
                )
            });
            self
        }
    }
    impl ::std::convert::TryFrom<UniversalPhysicsStateFields> for super::UniversalPhysicsStateFields {
        type Error = super::error::ConversionError;
        fn try_from(
            value: UniversalPhysicsStateFields,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                cognitive_perspective: value.cognitive_perspective?,
                consolidation_rate: value.consolidation_rate?,
                decay_rate: value.decay_rate?,
                energy: value.energy?,
                entanglement_strength: value.entanglement_strength?,
                momentum: value.momentum?,
                quantum_coherence: value.quantum_coherence?,
            })
        }
    }
    impl ::std::convert::From<super::UniversalPhysicsStateFields> for UniversalPhysicsStateFields {
        fn from(value: super::UniversalPhysicsStateFields) -> Self {
            Self {
                cognitive_perspective: Ok(value.cognitive_perspective),
                consolidation_rate: Ok(value.consolidation_rate),
                decay_rate: Ok(value.decay_rate),
                energy: Ok(value.energy),
                entanglement_strength: Ok(value.entanglement_strength),
                momentum: Ok(value.momentum),
                quantum_coherence: Ok(value.quantum_coherence),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct UniversalPhysicsStateFieldsDecayRate {
        value: ::std::result::Result<f64, ::std::string::String>,
    }
    impl ::std::default::Default for UniversalPhysicsStateFieldsDecayRate {
        fn default() -> Self {
            Self {
                value: Err("no value supplied for value".to_string()),
            }
        }
    }
    impl UniversalPhysicsStateFieldsDecayRate {
        pub fn value<T>(mut self, value: T) -> Self
        where
            T: ::std::convert::TryInto<f64>,
            T::Error: ::std::fmt::Display,
        {
            self.value = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for value: {}", e));
            self
        }
    }
    impl ::std::convert::TryFrom<UniversalPhysicsStateFieldsDecayRate>
        for super::UniversalPhysicsStateFieldsDecayRate
    {
        type Error = super::error::ConversionError;
        fn try_from(
            value: UniversalPhysicsStateFieldsDecayRate,
        ) -> ::std::result::Result<Self, super::error::ConversionError> {
            Ok(Self {
                value: value.value?,
            })
        }
    }
    impl ::std::convert::From<super::UniversalPhysicsStateFieldsDecayRate>
        for UniversalPhysicsStateFieldsDecayRate
    {
        fn from(value: super::UniversalPhysicsStateFieldsDecayRate) -> Self {
            Self {
                value: Ok(value.value),
            }
        }
    }
}
