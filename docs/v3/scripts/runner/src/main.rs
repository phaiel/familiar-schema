use std::env;
use std::fs;
use std::path::Path;
use schemafy_lib::{Expander, Schema};

fn main() -> Result<(), Box<dyn std::error::Error>> {
    let args: Vec<String> = env::args().collect();
    
    if args.len() != 4 || args[1] != "-o" {
        eprintln!("Usage: {} -o <output_file> <schema_file>", args[0]);
        std::process::exit(1);
    }
    
    let output_file = &args[2];
    let schema_file = &args[3];
    
    // Read the assembled FamiliarTypes schema file
    let schema_content = fs::read_to_string(schema_file)?;
    
    // Parse the schema JSON to get the Schema struct
    let schema: Schema = serde_json::from_str(&schema_content)?;
    
    // Generate Rust code using schemafy with "FamiliarTypes" as root type
    let mut expander = Expander::new(
        Some("FamiliarTypes"),
        "::schemafy_core::",
        &schema,
    );
    
    let generated_tokens = expander.expand(&schema);
    
    // Format the generated code
    let generated_code = prettyplease::unparse(&syn::parse2::<syn::File>(generated_tokens)?);
    
    // Create the final content with header
    let final_content = format!(
        "// Generated by schemafy\n\nuse serde::{{Deserialize, Serialize}};\n\n{}\n",
        generated_code
    );
    
    // Ensure the output directory exists
    if let Some(parent) = Path::new(output_file).parent() {
        fs::create_dir_all(parent)?;
    }
    
    fs::write(output_file, final_content)?;
    
    println!("Generated Rust types from FamiliarTypes schema in {}", output_file);
    
    Ok(())
} 